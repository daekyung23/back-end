// @ts-nocheck
import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const Approval_roleScalarFieldEnumSchema = z.enum(['role_id','role_name','upper_role_id']);

export const CallScalarFieldEnumSchema = z.enum(['call_id','call_type_id','client_branch_id','requester_name','requester_num','requester_black_consumer','device_id','detail','state','received_at','receiver_id','transferred_at','transferred_dept_id','assigner_id','completed_at']);

export const Call_typeScalarFieldEnumSchema = z.enum(['call_type_id','call_type_name','parent_call_type_id']);

export const ClientScalarFieldEnumSchema = z.enum(['client_id','parent_client_id','default_client_branch_rate_id','client_name','remote_support','push_alert','is_active']);

export const Client_branchScalarFieldEnumSchema = z.enum(['client_branch_id','sigungu_id','mgmt_dept_id','client_id','client_branch_name','client_branch_rate_id','branch_mgr_name','branch_mgr_mobile_num','branch_mgr_office_num','branch_mgr_email','is_active','remote_support','push_alert']);

export const Client_rateScalarFieldEnumSchema = z.enum(['client_rate_id','rate_type','rate_detail']);

export const Consumable_modelScalarFieldEnumSchema = z.enum(['consumable_model_id','manufacturer','consumable_name','consumable_type']);

export const DeptScalarFieldEnumSchema = z.enum(['dept_id','parent_dept_id','dept_name']);

export const DeviceScalarFieldEnumSchema = z.enum(['device_id','device_model_id','owner_dept_id','mgmt_dept_id','serial','regi_date','mac','last_inspection_log_id','last_location_log_id','status_id']);

export const Device_approvalScalarFieldEnumSchema = z.enum(['approval_id','approval_type_id','sub_approval_id','requester_id','request_at','approver_role_id','origin_location_id','destination_location_id','approver_id','approve_at','is_approved']);

export const Device_approval_typeScalarFieldEnumSchema = z.enum(['approval_type_id','approval_type_name']);

export const Device_consumable_compatibilityScalarFieldEnumSchema = z.enum(['device_model_id','consumable_model_id']);

export const Device_driverScalarFieldEnumSchema = z.enum(['device_driver_id','device_model_id','manufacturer','printer_language','install_file_address']);

export const Device_inspection_logScalarFieldEnumSchema = z.enum(['device_inspection_log_id','device_id','inspector_id','inspection_date','visit_type','call_id','FL','FS','BL','BS','toner_count_YE','toner_count_MA','toner_count_CY','toner_count_BK','toner_stock_YE','toner_stock_MA','toner_stock_CY','toner_stock_BK','toner_deliver_YE','toner_deliver_CY','toner_deliver_MA','toner_deliver_BK','drum_count_YE','drum_count_MA','drum_count_CY','drum_count_BK','drum_replacement_detail','status']);

export const Device_install_infoScalarFieldEnumSchema = z.enum(['device_id','installer_id','mgmt_num','ip_address','subnet_mask','gateway','dns1','dns2']);

export const Device_location_logScalarFieldEnumSchema = z.enum(['device_location_log_id','device_id','location_date','location_id','location_detail']);

export const Device_modelScalarFieldEnumSchema = z.enum(['device_model_id','model_name','manufacturer','color_support']);

export const Device_optionScalarFieldEnumSchema = z.enum(['device_option_id','option_model_id','serial','is_active','location_type','location_warehouse_id','location_device_id']);

export const Device_option_compatibilityScalarFieldEnumSchema = z.enum(['device_model_id','option_model_id']);

export const Device_statusScalarFieldEnumSchema = z.enum(['status_id','status_name']);

export const Inspection_approvalScalarFieldEnumSchema = z.enum(['approval_id','requester_id','request_at','approver_role_id','device_inspection_log_id','approver_id','approved_at','is_approved']);

export const LocationScalarFieldEnumSchema = z.enum(['location_id','location_type','warehouse_id','client_branch_id']);

export const Option_modelScalarFieldEnumSchema = z.enum(['option_model_id','option_model_name','option_type','manufacturer']);

export const SidoScalarFieldEnumSchema = z.enum(['sido_id','sido_name']);

export const SigunguScalarFieldEnumSchema = z.enum(['sigungu_id','sigungu_name','sido_id']);

export const UserScalarFieldEnumSchema = z.enum(['user_id','user_name','login_id','password','mobile_num','office_num','email','modified_at','dept_id','approval_role_id','position_id','created_at','is_active','permission']);

export const User_positionScalarFieldEnumSchema = z.enum(['user_position_id','position_name']);

export const User_role_assignmentScalarFieldEnumSchema = z.enum(['role_id','approver_id']);

export const WarehouseScalarFieldEnumSchema = z.enum(['warehouse_id','warehouse_name','mgmt_dept_id']);

export const DeleteneededScalarFieldEnumSchema = z.enum(['id']);

export const V_clientScalarFieldEnumSchema = z.enum(['client_id','client_name','parent_client_id','default_client_branch_rate_id','is_active','parent_client_name','client_rate','rate_detail','branch_count']);

export const V_client_branchScalarFieldEnumSchema = z.enum(['client_branch_id','client_branch_name','client_id','sigungu_id','mgmt_dept_id','client_branch_rate_id','branch_mgr_name','branch_mgr_mobile_num','branch_mgr_office_num','branch_mgr_email','is_active','remote_support','push_alert','client_name','sigungu_name','sido_name']);

export const V_consumable_modelScalarFieldEnumSchema = z.enum(['compatibility_id','consumable_model_id','manufacturer','consumable_name','consumable_type','model_manufacturer','model_name','device_model_id']);

export const V_deptScalarFieldEnumSchema = z.enum(['dept_id','dept_1_id','dept_1','dept_2_id','dept_2','dept_3_id','dept_3']);

export const V_device_driverScalarFieldEnumSchema = z.enum(['device_driver_id','device_model_id','driver_manufacturer','printer_language','install_file_address','model_manufacturer','model_name','color_support']);

export const V_userScalarFieldEnumSchema = z.enum(['user_id','user_name','login_id','mobile_num','office_num','email','modified_at','created_at','is_active','permission','dept_id','approval_role_id','position_id','dept_name','parent_dept_id']);

export const V_warehouseScalarFieldEnumSchema = z.enum(['warehouse_id','warehouse_name','mgmt_dept_id','mgmt_dept_name','mgmt_parent_dept_id']);

export const V_deviceScalarFieldEnumSchema = z.enum(['device_id','device_model_id','owner_dept_id','mgmt_dept_id','serial','regi_date','mac','last_inspection_log_id','last_location_log_id','status_id','model_name','manufacturer','owner_dept_name','mgmt_dept_name','location_id','warehouse_id','warehouse_name','client_branch_id','client_branch_name','status_name','has_fax','has_desk','has_shelf']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const NullsOrderSchema = z.enum(['first','last']);

export const location_location_typeSchema = z.enum(['warehouse','client_branch']);

export type location_location_typeType = `${z.infer<typeof location_location_typeSchema>}`

export const device_option_location_typeSchema = z.enum(['warehouse','device']);

export type device_option_location_typeType = `${z.infer<typeof device_option_location_typeSchema>}`

export const user_permissionSchema = z.enum(['user','manager','admin']);

export type user_permissionType = `${z.infer<typeof user_permissionSchema>}`

export const device_inspection_log_statusSchema = z.enum(['normal','pending']);

export type device_inspection_log_statusType = `${z.infer<typeof device_inspection_log_statusSchema>}`

export const v_user_permissionSchema = z.enum(['user','manager','admin']);

export type v_user_permissionType = `${z.infer<typeof v_user_permissionSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// APPROVAL ROLE SCHEMA
/////////////////////////////////////////

export const approval_roleSchema = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  upper_role_id: z.coerce.number().nullable().nullable(),
})

export type approval_role = z.infer<typeof approval_roleSchema>

/////////////////////////////////////////
// CALL SCHEMA
/////////////////////////////////////////

export const callSchema = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0),
  device_id: z.coerce.number().nullable().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().nullable(),
  transferred_dept_id: z.coerce.number().nullable().nullable(),
  assigner_id: z.coerce.number().nullable().nullable(),
  completed_at: z.coerce.date().nullable(),
})

export type call = z.infer<typeof callSchema>

/////////////////////////////////////////
// CALL TYPE SCHEMA
/////////////////////////////////////////

export const call_typeSchema = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50),
  parent_call_type_id: z.coerce.number().nullable().nullable(),
})

export type call_type = z.infer<typeof call_typeSchema>

/////////////////////////////////////////
// CLIENT SCHEMA
/////////////////////////////////////////

export const clientSchema = z.object({
  client_id: z.coerce.number(),
  parent_client_id: z.coerce.number().nullable().nullable(),
  default_client_branch_rate_id: z.coerce.number().nullable().nullable(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().nullable(),
  push_alert: z.coerce.number().nullable().nullable(),
  is_active: z.coerce.number().default(1),
})

export type client = z.infer<typeof clientSchema>

/////////////////////////////////////////
// CLIENT BRANCH SCHEMA
/////////////////////////////////////////

export const client_branchSchema = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().nullable(),
  branch_mgr_email: z.string().max(45).nullable().nullable(),
  is_active: z.coerce.number().default(1),
  remote_support: z.coerce.number().default(0),
  push_alert: z.coerce.number().default(0),
})

export type client_branch = z.infer<typeof client_branchSchema>

/////////////////////////////////////////
// CLIENT RATE SCHEMA
/////////////////////////////////////////

export const client_rateSchema = z.object({
  client_rate_id: z.coerce.number(),
  rate_type: z.string().max(10),
  rate_detail: z.string().max(45).nullable().nullable(),
})

export type client_rate = z.infer<typeof client_rateSchema>

/////////////////////////////////////////
// CONSUMABLE MODEL SCHEMA
/////////////////////////////////////////

export const consumable_modelSchema = z.object({
  consumable_model_id: z.coerce.number(),
  manufacturer: z.string().max(100),
  consumable_name: z.string().max(100),
  consumable_type: z.string().max(100),
})

export type consumable_model = z.infer<typeof consumable_modelSchema>

/////////////////////////////////////////
// DEPT SCHEMA
/////////////////////////////////////////

export const deptSchema = z.object({
  dept_id: z.coerce.number(),
  parent_dept_id: z.coerce.number().nullable().nullable(),
  dept_name: z.string().max(100),
})

export type dept = z.infer<typeof deptSchema>

/////////////////////////////////////////
// DEVICE SCHEMA
/////////////////////////////////////////

export const deviceSchema = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().nullable(),
  last_location_log_id: z.coerce.number().nullable().nullable(),
  status_id: z.coerce.number(),
})

export type device = z.infer<typeof deviceSchema>

/////////////////////////////////////////
// DEVICE APPROVAL SCHEMA
/////////////////////////////////////////

export const device_approvalSchema = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().nullable(),
  destination_location_id: z.coerce.number().nullable().nullable(),
  approver_id: z.coerce.number().nullable().nullable(),
  approve_at: z.coerce.date().nullable(),
  is_approved: z.coerce.number().nullable().nullable(),
})

export type device_approval = z.infer<typeof device_approvalSchema>

/////////////////////////////////////////
// DEVICE APPROVAL TYPE SCHEMA
/////////////////////////////////////////

export const device_approval_typeSchema = z.object({
  approval_type_id: z.coerce.number(),
  approval_type_name: z.string().max(45),
})

export type device_approval_type = z.infer<typeof device_approval_typeSchema>

/////////////////////////////////////////
// DEVICE CONSUMABLE COMPATIBILITY SCHEMA
/////////////////////////////////////////

export const device_consumable_compatibilitySchema = z.object({
  device_model_id: z.coerce.number(),
  consumable_model_id: z.coerce.number(),
})

export type device_consumable_compatibility = z.infer<typeof device_consumable_compatibilitySchema>

/////////////////////////////////////////
// DEVICE DRIVER SCHEMA
/////////////////////////////////////////

export const device_driverSchema = z.object({
  device_driver_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  manufacturer: z.string().max(100).nullable().nullable(),
  printer_language: z.string().max(45).nullable().nullable(),
  install_file_address: z.string().max(200).nullable().nullable(),
})

export type device_driver = z.infer<typeof device_driverSchema>

/////////////////////////////////////////
// DEVICE INSPECTION LOG SCHEMA
/////////////////////////////////////////

export const device_inspection_logSchema = z.object({
  status: device_inspection_log_statusSchema.nullable(),
  device_inspection_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  inspector_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  call_id: z.coerce.number().nullable().nullable(),
  FL: z.coerce.number().nullable().nullable(),
  FS: z.coerce.number().nullable().nullable(),
  BL: z.coerce.number().nullable().nullable(),
  BS: z.coerce.number().nullable().nullable(),
  toner_count_YE: z.coerce.number().nullable().nullable(),
  toner_count_MA: z.coerce.number().nullable().nullable(),
  toner_count_CY: z.coerce.number().nullable().nullable(),
  toner_count_BK: z.coerce.number().nullable().nullable(),
  toner_stock_YE: z.coerce.number().nullable().nullable(),
  toner_stock_MA: z.coerce.number().nullable().nullable(),
  toner_stock_CY: z.coerce.number().nullable().nullable(),
  toner_stock_BK: z.coerce.number().nullable().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().nullable(),
  drum_count_YE: z.coerce.number().nullable().nullable(),
  drum_count_MA: z.coerce.number().nullable().nullable(),
  drum_count_CY: z.coerce.number().nullable().nullable(),
  drum_count_BK: z.coerce.number().nullable().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().nullable(),
})

export type device_inspection_log = z.infer<typeof device_inspection_logSchema>

/////////////////////////////////////////
// DEVICE INSTALL INFO SCHEMA
/////////////////////////////////////////

export const device_install_infoSchema = z.object({
  device_id: z.coerce.number(),
  installer_id: z.coerce.number(),
  mgmt_num: z.string().max(50),
  ip_address: z.string().max(50).nullable().nullable(),
  subnet_mask: z.string().max(50).nullable().nullable(),
  gateway: z.string().max(50).nullable().nullable(),
  dns1: z.string().max(50).nullable().nullable(),
  dns2: z.string().max(50).nullable().nullable(),
})

export type device_install_info = z.infer<typeof device_install_infoSchema>

/////////////////////////////////////////
// DEVICE LOCATION LOG SCHEMA
/////////////////////////////////////////

export const device_location_logSchema = z.object({
  device_location_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_id: z.coerce.number(),
  location_detail: z.string().max(200).nullable().nullable(),
})

export type device_location_log = z.infer<typeof device_location_logSchema>

/////////////////////////////////////////
// DEVICE MODEL SCHEMA
/////////////////////////////////////////

export const device_modelSchema = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
})

export type device_model = z.infer<typeof device_modelSchema>

/////////////////////////////////////////
// DEVICE OPTION SCHEMA
/////////////////////////////////////////

export const device_optionSchema = z.object({
  location_type: device_option_location_typeSchema,
  device_option_id: z.coerce.number(),
  option_model_id: z.coerce.number(),
  serial: z.string().max(50).nullable().nullable(),
  is_active: z.coerce.number().default(1),
  location_warehouse_id: z.coerce.number().nullable().nullable(),
  location_device_id: z.coerce.number().nullable().nullable(),
})

export type device_option = z.infer<typeof device_optionSchema>

/////////////////////////////////////////
// DEVICE OPTION COMPATIBILITY SCHEMA
/////////////////////////////////////////

export const device_option_compatibilitySchema = z.object({
  device_model_id: z.coerce.number(),
  option_model_id: z.coerce.number(),
})

export type device_option_compatibility = z.infer<typeof device_option_compatibilitySchema>

/////////////////////////////////////////
// DEVICE STATUS SCHEMA
/////////////////////////////////////////

export const device_statusSchema = z.object({
  status_id: z.coerce.number(),
  status_name: z.string().max(45),
})

export type device_status = z.infer<typeof device_statusSchema>

/////////////////////////////////////////
// INSPECTION APPROVAL SCHEMA
/////////////////////////////////////////

export const inspection_approvalSchema = z.object({
  approval_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number().nullable().nullable(),
  device_inspection_log_id: z.coerce.number(),
  approver_id: z.coerce.number().nullable().nullable(),
  approved_at: z.coerce.date().nullable(),
  is_approved: z.coerce.number().nullable().nullable(),
})

export type inspection_approval = z.infer<typeof inspection_approvalSchema>

/////////////////////////////////////////
// LOCATION SCHEMA
/////////////////////////////////////////

export const locationSchema = z.object({
  location_type: location_location_typeSchema,
  location_id: z.coerce.number(),
  warehouse_id: z.coerce.number().nullable().nullable(),
  client_branch_id: z.coerce.number().nullable().nullable(),
})

export type location = z.infer<typeof locationSchema>

/////////////////////////////////////////
// OPTION MODEL SCHEMA
/////////////////////////////////////////

export const option_modelSchema = z.object({
  option_model_id: z.coerce.number(),
  option_model_name: z.string().max(100),
  option_type: z.string().max(45),
  manufacturer: z.string().max(100),
})

export type option_model = z.infer<typeof option_modelSchema>

/////////////////////////////////////////
// SIDO SCHEMA
/////////////////////////////////////////

export const sidoSchema = z.object({
  sido_id: z.coerce.number(),
  sido_name: z.string().max(45).nullable().nullable(),
})

export type sido = z.infer<typeof sidoSchema>

/////////////////////////////////////////
// SIGUNGU SCHEMA
/////////////////////////////////////////

export const sigunguSchema = z.object({
  sigungu_id: z.coerce.number(),
  sigungu_name: z.string().max(45),
  sido_id: z.coerce.number(),
})

export type sigungu = z.infer<typeof sigunguSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const userSchema = z.object({
  permission: user_permissionSchema,
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().nullable(),
  office_num: z.string().max(20).nullable().nullable(),
  email: z.string().max(100).nullable().nullable(),
  modified_at: z.coerce.date().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1),
})

export type user = z.infer<typeof userSchema>

/////////////////////////////////////////
// USER POSITION SCHEMA
/////////////////////////////////////////

export const user_positionSchema = z.object({
  user_position_id: z.coerce.number(),
  position_name: z.string().max(45),
})

export type user_position = z.infer<typeof user_positionSchema>

/////////////////////////////////////////
// USER ROLE ASSIGNMENT SCHEMA
/////////////////////////////////////////

export const user_role_assignmentSchema = z.object({
  role_id: z.coerce.number(),
  approver_id: z.coerce.number(),
})

export type user_role_assignment = z.infer<typeof user_role_assignmentSchema>

/////////////////////////////////////////
// WAREHOUSE SCHEMA
/////////////////////////////////////////

export const warehouseSchema = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  mgmt_dept_id: z.coerce.number(),
})

export type warehouse = z.infer<typeof warehouseSchema>

/////////////////////////////////////////
// DELETENEEDED SCHEMA
/////////////////////////////////////////

export const deleteneededSchema = z.object({
  id: z.coerce.number(),
})

export type deleteneeded = z.infer<typeof deleteneededSchema>

/////////////////////////////////////////
// V CLIENT SCHEMA
/////////////////////////////////////////

/**
 * The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
 */
export const v_clientSchema = z.object({
  client_id: z.coerce.number(),
  client_name: z.string().max(45),
  parent_client_id: z.coerce.number().nullable().nullable(),
  default_client_branch_rate_id: z.coerce.number().default(0),
  is_active: z.coerce.number().default(0),
  parent_client_name: z.string().max(45).nullable().nullable(),
  client_rate: z.string().max(10).nullable().nullable(),
  rate_detail: z.string().max(45).nullable().nullable(),
  branch_count: z.coerce.number().default(0),
})

export type v_client = z.infer<typeof v_clientSchema>

/////////////////////////////////////////
// V CLIENT BRANCH SCHEMA
/////////////////////////////////////////

/**
 * The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
 */
export const v_client_branchSchema = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().nullable(),
  branch_mgr_email: z.string().max(45).nullable().nullable(),
  is_active: z.coerce.number().default(1),
  remote_support: z.coerce.number().default(0),
  push_alert: z.coerce.number().default(0),
  client_name: z.string().max(45).nullable().nullable(),
  sigungu_name: z.string().max(45).nullable().nullable(),
  sido_name: z.string().max(45).nullable().nullable(),
})

export type v_client_branch = z.infer<typeof v_client_branchSchema>

/////////////////////////////////////////
// V CONSUMABLE MODEL SCHEMA
/////////////////////////////////////////

/**
 * The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
 */
export const v_consumable_modelSchema = z.object({
  compatibility_id: z.string().max(23),
  consumable_model_id: z.coerce.number().nullable().nullable(),
  manufacturer: z.string().max(100).nullable().nullable(),
  consumable_name: z.string().max(100).nullable().nullable(),
  consumable_type: z.string().max(100).nullable().nullable(),
  model_manufacturer: z.string().max(100).nullable().nullable(),
  model_name: z.string().max(100).nullable().nullable(),
  device_model_id: z.coerce.number().nullable().nullable(),
})

export type v_consumable_model = z.infer<typeof v_consumable_modelSchema>

/////////////////////////////////////////
// V DEPT SCHEMA
/////////////////////////////////////////

/**
 * The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
 */
export const v_deptSchema = z.object({
  dept_id: z.coerce.number(),
  dept_1_id: z.string().max(20),
  dept_1: z.string().max(100),
  dept_2_id: z.string().max(20).nullable().nullable(),
  dept_2: z.string().max(100).nullable().nullable(),
  dept_3_id: z.string().max(20).nullable().nullable(),
  dept_3: z.string().max(100).nullable().nullable(),
})

export type v_dept = z.infer<typeof v_deptSchema>

/////////////////////////////////////////
// V DEVICE DRIVER SCHEMA
/////////////////////////////////////////

/**
 * The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
 */
export const v_device_driverSchema = z.object({
  device_driver_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  driver_manufacturer: z.string().max(100).nullable().nullable(),
  printer_language: z.string().max(45).nullable().nullable(),
  install_file_address: z.string().max(200).nullable().nullable(),
  model_manufacturer: z.string().max(100).nullable().nullable(),
  model_name: z.string().max(100).nullable().nullable(),
  color_support: z.coerce.number().nullable().nullable(),
})

export type v_device_driver = z.infer<typeof v_device_driverSchema>

/////////////////////////////////////////
// V USER SCHEMA
/////////////////////////////////////////

/**
 * The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
 */
export const v_userSchema = z.object({
  permission: v_user_permissionSchema,
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  mobile_num: z.string().max(20).nullable().nullable(),
  office_num: z.string().max(20).nullable().nullable(),
  email: z.string().max(100).nullable().nullable(),
  modified_at: z.coerce.date().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number(),
  position_id: z.coerce.number(),
  dept_name: z.string().max(100).nullable().nullable(),
  parent_dept_id: z.coerce.number().nullable().nullable(),
})

export type v_user = z.infer<typeof v_userSchema>

/////////////////////////////////////////
// V WAREHOUSE SCHEMA
/////////////////////////////////////////

/**
 * The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
 */
export const v_warehouseSchema = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  mgmt_dept_id: z.coerce.number(),
  mgmt_dept_name: z.string().max(100).nullable().nullable(),
  mgmt_parent_dept_id: z.coerce.number().nullable().nullable(),
})

export type v_warehouse = z.infer<typeof v_warehouseSchema>

/////////////////////////////////////////
// V DEVICE SCHEMA
/////////////////////////////////////////

/**
 * The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
 */
export const v_deviceSchema = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().nullable(),
  last_location_log_id: z.coerce.number().nullable().nullable(),
  status_id: z.coerce.number(),
  model_name: z.string().max(100).nullable().nullable(),
  manufacturer: z.string().max(100).nullable().nullable(),
  owner_dept_name: z.string().max(100).nullable().nullable(),
  mgmt_dept_name: z.string().max(100).nullable().nullable(),
  location_id: z.coerce.number().nullable().nullable(),
  warehouse_id: z.coerce.number().nullable().nullable(),
  warehouse_name: z.string().max(100).nullable().nullable(),
  client_branch_id: z.coerce.number().nullable().nullable(),
  client_branch_name: z.string().max(100).nullable().nullable(),
  status_name: z.string().max(45).nullable().nullable(),
  has_fax: z.coerce.number().nullable().nullable(),
  has_desk: z.coerce.number().nullable().nullable(),
  has_shelf: z.coerce.number().nullable().nullable(),
})

export type v_device = z.infer<typeof v_deviceSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// APPROVAL ROLE
//------------------------------------------------------

export const approval_roleIncludeSchema: z.ZodType<Prisma.approval_roleInclude> = z.object({
  approval_role: z.union([z.boolean(),z.lazy(() => approval_roleArgsSchema)]).optional(),
  other_approval_role: z.union([z.boolean(),z.lazy(() => approval_roleFindManyArgsSchema)]).optional(),
  device_approval: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  inspection_approval: z.union([z.boolean(),z.lazy(() => inspection_approvalFindManyArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userFindManyArgsSchema)]).optional(),
  user_role_assignment: z.union([z.boolean(),z.lazy(() => user_role_assignmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Approval_roleCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const approval_roleArgsSchema: z.ZodType<Prisma.approval_roleDefaultArgs> = z.object({
  select: z.lazy(() => approval_roleSelectSchema).optional(),
  include: z.lazy(() => approval_roleIncludeSchema).optional(),
}).strict();

export const approval_roleCountOutputTypeArgsSchema: z.ZodType<Prisma.approval_roleCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => approval_roleCountOutputTypeSelectSchema).nullish(),
}).strict();

export const approval_roleCountOutputTypeSelectSchema: z.ZodType<Prisma.approval_roleCountOutputTypeSelect> = z.object({
  other_approval_role: z.boolean().optional(),
  device_approval: z.boolean().optional(),
  inspection_approval: z.boolean().optional(),
  user: z.boolean().optional(),
  user_role_assignment: z.boolean().optional(),
}).strict();

export const approval_roleSelectSchema: z.ZodType<Prisma.approval_roleSelect> = z.object({
  role_id: z.boolean().optional(),
  role_name: z.boolean().optional(),
  upper_role_id: z.boolean().optional(),
  approval_role: z.union([z.boolean(),z.lazy(() => approval_roleArgsSchema)]).optional(),
  other_approval_role: z.union([z.boolean(),z.lazy(() => approval_roleFindManyArgsSchema)]).optional(),
  device_approval: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  inspection_approval: z.union([z.boolean(),z.lazy(() => inspection_approvalFindManyArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userFindManyArgsSchema)]).optional(),
  user_role_assignment: z.union([z.boolean(),z.lazy(() => user_role_assignmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Approval_roleCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CALL
//------------------------------------------------------

export const callIncludeSchema: z.ZodType<Prisma.callInclude> = z.object({
  call_type: z.union([z.boolean(),z.lazy(() => call_typeArgsSchema)]).optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchArgsSchema)]).optional(),
  dept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  device: z.union([z.boolean(),z.lazy(() => deviceArgsSchema)]).optional(),
  user_call_receiver_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  user_call_assigner_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  device_inspection_log: z.union([z.boolean(),z.lazy(() => device_inspection_logFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CallCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const callArgsSchema: z.ZodType<Prisma.callDefaultArgs> = z.object({
  select: z.lazy(() => callSelectSchema).optional(),
  include: z.lazy(() => callIncludeSchema).optional(),
}).strict();

export const callCountOutputTypeArgsSchema: z.ZodType<Prisma.callCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => callCountOutputTypeSelectSchema).nullish(),
}).strict();

export const callCountOutputTypeSelectSchema: z.ZodType<Prisma.callCountOutputTypeSelect> = z.object({
  device_inspection_log: z.boolean().optional(),
}).strict();

export const callSelectSchema: z.ZodType<Prisma.callSelect> = z.object({
  call_id: z.boolean().optional(),
  call_type_id: z.boolean().optional(),
  client_branch_id: z.boolean().optional(),
  requester_name: z.boolean().optional(),
  requester_num: z.boolean().optional(),
  requester_black_consumer: z.boolean().optional(),
  device_id: z.boolean().optional(),
  detail: z.boolean().optional(),
  state: z.boolean().optional(),
  received_at: z.boolean().optional(),
  receiver_id: z.boolean().optional(),
  transferred_at: z.boolean().optional(),
  transferred_dept_id: z.boolean().optional(),
  assigner_id: z.boolean().optional(),
  completed_at: z.boolean().optional(),
  call_type: z.union([z.boolean(),z.lazy(() => call_typeArgsSchema)]).optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchArgsSchema)]).optional(),
  dept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  device: z.union([z.boolean(),z.lazy(() => deviceArgsSchema)]).optional(),
  user_call_receiver_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  user_call_assigner_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  device_inspection_log: z.union([z.boolean(),z.lazy(() => device_inspection_logFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CallCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CALL TYPE
//------------------------------------------------------

export const call_typeIncludeSchema: z.ZodType<Prisma.call_typeInclude> = z.object({
  call: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  call_type: z.union([z.boolean(),z.lazy(() => call_typeArgsSchema)]).optional(),
  other_call_type: z.union([z.boolean(),z.lazy(() => call_typeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Call_typeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const call_typeArgsSchema: z.ZodType<Prisma.call_typeDefaultArgs> = z.object({
  select: z.lazy(() => call_typeSelectSchema).optional(),
  include: z.lazy(() => call_typeIncludeSchema).optional(),
}).strict();

export const call_typeCountOutputTypeArgsSchema: z.ZodType<Prisma.call_typeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => call_typeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const call_typeCountOutputTypeSelectSchema: z.ZodType<Prisma.call_typeCountOutputTypeSelect> = z.object({
  call: z.boolean().optional(),
  other_call_type: z.boolean().optional(),
}).strict();

export const call_typeSelectSchema: z.ZodType<Prisma.call_typeSelect> = z.object({
  call_type_id: z.boolean().optional(),
  call_type_name: z.boolean().optional(),
  parent_call_type_id: z.boolean().optional(),
  call: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  call_type: z.union([z.boolean(),z.lazy(() => call_typeArgsSchema)]).optional(),
  other_call_type: z.union([z.boolean(),z.lazy(() => call_typeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Call_typeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CLIENT
//------------------------------------------------------

export const clientIncludeSchema: z.ZodType<Prisma.clientInclude> = z.object({
  client: z.union([z.boolean(),z.lazy(() => clientArgsSchema)]).optional(),
  other_client: z.union([z.boolean(),z.lazy(() => clientFindManyArgsSchema)]).optional(),
  client_rate: z.union([z.boolean(),z.lazy(() => client_rateArgsSchema)]).optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ClientCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const clientArgsSchema: z.ZodType<Prisma.clientDefaultArgs> = z.object({
  select: z.lazy(() => clientSelectSchema).optional(),
  include: z.lazy(() => clientIncludeSchema).optional(),
}).strict();

export const clientCountOutputTypeArgsSchema: z.ZodType<Prisma.clientCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => clientCountOutputTypeSelectSchema).nullish(),
}).strict();

export const clientCountOutputTypeSelectSchema: z.ZodType<Prisma.clientCountOutputTypeSelect> = z.object({
  other_client: z.boolean().optional(),
  client_branch: z.boolean().optional(),
}).strict();

export const clientSelectSchema: z.ZodType<Prisma.clientSelect> = z.object({
  client_id: z.boolean().optional(),
  parent_client_id: z.boolean().optional(),
  default_client_branch_rate_id: z.boolean().optional(),
  client_name: z.boolean().optional(),
  remote_support: z.boolean().optional(),
  push_alert: z.boolean().optional(),
  is_active: z.boolean().optional(),
  client: z.union([z.boolean(),z.lazy(() => clientArgsSchema)]).optional(),
  other_client: z.union([z.boolean(),z.lazy(() => clientFindManyArgsSchema)]).optional(),
  client_rate: z.union([z.boolean(),z.lazy(() => client_rateArgsSchema)]).optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ClientCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CLIENT BRANCH
//------------------------------------------------------

export const client_branchIncludeSchema: z.ZodType<Prisma.client_branchInclude> = z.object({
  call: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  client: z.union([z.boolean(),z.lazy(() => clientArgsSchema)]).optional(),
  client_rate: z.union([z.boolean(),z.lazy(() => client_rateArgsSchema)]).optional(),
  dept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  sigungu: z.union([z.boolean(),z.lazy(() => sigunguArgsSchema)]).optional(),
  location: z.union([z.boolean(),z.lazy(() => locationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Client_branchCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const client_branchArgsSchema: z.ZodType<Prisma.client_branchDefaultArgs> = z.object({
  select: z.lazy(() => client_branchSelectSchema).optional(),
  include: z.lazy(() => client_branchIncludeSchema).optional(),
}).strict();

export const client_branchCountOutputTypeArgsSchema: z.ZodType<Prisma.client_branchCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => client_branchCountOutputTypeSelectSchema).nullish(),
}).strict();

export const client_branchCountOutputTypeSelectSchema: z.ZodType<Prisma.client_branchCountOutputTypeSelect> = z.object({
  call: z.boolean().optional(),
  location: z.boolean().optional(),
}).strict();

export const client_branchSelectSchema: z.ZodType<Prisma.client_branchSelect> = z.object({
  client_branch_id: z.boolean().optional(),
  sigungu_id: z.boolean().optional(),
  mgmt_dept_id: z.boolean().optional(),
  client_id: z.boolean().optional(),
  client_branch_name: z.boolean().optional(),
  client_branch_rate_id: z.boolean().optional(),
  branch_mgr_name: z.boolean().optional(),
  branch_mgr_mobile_num: z.boolean().optional(),
  branch_mgr_office_num: z.boolean().optional(),
  branch_mgr_email: z.boolean().optional(),
  is_active: z.boolean().optional(),
  remote_support: z.boolean().optional(),
  push_alert: z.boolean().optional(),
  call: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  client: z.union([z.boolean(),z.lazy(() => clientArgsSchema)]).optional(),
  client_rate: z.union([z.boolean(),z.lazy(() => client_rateArgsSchema)]).optional(),
  dept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  sigungu: z.union([z.boolean(),z.lazy(() => sigunguArgsSchema)]).optional(),
  location: z.union([z.boolean(),z.lazy(() => locationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Client_branchCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CLIENT RATE
//------------------------------------------------------

export const client_rateIncludeSchema: z.ZodType<Prisma.client_rateInclude> = z.object({
  client: z.union([z.boolean(),z.lazy(() => clientFindManyArgsSchema)]).optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Client_rateCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const client_rateArgsSchema: z.ZodType<Prisma.client_rateDefaultArgs> = z.object({
  select: z.lazy(() => client_rateSelectSchema).optional(),
  include: z.lazy(() => client_rateIncludeSchema).optional(),
}).strict();

export const client_rateCountOutputTypeArgsSchema: z.ZodType<Prisma.client_rateCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => client_rateCountOutputTypeSelectSchema).nullish(),
}).strict();

export const client_rateCountOutputTypeSelectSchema: z.ZodType<Prisma.client_rateCountOutputTypeSelect> = z.object({
  client: z.boolean().optional(),
  client_branch: z.boolean().optional(),
}).strict();

export const client_rateSelectSchema: z.ZodType<Prisma.client_rateSelect> = z.object({
  client_rate_id: z.boolean().optional(),
  rate_type: z.boolean().optional(),
  rate_detail: z.boolean().optional(),
  client: z.union([z.boolean(),z.lazy(() => clientFindManyArgsSchema)]).optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Client_rateCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CONSUMABLE MODEL
//------------------------------------------------------

export const consumable_modelIncludeSchema: z.ZodType<Prisma.consumable_modelInclude> = z.object({
  device_consumable_compatibility: z.union([z.boolean(),z.lazy(() => device_consumable_compatibilityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Consumable_modelCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const consumable_modelArgsSchema: z.ZodType<Prisma.consumable_modelDefaultArgs> = z.object({
  select: z.lazy(() => consumable_modelSelectSchema).optional(),
  include: z.lazy(() => consumable_modelIncludeSchema).optional(),
}).strict();

export const consumable_modelCountOutputTypeArgsSchema: z.ZodType<Prisma.consumable_modelCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => consumable_modelCountOutputTypeSelectSchema).nullish(),
}).strict();

export const consumable_modelCountOutputTypeSelectSchema: z.ZodType<Prisma.consumable_modelCountOutputTypeSelect> = z.object({
  device_consumable_compatibility: z.boolean().optional(),
}).strict();

export const consumable_modelSelectSchema: z.ZodType<Prisma.consumable_modelSelect> = z.object({
  consumable_model_id: z.boolean().optional(),
  manufacturer: z.boolean().optional(),
  consumable_name: z.boolean().optional(),
  consumable_type: z.boolean().optional(),
  device_consumable_compatibility: z.union([z.boolean(),z.lazy(() => device_consumable_compatibilityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Consumable_modelCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEPT
//------------------------------------------------------

export const deptIncludeSchema: z.ZodType<Prisma.deptInclude> = z.object({
  call: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchFindManyArgsSchema)]).optional(),
  dept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  other_dept: z.union([z.boolean(),z.lazy(() => deptFindManyArgsSchema)]).optional(),
  device_device_owner_dept_idTodept: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  device_device_mgmt_dept_idTodept: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userFindManyArgsSchema)]).optional(),
  warehouse: z.union([z.boolean(),z.lazy(() => warehouseFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DeptCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const deptArgsSchema: z.ZodType<Prisma.deptDefaultArgs> = z.object({
  select: z.lazy(() => deptSelectSchema).optional(),
  include: z.lazy(() => deptIncludeSchema).optional(),
}).strict();

export const deptCountOutputTypeArgsSchema: z.ZodType<Prisma.deptCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => deptCountOutputTypeSelectSchema).nullish(),
}).strict();

export const deptCountOutputTypeSelectSchema: z.ZodType<Prisma.deptCountOutputTypeSelect> = z.object({
  call: z.boolean().optional(),
  client_branch: z.boolean().optional(),
  other_dept: z.boolean().optional(),
  device_device_owner_dept_idTodept: z.boolean().optional(),
  device_device_mgmt_dept_idTodept: z.boolean().optional(),
  user: z.boolean().optional(),
  warehouse: z.boolean().optional(),
}).strict();

export const deptSelectSchema: z.ZodType<Prisma.deptSelect> = z.object({
  dept_id: z.boolean().optional(),
  parent_dept_id: z.boolean().optional(),
  dept_name: z.boolean().optional(),
  call: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchFindManyArgsSchema)]).optional(),
  dept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  other_dept: z.union([z.boolean(),z.lazy(() => deptFindManyArgsSchema)]).optional(),
  device_device_owner_dept_idTodept: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  device_device_mgmt_dept_idTodept: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userFindManyArgsSchema)]).optional(),
  warehouse: z.union([z.boolean(),z.lazy(() => warehouseFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DeptCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEVICE
//------------------------------------------------------

export const deviceIncludeSchema: z.ZodType<Prisma.deviceInclude> = z.object({
  call: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  dept_device_owner_dept_idTodept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  dept_device_mgmt_dept_idTodept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  device_status: z.union([z.boolean(),z.lazy(() => device_statusArgsSchema)]).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.union([z.boolean(),z.lazy(() => device_location_logArgsSchema)]).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.union([z.boolean(),z.lazy(() => device_inspection_logArgsSchema)]).optional(),
  device_model: z.union([z.boolean(),z.lazy(() => device_modelArgsSchema)]).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.union([z.boolean(),z.lazy(() => device_inspection_logFindManyArgsSchema)]).optional(),
  device_install_info: z.union([z.boolean(),z.lazy(() => device_install_infoArgsSchema)]).optional(),
  device_location_log_device_location_log_device_idTodevice: z.union([z.boolean(),z.lazy(() => device_location_logFindManyArgsSchema)]).optional(),
  device_option: z.union([z.boolean(),z.lazy(() => device_optionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DeviceCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const deviceArgsSchema: z.ZodType<Prisma.deviceDefaultArgs> = z.object({
  select: z.lazy(() => deviceSelectSchema).optional(),
  include: z.lazy(() => deviceIncludeSchema).optional(),
}).strict();

export const deviceCountOutputTypeArgsSchema: z.ZodType<Prisma.deviceCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => deviceCountOutputTypeSelectSchema).nullish(),
}).strict();

export const deviceCountOutputTypeSelectSchema: z.ZodType<Prisma.deviceCountOutputTypeSelect> = z.object({
  call: z.boolean().optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.boolean().optional(),
  device_location_log_device_location_log_device_idTodevice: z.boolean().optional(),
  device_option: z.boolean().optional(),
}).strict();

export const deviceSelectSchema: z.ZodType<Prisma.deviceSelect> = z.object({
  device_id: z.boolean().optional(),
  device_model_id: z.boolean().optional(),
  owner_dept_id: z.boolean().optional(),
  mgmt_dept_id: z.boolean().optional(),
  serial: z.boolean().optional(),
  regi_date: z.boolean().optional(),
  mac: z.boolean().optional(),
  last_inspection_log_id: z.boolean().optional(),
  last_location_log_id: z.boolean().optional(),
  status_id: z.boolean().optional(),
  call: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  dept_device_owner_dept_idTodept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  dept_device_mgmt_dept_idTodept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  device_status: z.union([z.boolean(),z.lazy(() => device_statusArgsSchema)]).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.union([z.boolean(),z.lazy(() => device_location_logArgsSchema)]).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.union([z.boolean(),z.lazy(() => device_inspection_logArgsSchema)]).optional(),
  device_model: z.union([z.boolean(),z.lazy(() => device_modelArgsSchema)]).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.union([z.boolean(),z.lazy(() => device_inspection_logFindManyArgsSchema)]).optional(),
  device_install_info: z.union([z.boolean(),z.lazy(() => device_install_infoArgsSchema)]).optional(),
  device_location_log_device_location_log_device_idTodevice: z.union([z.boolean(),z.lazy(() => device_location_logFindManyArgsSchema)]).optional(),
  device_option: z.union([z.boolean(),z.lazy(() => device_optionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DeviceCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEVICE APPROVAL
//------------------------------------------------------

export const device_approvalIncludeSchema: z.ZodType<Prisma.device_approvalInclude> = z.object({
  approval_role: z.union([z.boolean(),z.lazy(() => approval_roleArgsSchema)]).optional(),
  device_approval: z.union([z.boolean(),z.lazy(() => device_approvalArgsSchema)]).optional(),
  other_device_approval: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  device_approval_type: z.union([z.boolean(),z.lazy(() => device_approval_typeArgsSchema)]).optional(),
  location_device_approval_origin_location_idTolocation: z.union([z.boolean(),z.lazy(() => locationArgsSchema)]).optional(),
  location_device_approval_destination_location_idTolocation: z.union([z.boolean(),z.lazy(() => locationArgsSchema)]).optional(),
  user_device_approval_requester_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  user_device_approval_approver_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_approvalCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const device_approvalArgsSchema: z.ZodType<Prisma.device_approvalDefaultArgs> = z.object({
  select: z.lazy(() => device_approvalSelectSchema).optional(),
  include: z.lazy(() => device_approvalIncludeSchema).optional(),
}).strict();

export const device_approvalCountOutputTypeArgsSchema: z.ZodType<Prisma.device_approvalCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => device_approvalCountOutputTypeSelectSchema).nullish(),
}).strict();

export const device_approvalCountOutputTypeSelectSchema: z.ZodType<Prisma.device_approvalCountOutputTypeSelect> = z.object({
  other_device_approval: z.boolean().optional(),
}).strict();

export const device_approvalSelectSchema: z.ZodType<Prisma.device_approvalSelect> = z.object({
  approval_id: z.boolean().optional(),
  approval_type_id: z.boolean().optional(),
  sub_approval_id: z.boolean().optional(),
  requester_id: z.boolean().optional(),
  request_at: z.boolean().optional(),
  approver_role_id: z.boolean().optional(),
  origin_location_id: z.boolean().optional(),
  destination_location_id: z.boolean().optional(),
  approver_id: z.boolean().optional(),
  approve_at: z.boolean().optional(),
  is_approved: z.boolean().optional(),
  approval_role: z.union([z.boolean(),z.lazy(() => approval_roleArgsSchema)]).optional(),
  device_approval: z.union([z.boolean(),z.lazy(() => device_approvalArgsSchema)]).optional(),
  other_device_approval: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  device_approval_type: z.union([z.boolean(),z.lazy(() => device_approval_typeArgsSchema)]).optional(),
  location_device_approval_origin_location_idTolocation: z.union([z.boolean(),z.lazy(() => locationArgsSchema)]).optional(),
  location_device_approval_destination_location_idTolocation: z.union([z.boolean(),z.lazy(() => locationArgsSchema)]).optional(),
  user_device_approval_requester_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  user_device_approval_approver_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_approvalCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEVICE APPROVAL TYPE
//------------------------------------------------------

export const device_approval_typeIncludeSchema: z.ZodType<Prisma.device_approval_typeInclude> = z.object({
  device_approval: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_approval_typeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const device_approval_typeArgsSchema: z.ZodType<Prisma.device_approval_typeDefaultArgs> = z.object({
  select: z.lazy(() => device_approval_typeSelectSchema).optional(),
  include: z.lazy(() => device_approval_typeIncludeSchema).optional(),
}).strict();

export const device_approval_typeCountOutputTypeArgsSchema: z.ZodType<Prisma.device_approval_typeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => device_approval_typeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const device_approval_typeCountOutputTypeSelectSchema: z.ZodType<Prisma.device_approval_typeCountOutputTypeSelect> = z.object({
  device_approval: z.boolean().optional(),
}).strict();

export const device_approval_typeSelectSchema: z.ZodType<Prisma.device_approval_typeSelect> = z.object({
  approval_type_id: z.boolean().optional(),
  approval_type_name: z.boolean().optional(),
  device_approval: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_approval_typeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEVICE CONSUMABLE COMPATIBILITY
//------------------------------------------------------

export const device_consumable_compatibilityIncludeSchema: z.ZodType<Prisma.device_consumable_compatibilityInclude> = z.object({
  consumable_model: z.union([z.boolean(),z.lazy(() => consumable_modelArgsSchema)]).optional(),
  device_model: z.union([z.boolean(),z.lazy(() => device_modelArgsSchema)]).optional(),
}).strict()

export const device_consumable_compatibilityArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityDefaultArgs> = z.object({
  select: z.lazy(() => device_consumable_compatibilitySelectSchema).optional(),
  include: z.lazy(() => device_consumable_compatibilityIncludeSchema).optional(),
}).strict();

export const device_consumable_compatibilitySelectSchema: z.ZodType<Prisma.device_consumable_compatibilitySelect> = z.object({
  device_model_id: z.boolean().optional(),
  consumable_model_id: z.boolean().optional(),
  consumable_model: z.union([z.boolean(),z.lazy(() => consumable_modelArgsSchema)]).optional(),
  device_model: z.union([z.boolean(),z.lazy(() => device_modelArgsSchema)]).optional(),
}).strict()

// DEVICE DRIVER
//------------------------------------------------------

export const device_driverIncludeSchema: z.ZodType<Prisma.device_driverInclude> = z.object({
  device_model: z.union([z.boolean(),z.lazy(() => device_modelArgsSchema)]).optional(),
}).strict()

export const device_driverArgsSchema: z.ZodType<Prisma.device_driverDefaultArgs> = z.object({
  select: z.lazy(() => device_driverSelectSchema).optional(),
  include: z.lazy(() => device_driverIncludeSchema).optional(),
}).strict();

export const device_driverSelectSchema: z.ZodType<Prisma.device_driverSelect> = z.object({
  device_driver_id: z.boolean().optional(),
  device_model_id: z.boolean().optional(),
  manufacturer: z.boolean().optional(),
  printer_language: z.boolean().optional(),
  install_file_address: z.boolean().optional(),
  device_model: z.union([z.boolean(),z.lazy(() => device_modelArgsSchema)]).optional(),
}).strict()

// DEVICE INSPECTION LOG
//------------------------------------------------------

export const device_inspection_logIncludeSchema: z.ZodType<Prisma.device_inspection_logInclude> = z.object({
  device_device_last_inspection_log_idTodevice_inspection_log: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  device_device_inspection_log_device_idTodevice: z.union([z.boolean(),z.lazy(() => deviceArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  call: z.union([z.boolean(),z.lazy(() => callArgsSchema)]).optional(),
  inspection_approval: z.union([z.boolean(),z.lazy(() => inspection_approvalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_inspection_logCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const device_inspection_logArgsSchema: z.ZodType<Prisma.device_inspection_logDefaultArgs> = z.object({
  select: z.lazy(() => device_inspection_logSelectSchema).optional(),
  include: z.lazy(() => device_inspection_logIncludeSchema).optional(),
}).strict();

export const device_inspection_logCountOutputTypeArgsSchema: z.ZodType<Prisma.device_inspection_logCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => device_inspection_logCountOutputTypeSelectSchema).nullish(),
}).strict();

export const device_inspection_logCountOutputTypeSelectSchema: z.ZodType<Prisma.device_inspection_logCountOutputTypeSelect> = z.object({
  device_device_last_inspection_log_idTodevice_inspection_log: z.boolean().optional(),
  inspection_approval: z.boolean().optional(),
}).strict();

export const device_inspection_logSelectSchema: z.ZodType<Prisma.device_inspection_logSelect> = z.object({
  device_inspection_log_id: z.boolean().optional(),
  device_id: z.boolean().optional(),
  inspector_id: z.boolean().optional(),
  inspection_date: z.boolean().optional(),
  visit_type: z.boolean().optional(),
  call_id: z.boolean().optional(),
  FL: z.boolean().optional(),
  FS: z.boolean().optional(),
  BL: z.boolean().optional(),
  BS: z.boolean().optional(),
  toner_count_YE: z.boolean().optional(),
  toner_count_MA: z.boolean().optional(),
  toner_count_CY: z.boolean().optional(),
  toner_count_BK: z.boolean().optional(),
  toner_stock_YE: z.boolean().optional(),
  toner_stock_MA: z.boolean().optional(),
  toner_stock_CY: z.boolean().optional(),
  toner_stock_BK: z.boolean().optional(),
  toner_deliver_YE: z.boolean().optional(),
  toner_deliver_CY: z.boolean().optional(),
  toner_deliver_MA: z.boolean().optional(),
  toner_deliver_BK: z.boolean().optional(),
  drum_count_YE: z.boolean().optional(),
  drum_count_MA: z.boolean().optional(),
  drum_count_CY: z.boolean().optional(),
  drum_count_BK: z.boolean().optional(),
  drum_replacement_detail: z.boolean().optional(),
  status: z.boolean().optional(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  device_device_inspection_log_device_idTodevice: z.union([z.boolean(),z.lazy(() => deviceArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  call: z.union([z.boolean(),z.lazy(() => callArgsSchema)]).optional(),
  inspection_approval: z.union([z.boolean(),z.lazy(() => inspection_approvalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_inspection_logCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEVICE INSTALL INFO
//------------------------------------------------------

export const device_install_infoIncludeSchema: z.ZodType<Prisma.device_install_infoInclude> = z.object({
  device: z.union([z.boolean(),z.lazy(() => deviceArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

export const device_install_infoArgsSchema: z.ZodType<Prisma.device_install_infoDefaultArgs> = z.object({
  select: z.lazy(() => device_install_infoSelectSchema).optional(),
  include: z.lazy(() => device_install_infoIncludeSchema).optional(),
}).strict();

export const device_install_infoSelectSchema: z.ZodType<Prisma.device_install_infoSelect> = z.object({
  device_id: z.boolean().optional(),
  installer_id: z.boolean().optional(),
  mgmt_num: z.boolean().optional(),
  ip_address: z.boolean().optional(),
  subnet_mask: z.boolean().optional(),
  gateway: z.boolean().optional(),
  dns1: z.boolean().optional(),
  dns2: z.boolean().optional(),
  device: z.union([z.boolean(),z.lazy(() => deviceArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

// DEVICE LOCATION LOG
//------------------------------------------------------

export const device_location_logIncludeSchema: z.ZodType<Prisma.device_location_logInclude> = z.object({
  device_device_last_location_log_idTodevice_location_log: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  device_device_location_log_device_idTodevice: z.union([z.boolean(),z.lazy(() => deviceArgsSchema)]).optional(),
  location: z.union([z.boolean(),z.lazy(() => locationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_location_logCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const device_location_logArgsSchema: z.ZodType<Prisma.device_location_logDefaultArgs> = z.object({
  select: z.lazy(() => device_location_logSelectSchema).optional(),
  include: z.lazy(() => device_location_logIncludeSchema).optional(),
}).strict();

export const device_location_logCountOutputTypeArgsSchema: z.ZodType<Prisma.device_location_logCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => device_location_logCountOutputTypeSelectSchema).nullish(),
}).strict();

export const device_location_logCountOutputTypeSelectSchema: z.ZodType<Prisma.device_location_logCountOutputTypeSelect> = z.object({
  device_device_last_location_log_idTodevice_location_log: z.boolean().optional(),
}).strict();

export const device_location_logSelectSchema: z.ZodType<Prisma.device_location_logSelect> = z.object({
  device_location_log_id: z.boolean().optional(),
  device_id: z.boolean().optional(),
  location_date: z.boolean().optional(),
  location_id: z.boolean().optional(),
  location_detail: z.boolean().optional(),
  device_device_last_location_log_idTodevice_location_log: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  device_device_location_log_device_idTodevice: z.union([z.boolean(),z.lazy(() => deviceArgsSchema)]).optional(),
  location: z.union([z.boolean(),z.lazy(() => locationArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_location_logCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEVICE MODEL
//------------------------------------------------------

export const device_modelIncludeSchema: z.ZodType<Prisma.device_modelInclude> = z.object({
  device: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  device_consumable_compatibility: z.union([z.boolean(),z.lazy(() => device_consumable_compatibilityFindManyArgsSchema)]).optional(),
  device_driver: z.union([z.boolean(),z.lazy(() => device_driverFindManyArgsSchema)]).optional(),
  device_option_compatibility: z.union([z.boolean(),z.lazy(() => device_option_compatibilityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_modelCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const device_modelArgsSchema: z.ZodType<Prisma.device_modelDefaultArgs> = z.object({
  select: z.lazy(() => device_modelSelectSchema).optional(),
  include: z.lazy(() => device_modelIncludeSchema).optional(),
}).strict();

export const device_modelCountOutputTypeArgsSchema: z.ZodType<Prisma.device_modelCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => device_modelCountOutputTypeSelectSchema).nullish(),
}).strict();

export const device_modelCountOutputTypeSelectSchema: z.ZodType<Prisma.device_modelCountOutputTypeSelect> = z.object({
  device: z.boolean().optional(),
  device_consumable_compatibility: z.boolean().optional(),
  device_driver: z.boolean().optional(),
  device_option_compatibility: z.boolean().optional(),
}).strict();

export const device_modelSelectSchema: z.ZodType<Prisma.device_modelSelect> = z.object({
  device_model_id: z.boolean().optional(),
  model_name: z.boolean().optional(),
  manufacturer: z.boolean().optional(),
  color_support: z.boolean().optional(),
  device: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  device_consumable_compatibility: z.union([z.boolean(),z.lazy(() => device_consumable_compatibilityFindManyArgsSchema)]).optional(),
  device_driver: z.union([z.boolean(),z.lazy(() => device_driverFindManyArgsSchema)]).optional(),
  device_option_compatibility: z.union([z.boolean(),z.lazy(() => device_option_compatibilityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_modelCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEVICE OPTION
//------------------------------------------------------

export const device_optionIncludeSchema: z.ZodType<Prisma.device_optionInclude> = z.object({
  device: z.union([z.boolean(),z.lazy(() => deviceArgsSchema)]).optional(),
  option_model: z.union([z.boolean(),z.lazy(() => option_modelArgsSchema)]).optional(),
  warehouse: z.union([z.boolean(),z.lazy(() => warehouseArgsSchema)]).optional(),
}).strict()

export const device_optionArgsSchema: z.ZodType<Prisma.device_optionDefaultArgs> = z.object({
  select: z.lazy(() => device_optionSelectSchema).optional(),
  include: z.lazy(() => device_optionIncludeSchema).optional(),
}).strict();

export const device_optionSelectSchema: z.ZodType<Prisma.device_optionSelect> = z.object({
  device_option_id: z.boolean().optional(),
  option_model_id: z.boolean().optional(),
  serial: z.boolean().optional(),
  is_active: z.boolean().optional(),
  location_type: z.boolean().optional(),
  location_warehouse_id: z.boolean().optional(),
  location_device_id: z.boolean().optional(),
  device: z.union([z.boolean(),z.lazy(() => deviceArgsSchema)]).optional(),
  option_model: z.union([z.boolean(),z.lazy(() => option_modelArgsSchema)]).optional(),
  warehouse: z.union([z.boolean(),z.lazy(() => warehouseArgsSchema)]).optional(),
}).strict()

// DEVICE OPTION COMPATIBILITY
//------------------------------------------------------

export const device_option_compatibilityIncludeSchema: z.ZodType<Prisma.device_option_compatibilityInclude> = z.object({
  device_model: z.union([z.boolean(),z.lazy(() => device_modelArgsSchema)]).optional(),
  option_model: z.union([z.boolean(),z.lazy(() => option_modelArgsSchema)]).optional(),
}).strict()

export const device_option_compatibilityArgsSchema: z.ZodType<Prisma.device_option_compatibilityDefaultArgs> = z.object({
  select: z.lazy(() => device_option_compatibilitySelectSchema).optional(),
  include: z.lazy(() => device_option_compatibilityIncludeSchema).optional(),
}).strict();

export const device_option_compatibilitySelectSchema: z.ZodType<Prisma.device_option_compatibilitySelect> = z.object({
  device_model_id: z.boolean().optional(),
  option_model_id: z.boolean().optional(),
  device_model: z.union([z.boolean(),z.lazy(() => device_modelArgsSchema)]).optional(),
  option_model: z.union([z.boolean(),z.lazy(() => option_modelArgsSchema)]).optional(),
}).strict()

// DEVICE STATUS
//------------------------------------------------------

export const device_statusIncludeSchema: z.ZodType<Prisma.device_statusInclude> = z.object({
  device: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_statusCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const device_statusArgsSchema: z.ZodType<Prisma.device_statusDefaultArgs> = z.object({
  select: z.lazy(() => device_statusSelectSchema).optional(),
  include: z.lazy(() => device_statusIncludeSchema).optional(),
}).strict();

export const device_statusCountOutputTypeArgsSchema: z.ZodType<Prisma.device_statusCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => device_statusCountOutputTypeSelectSchema).nullish(),
}).strict();

export const device_statusCountOutputTypeSelectSchema: z.ZodType<Prisma.device_statusCountOutputTypeSelect> = z.object({
  device: z.boolean().optional(),
}).strict();

export const device_statusSelectSchema: z.ZodType<Prisma.device_statusSelect> = z.object({
  status_id: z.boolean().optional(),
  status_name: z.boolean().optional(),
  device: z.union([z.boolean(),z.lazy(() => deviceFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Device_statusCountOutputTypeArgsSchema)]).optional(),
}).strict()

// INSPECTION APPROVAL
//------------------------------------------------------

export const inspection_approvalIncludeSchema: z.ZodType<Prisma.inspection_approvalInclude> = z.object({
  approval_role: z.union([z.boolean(),z.lazy(() => approval_roleArgsSchema)]).optional(),
  device_inspection_log: z.union([z.boolean(),z.lazy(() => device_inspection_logArgsSchema)]).optional(),
  user_inspection_approval_approver_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  user_inspection_approval_requester_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

export const inspection_approvalArgsSchema: z.ZodType<Prisma.inspection_approvalDefaultArgs> = z.object({
  select: z.lazy(() => inspection_approvalSelectSchema).optional(),
  include: z.lazy(() => inspection_approvalIncludeSchema).optional(),
}).strict();

export const inspection_approvalSelectSchema: z.ZodType<Prisma.inspection_approvalSelect> = z.object({
  approval_id: z.boolean().optional(),
  requester_id: z.boolean().optional(),
  request_at: z.boolean().optional(),
  approver_role_id: z.boolean().optional(),
  device_inspection_log_id: z.boolean().optional(),
  approver_id: z.boolean().optional(),
  approved_at: z.boolean().optional(),
  is_approved: z.boolean().optional(),
  approval_role: z.union([z.boolean(),z.lazy(() => approval_roleArgsSchema)]).optional(),
  device_inspection_log: z.union([z.boolean(),z.lazy(() => device_inspection_logArgsSchema)]).optional(),
  user_inspection_approval_approver_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
  user_inspection_approval_requester_idTouser: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

// LOCATION
//------------------------------------------------------

export const locationIncludeSchema: z.ZodType<Prisma.locationInclude> = z.object({
  device_approval_device_approval_origin_location_idTolocation: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  device_location_log: z.union([z.boolean(),z.lazy(() => device_location_logFindManyArgsSchema)]).optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchArgsSchema)]).optional(),
  warehouse: z.union([z.boolean(),z.lazy(() => warehouseArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LocationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const locationArgsSchema: z.ZodType<Prisma.locationDefaultArgs> = z.object({
  select: z.lazy(() => locationSelectSchema).optional(),
  include: z.lazy(() => locationIncludeSchema).optional(),
}).strict();

export const locationCountOutputTypeArgsSchema: z.ZodType<Prisma.locationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => locationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const locationCountOutputTypeSelectSchema: z.ZodType<Prisma.locationCountOutputTypeSelect> = z.object({
  device_approval_device_approval_origin_location_idTolocation: z.boolean().optional(),
  device_approval_device_approval_destination_location_idTolocation: z.boolean().optional(),
  device_location_log: z.boolean().optional(),
}).strict();

export const locationSelectSchema: z.ZodType<Prisma.locationSelect> = z.object({
  location_id: z.boolean().optional(),
  location_type: z.boolean().optional(),
  warehouse_id: z.boolean().optional(),
  client_branch_id: z.boolean().optional(),
  device_approval_device_approval_origin_location_idTolocation: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  device_location_log: z.union([z.boolean(),z.lazy(() => device_location_logFindManyArgsSchema)]).optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchArgsSchema)]).optional(),
  warehouse: z.union([z.boolean(),z.lazy(() => warehouseArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LocationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// OPTION MODEL
//------------------------------------------------------

export const option_modelIncludeSchema: z.ZodType<Prisma.option_modelInclude> = z.object({
  device_option: z.union([z.boolean(),z.lazy(() => device_optionFindManyArgsSchema)]).optional(),
  device_option_compatibility: z.union([z.boolean(),z.lazy(() => device_option_compatibilityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Option_modelCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const option_modelArgsSchema: z.ZodType<Prisma.option_modelDefaultArgs> = z.object({
  select: z.lazy(() => option_modelSelectSchema).optional(),
  include: z.lazy(() => option_modelIncludeSchema).optional(),
}).strict();

export const option_modelCountOutputTypeArgsSchema: z.ZodType<Prisma.option_modelCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => option_modelCountOutputTypeSelectSchema).nullish(),
}).strict();

export const option_modelCountOutputTypeSelectSchema: z.ZodType<Prisma.option_modelCountOutputTypeSelect> = z.object({
  device_option: z.boolean().optional(),
  device_option_compatibility: z.boolean().optional(),
}).strict();

export const option_modelSelectSchema: z.ZodType<Prisma.option_modelSelect> = z.object({
  option_model_id: z.boolean().optional(),
  option_model_name: z.boolean().optional(),
  option_type: z.boolean().optional(),
  manufacturer: z.boolean().optional(),
  device_option: z.union([z.boolean(),z.lazy(() => device_optionFindManyArgsSchema)]).optional(),
  device_option_compatibility: z.union([z.boolean(),z.lazy(() => device_option_compatibilityFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Option_modelCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SIDO
//------------------------------------------------------

export const sidoIncludeSchema: z.ZodType<Prisma.sidoInclude> = z.object({
  sigungu: z.union([z.boolean(),z.lazy(() => sigunguFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SidoCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const sidoArgsSchema: z.ZodType<Prisma.sidoDefaultArgs> = z.object({
  select: z.lazy(() => sidoSelectSchema).optional(),
  include: z.lazy(() => sidoIncludeSchema).optional(),
}).strict();

export const sidoCountOutputTypeArgsSchema: z.ZodType<Prisma.sidoCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => sidoCountOutputTypeSelectSchema).nullish(),
}).strict();

export const sidoCountOutputTypeSelectSchema: z.ZodType<Prisma.sidoCountOutputTypeSelect> = z.object({
  sigungu: z.boolean().optional(),
}).strict();

export const sidoSelectSchema: z.ZodType<Prisma.sidoSelect> = z.object({
  sido_id: z.boolean().optional(),
  sido_name: z.boolean().optional(),
  sigungu: z.union([z.boolean(),z.lazy(() => sigunguFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SidoCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SIGUNGU
//------------------------------------------------------

export const sigunguIncludeSchema: z.ZodType<Prisma.sigunguInclude> = z.object({
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchFindManyArgsSchema)]).optional(),
  sido: z.union([z.boolean(),z.lazy(() => sidoArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SigunguCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const sigunguArgsSchema: z.ZodType<Prisma.sigunguDefaultArgs> = z.object({
  select: z.lazy(() => sigunguSelectSchema).optional(),
  include: z.lazy(() => sigunguIncludeSchema).optional(),
}).strict();

export const sigunguCountOutputTypeArgsSchema: z.ZodType<Prisma.sigunguCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => sigunguCountOutputTypeSelectSchema).nullish(),
}).strict();

export const sigunguCountOutputTypeSelectSchema: z.ZodType<Prisma.sigunguCountOutputTypeSelect> = z.object({
  client_branch: z.boolean().optional(),
}).strict();

export const sigunguSelectSchema: z.ZodType<Prisma.sigunguSelect> = z.object({
  sigungu_id: z.boolean().optional(),
  sigungu_name: z.boolean().optional(),
  sido_id: z.boolean().optional(),
  client_branch: z.union([z.boolean(),z.lazy(() => client_branchFindManyArgsSchema)]).optional(),
  sido: z.union([z.boolean(),z.lazy(() => sidoArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SigunguCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const userIncludeSchema: z.ZodType<Prisma.userInclude> = z.object({
  call_call_receiver_idTouser: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  call_call_assigner_idTouser: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  device_approval_device_approval_requester_idTouser: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  device_approval_device_approval_approver_idTouser: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  device_inspection_log: z.union([z.boolean(),z.lazy(() => device_inspection_logFindManyArgsSchema)]).optional(),
  device_install_info: z.union([z.boolean(),z.lazy(() => device_install_infoFindManyArgsSchema)]).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.union([z.boolean(),z.lazy(() => inspection_approvalFindManyArgsSchema)]).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.union([z.boolean(),z.lazy(() => inspection_approvalFindManyArgsSchema)]).optional(),
  approval_role: z.union([z.boolean(),z.lazy(() => approval_roleArgsSchema)]).optional(),
  dept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  user_position: z.union([z.boolean(),z.lazy(() => user_positionArgsSchema)]).optional(),
  user_role_assignment: z.union([z.boolean(),z.lazy(() => user_role_assignmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const userArgsSchema: z.ZodType<Prisma.userDefaultArgs> = z.object({
  select: z.lazy(() => userSelectSchema).optional(),
  include: z.lazy(() => userIncludeSchema).optional(),
}).strict();

export const userCountOutputTypeArgsSchema: z.ZodType<Prisma.userCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => userCountOutputTypeSelectSchema).nullish(),
}).strict();

export const userCountOutputTypeSelectSchema: z.ZodType<Prisma.userCountOutputTypeSelect> = z.object({
  call_call_receiver_idTouser: z.boolean().optional(),
  call_call_assigner_idTouser: z.boolean().optional(),
  device_approval_device_approval_requester_idTouser: z.boolean().optional(),
  device_approval_device_approval_approver_idTouser: z.boolean().optional(),
  device_inspection_log: z.boolean().optional(),
  device_install_info: z.boolean().optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.boolean().optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.boolean().optional(),
  user_role_assignment: z.boolean().optional(),
}).strict();

export const userSelectSchema: z.ZodType<Prisma.userSelect> = z.object({
  user_id: z.boolean().optional(),
  user_name: z.boolean().optional(),
  login_id: z.boolean().optional(),
  password: z.boolean().optional(),
  mobile_num: z.boolean().optional(),
  office_num: z.boolean().optional(),
  email: z.boolean().optional(),
  modified_at: z.boolean().optional(),
  dept_id: z.boolean().optional(),
  approval_role_id: z.boolean().optional(),
  position_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  is_active: z.boolean().optional(),
  permission: z.boolean().optional(),
  call_call_receiver_idTouser: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  call_call_assigner_idTouser: z.union([z.boolean(),z.lazy(() => callFindManyArgsSchema)]).optional(),
  device_approval_device_approval_requester_idTouser: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  device_approval_device_approval_approver_idTouser: z.union([z.boolean(),z.lazy(() => device_approvalFindManyArgsSchema)]).optional(),
  device_inspection_log: z.union([z.boolean(),z.lazy(() => device_inspection_logFindManyArgsSchema)]).optional(),
  device_install_info: z.union([z.boolean(),z.lazy(() => device_install_infoFindManyArgsSchema)]).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.union([z.boolean(),z.lazy(() => inspection_approvalFindManyArgsSchema)]).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.union([z.boolean(),z.lazy(() => inspection_approvalFindManyArgsSchema)]).optional(),
  approval_role: z.union([z.boolean(),z.lazy(() => approval_roleArgsSchema)]).optional(),
  dept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  user_position: z.union([z.boolean(),z.lazy(() => user_positionArgsSchema)]).optional(),
  user_role_assignment: z.union([z.boolean(),z.lazy(() => user_role_assignmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER POSITION
//------------------------------------------------------

export const user_positionIncludeSchema: z.ZodType<Prisma.user_positionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => userFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => User_positionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const user_positionArgsSchema: z.ZodType<Prisma.user_positionDefaultArgs> = z.object({
  select: z.lazy(() => user_positionSelectSchema).optional(),
  include: z.lazy(() => user_positionIncludeSchema).optional(),
}).strict();

export const user_positionCountOutputTypeArgsSchema: z.ZodType<Prisma.user_positionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => user_positionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const user_positionCountOutputTypeSelectSchema: z.ZodType<Prisma.user_positionCountOutputTypeSelect> = z.object({
  user: z.boolean().optional(),
}).strict();

export const user_positionSelectSchema: z.ZodType<Prisma.user_positionSelect> = z.object({
  user_position_id: z.boolean().optional(),
  position_name: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => userFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => User_positionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER ROLE ASSIGNMENT
//------------------------------------------------------

export const user_role_assignmentIncludeSchema: z.ZodType<Prisma.user_role_assignmentInclude> = z.object({
  approval_role: z.union([z.boolean(),z.lazy(() => approval_roleArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

export const user_role_assignmentArgsSchema: z.ZodType<Prisma.user_role_assignmentDefaultArgs> = z.object({
  select: z.lazy(() => user_role_assignmentSelectSchema).optional(),
  include: z.lazy(() => user_role_assignmentIncludeSchema).optional(),
}).strict();

export const user_role_assignmentSelectSchema: z.ZodType<Prisma.user_role_assignmentSelect> = z.object({
  role_id: z.boolean().optional(),
  approver_id: z.boolean().optional(),
  approval_role: z.union([z.boolean(),z.lazy(() => approval_roleArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => userArgsSchema)]).optional(),
}).strict()

// WAREHOUSE
//------------------------------------------------------

export const warehouseIncludeSchema: z.ZodType<Prisma.warehouseInclude> = z.object({
  device_option: z.union([z.boolean(),z.lazy(() => device_optionFindManyArgsSchema)]).optional(),
  location: z.union([z.boolean(),z.lazy(() => locationFindManyArgsSchema)]).optional(),
  dept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WarehouseCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const warehouseArgsSchema: z.ZodType<Prisma.warehouseDefaultArgs> = z.object({
  select: z.lazy(() => warehouseSelectSchema).optional(),
  include: z.lazy(() => warehouseIncludeSchema).optional(),
}).strict();

export const warehouseCountOutputTypeArgsSchema: z.ZodType<Prisma.warehouseCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => warehouseCountOutputTypeSelectSchema).nullish(),
}).strict();

export const warehouseCountOutputTypeSelectSchema: z.ZodType<Prisma.warehouseCountOutputTypeSelect> = z.object({
  device_option: z.boolean().optional(),
  location: z.boolean().optional(),
}).strict();

export const warehouseSelectSchema: z.ZodType<Prisma.warehouseSelect> = z.object({
  warehouse_id: z.boolean().optional(),
  warehouse_name: z.boolean().optional(),
  mgmt_dept_id: z.boolean().optional(),
  device_option: z.union([z.boolean(),z.lazy(() => device_optionFindManyArgsSchema)]).optional(),
  location: z.union([z.boolean(),z.lazy(() => locationFindManyArgsSchema)]).optional(),
  dept: z.union([z.boolean(),z.lazy(() => deptArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WarehouseCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DELETENEEDED
//------------------------------------------------------

export const deleteneededSelectSchema: z.ZodType<Prisma.deleteneededSelect> = z.object({
  id: z.boolean().optional(),
}).strict()

// V CLIENT
//------------------------------------------------------

export const v_clientSelectSchema: z.ZodType<Prisma.v_clientSelect> = z.object({
  client_id: z.boolean().optional(),
  client_name: z.boolean().optional(),
  parent_client_id: z.boolean().optional(),
  default_client_branch_rate_id: z.boolean().optional(),
  is_active: z.boolean().optional(),
  parent_client_name: z.boolean().optional(),
  client_rate: z.boolean().optional(),
  rate_detail: z.boolean().optional(),
  branch_count: z.boolean().optional(),
}).strict()

// V CLIENT BRANCH
//------------------------------------------------------

export const v_client_branchSelectSchema: z.ZodType<Prisma.v_client_branchSelect> = z.object({
  client_branch_id: z.boolean().optional(),
  client_branch_name: z.boolean().optional(),
  client_id: z.boolean().optional(),
  sigungu_id: z.boolean().optional(),
  mgmt_dept_id: z.boolean().optional(),
  client_branch_rate_id: z.boolean().optional(),
  branch_mgr_name: z.boolean().optional(),
  branch_mgr_mobile_num: z.boolean().optional(),
  branch_mgr_office_num: z.boolean().optional(),
  branch_mgr_email: z.boolean().optional(),
  is_active: z.boolean().optional(),
  remote_support: z.boolean().optional(),
  push_alert: z.boolean().optional(),
  client_name: z.boolean().optional(),
  sigungu_name: z.boolean().optional(),
  sido_name: z.boolean().optional(),
}).strict()

// V CONSUMABLE MODEL
//------------------------------------------------------

export const v_consumable_modelSelectSchema: z.ZodType<Prisma.v_consumable_modelSelect> = z.object({
  compatibility_id: z.boolean().optional(),
  consumable_model_id: z.boolean().optional(),
  manufacturer: z.boolean().optional(),
  consumable_name: z.boolean().optional(),
  consumable_type: z.boolean().optional(),
  model_manufacturer: z.boolean().optional(),
  model_name: z.boolean().optional(),
  device_model_id: z.boolean().optional(),
}).strict()

// V DEPT
//------------------------------------------------------

export const v_deptSelectSchema: z.ZodType<Prisma.v_deptSelect> = z.object({
  dept_id: z.boolean().optional(),
  dept_1_id: z.boolean().optional(),
  dept_1: z.boolean().optional(),
  dept_2_id: z.boolean().optional(),
  dept_2: z.boolean().optional(),
  dept_3_id: z.boolean().optional(),
  dept_3: z.boolean().optional(),
}).strict()

// V DEVICE DRIVER
//------------------------------------------------------

export const v_device_driverSelectSchema: z.ZodType<Prisma.v_device_driverSelect> = z.object({
  device_driver_id: z.boolean().optional(),
  device_model_id: z.boolean().optional(),
  driver_manufacturer: z.boolean().optional(),
  printer_language: z.boolean().optional(),
  install_file_address: z.boolean().optional(),
  model_manufacturer: z.boolean().optional(),
  model_name: z.boolean().optional(),
  color_support: z.boolean().optional(),
}).strict()

// V USER
//------------------------------------------------------

export const v_userSelectSchema: z.ZodType<Prisma.v_userSelect> = z.object({
  user_id: z.boolean().optional(),
  user_name: z.boolean().optional(),
  login_id: z.boolean().optional(),
  mobile_num: z.boolean().optional(),
  office_num: z.boolean().optional(),
  email: z.boolean().optional(),
  modified_at: z.boolean().optional(),
  created_at: z.boolean().optional(),
  is_active: z.boolean().optional(),
  permission: z.boolean().optional(),
  dept_id: z.boolean().optional(),
  approval_role_id: z.boolean().optional(),
  position_id: z.boolean().optional(),
  dept_name: z.boolean().optional(),
  parent_dept_id: z.boolean().optional(),
}).strict()

// V WAREHOUSE
//------------------------------------------------------

export const v_warehouseSelectSchema: z.ZodType<Prisma.v_warehouseSelect> = z.object({
  warehouse_id: z.boolean().optional(),
  warehouse_name: z.boolean().optional(),
  mgmt_dept_id: z.boolean().optional(),
  mgmt_dept_name: z.boolean().optional(),
  mgmt_parent_dept_id: z.boolean().optional(),
}).strict()

// V DEVICE
//------------------------------------------------------

export const v_deviceSelectSchema: z.ZodType<Prisma.v_deviceSelect> = z.object({
  device_id: z.boolean().optional(),
  device_model_id: z.boolean().optional(),
  owner_dept_id: z.boolean().optional(),
  mgmt_dept_id: z.boolean().optional(),
  serial: z.boolean().optional(),
  regi_date: z.boolean().optional(),
  mac: z.boolean().optional(),
  last_inspection_log_id: z.boolean().optional(),
  last_location_log_id: z.boolean().optional(),
  status_id: z.boolean().optional(),
  model_name: z.boolean().optional(),
  manufacturer: z.boolean().optional(),
  owner_dept_name: z.boolean().optional(),
  mgmt_dept_name: z.boolean().optional(),
  location_id: z.boolean().optional(),
  warehouse_id: z.boolean().optional(),
  warehouse_name: z.boolean().optional(),
  client_branch_id: z.boolean().optional(),
  client_branch_name: z.boolean().optional(),
  status_name: z.boolean().optional(),
  has_fax: z.boolean().optional(),
  has_desk: z.boolean().optional(),
  has_shelf: z.boolean().optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const approval_roleWhereInputSchema: z.ZodType<Prisma.approval_roleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => approval_roleWhereInputSchema),z.lazy(() => approval_roleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => approval_roleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => approval_roleWhereInputSchema),z.lazy(() => approval_roleWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  role_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  upper_role_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approval_role: z.union([ z.lazy(() => Approval_roleNullableRelationFilterSchema),z.lazy(() => approval_roleWhereInputSchema) ]).optional().nullable(),
  other_approval_role: z.lazy(() => Approval_roleListRelationFilterSchema).optional(),
  device_approval: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  inspection_approval: z.lazy(() => Inspection_approvalListRelationFilterSchema).optional(),
  user: z.lazy(() => UserListRelationFilterSchema).optional(),
  user_role_assignment: z.lazy(() => User_role_assignmentListRelationFilterSchema).optional()
}).strict();

export const approval_roleOrderByWithRelationInputSchema: z.ZodType<Prisma.approval_roleOrderByWithRelationInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  role_name: z.lazy(() => SortOrderSchema).optional(),
  upper_role_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approval_role: z.lazy(() => approval_roleOrderByWithRelationInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleOrderByRelationAggregateInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalOrderByRelationAggregateInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalOrderByRelationAggregateInputSchema).optional(),
  user: z.lazy(() => userOrderByRelationAggregateInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const approval_roleWhereUniqueInputSchema: z.ZodType<Prisma.approval_roleWhereUniqueInput> = z.object({
  role_id: z.coerce.number()
})
.and(z.object({
  role_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => approval_roleWhereInputSchema),z.lazy(() => approval_roleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => approval_roleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => approval_roleWhereInputSchema),z.lazy(() => approval_roleWhereInputSchema).array() ]).optional(),
  role_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  upper_role_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  approval_role: z.union([ z.lazy(() => Approval_roleNullableRelationFilterSchema),z.lazy(() => approval_roleWhereInputSchema) ]).optional().nullable(),
  other_approval_role: z.lazy(() => Approval_roleListRelationFilterSchema).optional(),
  device_approval: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  inspection_approval: z.lazy(() => Inspection_approvalListRelationFilterSchema).optional(),
  user: z.lazy(() => UserListRelationFilterSchema).optional(),
  user_role_assignment: z.lazy(() => User_role_assignmentListRelationFilterSchema).optional()
}).strict());

export const approval_roleOrderByWithAggregationInputSchema: z.ZodType<Prisma.approval_roleOrderByWithAggregationInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  role_name: z.lazy(() => SortOrderSchema).optional(),
  upper_role_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => approval_roleCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => approval_roleAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => approval_roleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => approval_roleMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => approval_roleSumOrderByAggregateInputSchema).optional()
}).strict();

export const approval_roleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.approval_roleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => approval_roleScalarWhereWithAggregatesInputSchema),z.lazy(() => approval_roleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => approval_roleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => approval_roleScalarWhereWithAggregatesInputSchema),z.lazy(() => approval_roleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  role_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  upper_role_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const callWhereInputSchema: z.ZodType<Prisma.callWhereInput> = z.object({
  AND: z.union([ z.lazy(() => callWhereInputSchema),z.lazy(() => callWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => callWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => callWhereInputSchema),z.lazy(() => callWhereInputSchema).array() ]).optional(),
  call_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  call_type_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_branch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  requester_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requester_num: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requester_black_consumer: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  detail: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  received_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  receiver_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  transferred_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  transferred_dept_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  assigner_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  completed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  call_type: z.union([ z.lazy(() => Call_typeRelationFilterSchema),z.lazy(() => call_typeWhereInputSchema) ]).optional(),
  client_branch: z.union([ z.lazy(() => Client_branchRelationFilterSchema),z.lazy(() => client_branchWhereInputSchema) ]).optional(),
  dept: z.union([ z.lazy(() => DeptNullableRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional().nullable(),
  device: z.union([ z.lazy(() => DeviceNullableRelationFilterSchema),z.lazy(() => deviceWhereInputSchema) ]).optional().nullable(),
  user_call_receiver_idTouser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  user_call_assigner_idTouser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional().nullable(),
  device_inspection_log: z.lazy(() => Device_inspection_logListRelationFilterSchema).optional()
}).strict();

export const callOrderByWithRelationInputSchema: z.ZodType<Prisma.callOrderByWithRelationInput> = z.object({
  call_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  requester_name: z.lazy(() => SortOrderSchema).optional(),
  requester_num: z.lazy(() => SortOrderSchema).optional(),
  requester_black_consumer: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  detail: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  received_at: z.lazy(() => SortOrderSchema).optional(),
  receiver_id: z.lazy(() => SortOrderSchema).optional(),
  transferred_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  transferred_dept_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  assigner_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  call_type: z.lazy(() => call_typeOrderByWithRelationInputSchema).optional(),
  client_branch: z.lazy(() => client_branchOrderByWithRelationInputSchema).optional(),
  dept: z.lazy(() => deptOrderByWithRelationInputSchema).optional(),
  device: z.lazy(() => deviceOrderByWithRelationInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userOrderByWithRelationInputSchema).optional(),
  user_call_assigner_idTouser: z.lazy(() => userOrderByWithRelationInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logOrderByRelationAggregateInputSchema).optional()
}).strict();

export const callWhereUniqueInputSchema: z.ZodType<Prisma.callWhereUniqueInput> = z.object({
  call_id: z.coerce.number()
})
.and(z.object({
  call_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => callWhereInputSchema),z.lazy(() => callWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => callWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => callWhereInputSchema),z.lazy(() => callWhereInputSchema).array() ]).optional(),
  call_type_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  client_branch_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  requester_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(50) ]).optional(),
  requester_num: z.union([ z.lazy(() => StringFilterSchema),z.string().max(20) ]).optional(),
  requester_black_consumer: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(0) ]).optional(),
  device_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  detail: z.union([ z.lazy(() => StringFilterSchema),z.string().max(200) ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  received_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  receiver_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  transferred_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  transferred_dept_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  assigner_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  completed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  call_type: z.union([ z.lazy(() => Call_typeRelationFilterSchema),z.lazy(() => call_typeWhereInputSchema) ]).optional(),
  client_branch: z.union([ z.lazy(() => Client_branchRelationFilterSchema),z.lazy(() => client_branchWhereInputSchema) ]).optional(),
  dept: z.union([ z.lazy(() => DeptNullableRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional().nullable(),
  device: z.union([ z.lazy(() => DeviceNullableRelationFilterSchema),z.lazy(() => deviceWhereInputSchema) ]).optional().nullable(),
  user_call_receiver_idTouser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  user_call_assigner_idTouser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional().nullable(),
  device_inspection_log: z.lazy(() => Device_inspection_logListRelationFilterSchema).optional()
}).strict());

export const callOrderByWithAggregationInputSchema: z.ZodType<Prisma.callOrderByWithAggregationInput> = z.object({
  call_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  requester_name: z.lazy(() => SortOrderSchema).optional(),
  requester_num: z.lazy(() => SortOrderSchema).optional(),
  requester_black_consumer: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  detail: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  received_at: z.lazy(() => SortOrderSchema).optional(),
  receiver_id: z.lazy(() => SortOrderSchema).optional(),
  transferred_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  transferred_dept_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  assigner_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  completed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => callCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => callAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => callMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => callMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => callSumOrderByAggregateInputSchema).optional()
}).strict();

export const callScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.callScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => callScalarWhereWithAggregatesInputSchema),z.lazy(() => callScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => callScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => callScalarWhereWithAggregatesInputSchema),z.lazy(() => callScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  call_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  call_type_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  client_branch_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  requester_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  requester_num: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  requester_black_consumer: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  device_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  detail: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  received_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  receiver_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  transferred_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  transferred_dept_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  assigner_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  completed_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const call_typeWhereInputSchema: z.ZodType<Prisma.call_typeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => call_typeWhereInputSchema),z.lazy(() => call_typeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => call_typeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => call_typeWhereInputSchema),z.lazy(() => call_typeWhereInputSchema).array() ]).optional(),
  call_type_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  call_type_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parent_call_type_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  call: z.lazy(() => CallListRelationFilterSchema).optional(),
  call_type: z.union([ z.lazy(() => Call_typeNullableRelationFilterSchema),z.lazy(() => call_typeWhereInputSchema) ]).optional().nullable(),
  other_call_type: z.lazy(() => Call_typeListRelationFilterSchema).optional()
}).strict();

export const call_typeOrderByWithRelationInputSchema: z.ZodType<Prisma.call_typeOrderByWithRelationInput> = z.object({
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_name: z.lazy(() => SortOrderSchema).optional(),
  parent_call_type_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  call: z.lazy(() => callOrderByRelationAggregateInputSchema).optional(),
  call_type: z.lazy(() => call_typeOrderByWithRelationInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeOrderByRelationAggregateInputSchema).optional()
}).strict();

export const call_typeWhereUniqueInputSchema: z.ZodType<Prisma.call_typeWhereUniqueInput> = z.object({
  call_type_id: z.coerce.number()
})
.and(z.object({
  call_type_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => call_typeWhereInputSchema),z.lazy(() => call_typeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => call_typeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => call_typeWhereInputSchema),z.lazy(() => call_typeWhereInputSchema).array() ]).optional(),
  call_type_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(50) ]).optional(),
  parent_call_type_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  call: z.lazy(() => CallListRelationFilterSchema).optional(),
  call_type: z.union([ z.lazy(() => Call_typeNullableRelationFilterSchema),z.lazy(() => call_typeWhereInputSchema) ]).optional().nullable(),
  other_call_type: z.lazy(() => Call_typeListRelationFilterSchema).optional()
}).strict());

export const call_typeOrderByWithAggregationInputSchema: z.ZodType<Prisma.call_typeOrderByWithAggregationInput> = z.object({
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_name: z.lazy(() => SortOrderSchema).optional(),
  parent_call_type_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => call_typeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => call_typeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => call_typeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => call_typeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => call_typeSumOrderByAggregateInputSchema).optional()
}).strict();

export const call_typeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.call_typeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => call_typeScalarWhereWithAggregatesInputSchema),z.lazy(() => call_typeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => call_typeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => call_typeScalarWhereWithAggregatesInputSchema),z.lazy(() => call_typeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  call_type_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  call_type_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  parent_call_type_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const clientWhereInputSchema: z.ZodType<Prisma.clientWhereInput> = z.object({
  AND: z.union([ z.lazy(() => clientWhereInputSchema),z.lazy(() => clientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => clientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => clientWhereInputSchema),z.lazy(() => clientWhereInputSchema).array() ]).optional(),
  client_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  parent_client_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  client_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  remote_support: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  push_alert: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client: z.union([ z.lazy(() => ClientNullableRelationFilterSchema),z.lazy(() => clientWhereInputSchema) ]).optional().nullable(),
  other_client: z.lazy(() => ClientListRelationFilterSchema).optional(),
  client_rate: z.union([ z.lazy(() => Client_rateNullableRelationFilterSchema),z.lazy(() => client_rateWhereInputSchema) ]).optional().nullable(),
  client_branch: z.lazy(() => Client_branchListRelationFilterSchema).optional()
}).strict();

export const clientOrderByWithRelationInputSchema: z.ZodType<Prisma.clientOrderByWithRelationInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  default_client_branch_rate_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  push_alert: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  client: z.lazy(() => clientOrderByWithRelationInputSchema).optional(),
  other_client: z.lazy(() => clientOrderByRelationAggregateInputSchema).optional(),
  client_rate: z.lazy(() => client_rateOrderByWithRelationInputSchema).optional(),
  client_branch: z.lazy(() => client_branchOrderByRelationAggregateInputSchema).optional()
}).strict();

export const clientWhereUniqueInputSchema: z.ZodType<Prisma.clientWhereUniqueInput> = z.object({
  client_id: z.coerce.number()
})
.and(z.object({
  client_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => clientWhereInputSchema),z.lazy(() => clientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => clientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => clientWhereInputSchema),z.lazy(() => clientWhereInputSchema).array() ]).optional(),
  parent_client_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  client_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  remote_support: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  push_alert: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(1) ]).optional(),
  client: z.union([ z.lazy(() => ClientNullableRelationFilterSchema),z.lazy(() => clientWhereInputSchema) ]).optional().nullable(),
  other_client: z.lazy(() => ClientListRelationFilterSchema).optional(),
  client_rate: z.union([ z.lazy(() => Client_rateNullableRelationFilterSchema),z.lazy(() => client_rateWhereInputSchema) ]).optional().nullable(),
  client_branch: z.lazy(() => Client_branchListRelationFilterSchema).optional()
}).strict());

export const clientOrderByWithAggregationInputSchema: z.ZodType<Prisma.clientOrderByWithAggregationInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  default_client_branch_rate_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  push_alert: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => clientCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => clientAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => clientMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => clientMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => clientSumOrderByAggregateInputSchema).optional()
}).strict();

export const clientScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.clientScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => clientScalarWhereWithAggregatesInputSchema),z.lazy(() => clientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => clientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => clientScalarWhereWithAggregatesInputSchema),z.lazy(() => clientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  client_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  parent_client_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  client_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  remote_support: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  push_alert: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const client_branchWhereInputSchema: z.ZodType<Prisma.client_branchWhereInput> = z.object({
  AND: z.union([ z.lazy(() => client_branchWhereInputSchema),z.lazy(() => client_branchWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => client_branchWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => client_branchWhereInputSchema),z.lazy(() => client_branchWhereInputSchema).array() ]).optional(),
  client_branch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sigungu_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_branch_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  client_branch_rate_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  branch_mgr_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  remote_support: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  push_alert: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  call: z.lazy(() => CallListRelationFilterSchema).optional(),
  client: z.union([ z.lazy(() => ClientRelationFilterSchema),z.lazy(() => clientWhereInputSchema) ]).optional(),
  client_rate: z.union([ z.lazy(() => Client_rateRelationFilterSchema),z.lazy(() => client_rateWhereInputSchema) ]).optional(),
  dept: z.union([ z.lazy(() => DeptRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional(),
  sigungu: z.union([ z.lazy(() => SigunguRelationFilterSchema),z.lazy(() => sigunguWhereInputSchema) ]).optional(),
  location: z.lazy(() => LocationListRelationFilterSchema).optional()
}).strict();

export const client_branchOrderByWithRelationInputSchema: z.ZodType<Prisma.client_branchOrderByWithRelationInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_office_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  call: z.lazy(() => callOrderByRelationAggregateInputSchema).optional(),
  client: z.lazy(() => clientOrderByWithRelationInputSchema).optional(),
  client_rate: z.lazy(() => client_rateOrderByWithRelationInputSchema).optional(),
  dept: z.lazy(() => deptOrderByWithRelationInputSchema).optional(),
  sigungu: z.lazy(() => sigunguOrderByWithRelationInputSchema).optional(),
  location: z.lazy(() => locationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const client_branchWhereUniqueInputSchema: z.ZodType<Prisma.client_branchWhereUniqueInput> = z.object({
  client_branch_id: z.coerce.number()
})
.and(z.object({
  client_branch_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => client_branchWhereInputSchema),z.lazy(() => client_branchWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => client_branchWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => client_branchWhereInputSchema),z.lazy(() => client_branchWhereInputSchema).array() ]).optional(),
  sigungu_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  client_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  client_branch_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  client_branch_rate_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  branch_mgr_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  branch_mgr_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(1) ]).optional(),
  remote_support: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(0) ]).optional(),
  push_alert: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(0) ]).optional(),
  call: z.lazy(() => CallListRelationFilterSchema).optional(),
  client: z.union([ z.lazy(() => ClientRelationFilterSchema),z.lazy(() => clientWhereInputSchema) ]).optional(),
  client_rate: z.union([ z.lazy(() => Client_rateRelationFilterSchema),z.lazy(() => client_rateWhereInputSchema) ]).optional(),
  dept: z.union([ z.lazy(() => DeptRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional(),
  sigungu: z.union([ z.lazy(() => SigunguRelationFilterSchema),z.lazy(() => sigunguWhereInputSchema) ]).optional(),
  location: z.lazy(() => LocationListRelationFilterSchema).optional()
}).strict());

export const client_branchOrderByWithAggregationInputSchema: z.ZodType<Prisma.client_branchOrderByWithAggregationInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_office_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => client_branchCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => client_branchAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => client_branchMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => client_branchMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => client_branchSumOrderByAggregateInputSchema).optional()
}).strict();

export const client_branchScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.client_branchScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => client_branchScalarWhereWithAggregatesInputSchema),z.lazy(() => client_branchScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => client_branchScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => client_branchScalarWhereWithAggregatesInputSchema),z.lazy(() => client_branchScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  client_branch_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  sigungu_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  client_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  client_branch_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  client_branch_rate_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  branch_mgr_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  remote_support: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  push_alert: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const client_rateWhereInputSchema: z.ZodType<Prisma.client_rateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => client_rateWhereInputSchema),z.lazy(() => client_rateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => client_rateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => client_rateWhereInputSchema),z.lazy(() => client_rateWhereInputSchema).array() ]).optional(),
  client_rate_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  rate_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  rate_detail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  client: z.lazy(() => ClientListRelationFilterSchema).optional(),
  client_branch: z.lazy(() => Client_branchListRelationFilterSchema).optional()
}).strict();

export const client_rateOrderByWithRelationInputSchema: z.ZodType<Prisma.client_rateOrderByWithRelationInput> = z.object({
  client_rate_id: z.lazy(() => SortOrderSchema).optional(),
  rate_type: z.lazy(() => SortOrderSchema).optional(),
  rate_detail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client: z.lazy(() => clientOrderByRelationAggregateInputSchema).optional(),
  client_branch: z.lazy(() => client_branchOrderByRelationAggregateInputSchema).optional()
}).strict();

export const client_rateWhereUniqueInputSchema: z.ZodType<Prisma.client_rateWhereUniqueInput> = z.object({
  client_rate_id: z.coerce.number()
})
.and(z.object({
  client_rate_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => client_rateWhereInputSchema),z.lazy(() => client_rateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => client_rateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => client_rateWhereInputSchema),z.lazy(() => client_rateWhereInputSchema).array() ]).optional(),
  rate_type: z.union([ z.lazy(() => StringFilterSchema),z.string().max(10) ]).optional(),
  rate_detail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  client: z.lazy(() => ClientListRelationFilterSchema).optional(),
  client_branch: z.lazy(() => Client_branchListRelationFilterSchema).optional()
}).strict());

export const client_rateOrderByWithAggregationInputSchema: z.ZodType<Prisma.client_rateOrderByWithAggregationInput> = z.object({
  client_rate_id: z.lazy(() => SortOrderSchema).optional(),
  rate_type: z.lazy(() => SortOrderSchema).optional(),
  rate_detail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => client_rateCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => client_rateAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => client_rateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => client_rateMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => client_rateSumOrderByAggregateInputSchema).optional()
}).strict();

export const client_rateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.client_rateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => client_rateScalarWhereWithAggregatesInputSchema),z.lazy(() => client_rateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => client_rateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => client_rateScalarWhereWithAggregatesInputSchema),z.lazy(() => client_rateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  client_rate_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  rate_type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  rate_detail: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const consumable_modelWhereInputSchema: z.ZodType<Prisma.consumable_modelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => consumable_modelWhereInputSchema),z.lazy(() => consumable_modelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => consumable_modelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => consumable_modelWhereInputSchema),z.lazy(() => consumable_modelWhereInputSchema).array() ]).optional(),
  consumable_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  consumable_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  consumable_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  device_consumable_compatibility: z.lazy(() => Device_consumable_compatibilityListRelationFilterSchema).optional()
}).strict();

export const consumable_modelOrderByWithRelationInputSchema: z.ZodType<Prisma.consumable_modelOrderByWithRelationInput> = z.object({
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  consumable_name: z.lazy(() => SortOrderSchema).optional(),
  consumable_type: z.lazy(() => SortOrderSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityOrderByRelationAggregateInputSchema).optional()
}).strict();

export const consumable_modelWhereUniqueInputSchema: z.ZodType<Prisma.consumable_modelWhereUniqueInput> = z.object({
  consumable_model_id: z.coerce.number()
})
.and(z.object({
  consumable_model_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => consumable_modelWhereInputSchema),z.lazy(() => consumable_modelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => consumable_modelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => consumable_modelWhereInputSchema),z.lazy(() => consumable_modelWhereInputSchema).array() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  consumable_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  consumable_type: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  device_consumable_compatibility: z.lazy(() => Device_consumable_compatibilityListRelationFilterSchema).optional()
}).strict());

export const consumable_modelOrderByWithAggregationInputSchema: z.ZodType<Prisma.consumable_modelOrderByWithAggregationInput> = z.object({
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  consumable_name: z.lazy(() => SortOrderSchema).optional(),
  consumable_type: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => consumable_modelCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => consumable_modelAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => consumable_modelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => consumable_modelMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => consumable_modelSumOrderByAggregateInputSchema).optional()
}).strict();

export const consumable_modelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.consumable_modelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => consumable_modelScalarWhereWithAggregatesInputSchema),z.lazy(() => consumable_modelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => consumable_modelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => consumable_modelScalarWhereWithAggregatesInputSchema),z.lazy(() => consumable_modelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  consumable_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  consumable_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  consumable_type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const deptWhereInputSchema: z.ZodType<Prisma.deptWhereInput> = z.object({
  AND: z.union([ z.lazy(() => deptWhereInputSchema),z.lazy(() => deptWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => deptWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deptWhereInputSchema),z.lazy(() => deptWhereInputSchema).array() ]).optional(),
  dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  parent_dept_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  dept_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  call: z.lazy(() => CallListRelationFilterSchema).optional(),
  client_branch: z.lazy(() => Client_branchListRelationFilterSchema).optional(),
  dept: z.union([ z.lazy(() => DeptNullableRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional().nullable(),
  other_dept: z.lazy(() => DeptListRelationFilterSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => DeviceListRelationFilterSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => DeviceListRelationFilterSchema).optional(),
  user: z.lazy(() => UserListRelationFilterSchema).optional(),
  warehouse: z.lazy(() => WarehouseListRelationFilterSchema).optional()
}).strict();

export const deptOrderByWithRelationInputSchema: z.ZodType<Prisma.deptOrderByWithRelationInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dept_name: z.lazy(() => SortOrderSchema).optional(),
  call: z.lazy(() => callOrderByRelationAggregateInputSchema).optional(),
  client_branch: z.lazy(() => client_branchOrderByRelationAggregateInputSchema).optional(),
  dept: z.lazy(() => deptOrderByWithRelationInputSchema).optional(),
  other_dept: z.lazy(() => deptOrderByRelationAggregateInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceOrderByRelationAggregateInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceOrderByRelationAggregateInputSchema).optional(),
  user: z.lazy(() => userOrderByRelationAggregateInputSchema).optional(),
  warehouse: z.lazy(() => warehouseOrderByRelationAggregateInputSchema).optional()
}).strict();

export const deptWhereUniqueInputSchema: z.ZodType<Prisma.deptWhereUniqueInput> = z.object({
  dept_id: z.coerce.number()
})
.and(z.object({
  dept_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => deptWhereInputSchema),z.lazy(() => deptWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => deptWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deptWhereInputSchema),z.lazy(() => deptWhereInputSchema).array() ]).optional(),
  parent_dept_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  dept_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  call: z.lazy(() => CallListRelationFilterSchema).optional(),
  client_branch: z.lazy(() => Client_branchListRelationFilterSchema).optional(),
  dept: z.union([ z.lazy(() => DeptNullableRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional().nullable(),
  other_dept: z.lazy(() => DeptListRelationFilterSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => DeviceListRelationFilterSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => DeviceListRelationFilterSchema).optional(),
  user: z.lazy(() => UserListRelationFilterSchema).optional(),
  warehouse: z.lazy(() => WarehouseListRelationFilterSchema).optional()
}).strict());

export const deptOrderByWithAggregationInputSchema: z.ZodType<Prisma.deptOrderByWithAggregationInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dept_name: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => deptCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => deptAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => deptMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => deptMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => deptSumOrderByAggregateInputSchema).optional()
}).strict();

export const deptScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.deptScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => deptScalarWhereWithAggregatesInputSchema),z.lazy(() => deptScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => deptScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deptScalarWhereWithAggregatesInputSchema),z.lazy(() => deptScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  parent_dept_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  dept_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const deviceWhereInputSchema: z.ZodType<Prisma.deviceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => deviceWhereInputSchema),z.lazy(() => deviceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => deviceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deviceWhereInputSchema),z.lazy(() => deviceWhereInputSchema).array() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  owner_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  regi_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  mac: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  last_location_log_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  status_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  call: z.lazy(() => CallListRelationFilterSchema).optional(),
  dept_device_owner_dept_idTodept: z.union([ z.lazy(() => DeptRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional(),
  dept_device_mgmt_dept_idTodept: z.union([ z.lazy(() => DeptRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional(),
  device_status: z.union([ z.lazy(() => Device_statusRelationFilterSchema),z.lazy(() => device_statusWhereInputSchema) ]).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.union([ z.lazy(() => Device_location_logNullableRelationFilterSchema),z.lazy(() => device_location_logWhereInputSchema) ]).optional().nullable(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.union([ z.lazy(() => Device_inspection_logNullableRelationFilterSchema),z.lazy(() => device_inspection_logWhereInputSchema) ]).optional().nullable(),
  device_model: z.union([ z.lazy(() => Device_modelRelationFilterSchema),z.lazy(() => device_modelWhereInputSchema) ]).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => Device_inspection_logListRelationFilterSchema).optional(),
  device_install_info: z.union([ z.lazy(() => Device_install_infoNullableRelationFilterSchema),z.lazy(() => device_install_infoWhereInputSchema) ]).optional().nullable(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => Device_location_logListRelationFilterSchema).optional(),
  device_option: z.lazy(() => Device_optionListRelationFilterSchema).optional()
}).strict();

export const deviceOrderByWithRelationInputSchema: z.ZodType<Prisma.deviceOrderByWithRelationInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  regi_date: z.lazy(() => SortOrderSchema).optional(),
  mac: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_location_log_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional(),
  call: z.lazy(() => callOrderByRelationAggregateInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptOrderByWithRelationInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptOrderByWithRelationInputSchema).optional(),
  device_status: z.lazy(() => device_statusOrderByWithRelationInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logOrderByWithRelationInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logOrderByWithRelationInputSchema).optional(),
  device_model: z.lazy(() => device_modelOrderByWithRelationInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logOrderByRelationAggregateInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoOrderByWithRelationInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logOrderByRelationAggregateInputSchema).optional(),
  device_option: z.lazy(() => device_optionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const deviceWhereUniqueInputSchema: z.ZodType<Prisma.deviceWhereUniqueInput> = z.object({
  device_id: z.coerce.number()
})
.and(z.object({
  device_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => deviceWhereInputSchema),z.lazy(() => deviceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => deviceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deviceWhereInputSchema),z.lazy(() => deviceWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  owner_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringFilterSchema),z.string().max(50) ]).optional(),
  regi_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  mac: z.union([ z.lazy(() => StringFilterSchema),z.string().max(50) ]).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  last_location_log_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  status_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  call: z.lazy(() => CallListRelationFilterSchema).optional(),
  dept_device_owner_dept_idTodept: z.union([ z.lazy(() => DeptRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional(),
  dept_device_mgmt_dept_idTodept: z.union([ z.lazy(() => DeptRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional(),
  device_status: z.union([ z.lazy(() => Device_statusRelationFilterSchema),z.lazy(() => device_statusWhereInputSchema) ]).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.union([ z.lazy(() => Device_location_logNullableRelationFilterSchema),z.lazy(() => device_location_logWhereInputSchema) ]).optional().nullable(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.union([ z.lazy(() => Device_inspection_logNullableRelationFilterSchema),z.lazy(() => device_inspection_logWhereInputSchema) ]).optional().nullable(),
  device_model: z.union([ z.lazy(() => Device_modelRelationFilterSchema),z.lazy(() => device_modelWhereInputSchema) ]).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => Device_inspection_logListRelationFilterSchema).optional(),
  device_install_info: z.union([ z.lazy(() => Device_install_infoNullableRelationFilterSchema),z.lazy(() => device_install_infoWhereInputSchema) ]).optional().nullable(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => Device_location_logListRelationFilterSchema).optional(),
  device_option: z.lazy(() => Device_optionListRelationFilterSchema).optional()
}).strict());

export const deviceOrderByWithAggregationInputSchema: z.ZodType<Prisma.deviceOrderByWithAggregationInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  regi_date: z.lazy(() => SortOrderSchema).optional(),
  mac: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_location_log_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => deviceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => deviceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => deviceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => deviceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => deviceSumOrderByAggregateInputSchema).optional()
}).strict();

export const deviceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.deviceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => deviceScalarWhereWithAggregatesInputSchema),z.lazy(() => deviceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => deviceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deviceScalarWhereWithAggregatesInputSchema),z.lazy(() => deviceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  owner_dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  regi_date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  mac: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  last_location_log_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  status_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const device_approvalWhereInputSchema: z.ZodType<Prisma.device_approvalWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_approvalWhereInputSchema),z.lazy(() => device_approvalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_approvalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_approvalWhereInputSchema),z.lazy(() => device_approvalWhereInputSchema).array() ]).optional(),
  approval_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approval_type_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sub_approval_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  requester_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  request_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  approver_role_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  origin_location_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  destination_location_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approver_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approve_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_approved: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approval_role: z.union([ z.lazy(() => Approval_roleRelationFilterSchema),z.lazy(() => approval_roleWhereInputSchema) ]).optional(),
  device_approval: z.union([ z.lazy(() => Device_approvalNullableRelationFilterSchema),z.lazy(() => device_approvalWhereInputSchema) ]).optional().nullable(),
  other_device_approval: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  device_approval_type: z.union([ z.lazy(() => Device_approval_typeRelationFilterSchema),z.lazy(() => device_approval_typeWhereInputSchema) ]).optional(),
  location_device_approval_origin_location_idTolocation: z.union([ z.lazy(() => LocationNullableRelationFilterSchema),z.lazy(() => locationWhereInputSchema) ]).optional().nullable(),
  location_device_approval_destination_location_idTolocation: z.union([ z.lazy(() => LocationNullableRelationFilterSchema),z.lazy(() => locationWhereInputSchema) ]).optional().nullable(),
  user_device_approval_requester_idTouser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  user_device_approval_approver_idTouser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional().nullable(),
}).strict();

export const device_approvalOrderByWithRelationInputSchema: z.ZodType<Prisma.device_approvalOrderByWithRelationInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  sub_approval_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  request_at: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  origin_location_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  destination_location_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approver_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approve_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_approved: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approval_role: z.lazy(() => approval_roleOrderByWithRelationInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalOrderByWithRelationInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalOrderByRelationAggregateInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeOrderByWithRelationInputSchema).optional(),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationOrderByWithRelationInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationOrderByWithRelationInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userOrderByWithRelationInputSchema).optional(),
  user_device_approval_approver_idTouser: z.lazy(() => userOrderByWithRelationInputSchema).optional()
}).strict();

export const device_approvalWhereUniqueInputSchema: z.ZodType<Prisma.device_approvalWhereUniqueInput> = z.object({
  approval_id: z.coerce.number()
})
.and(z.object({
  approval_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => device_approvalWhereInputSchema),z.lazy(() => device_approvalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_approvalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_approvalWhereInputSchema),z.lazy(() => device_approvalWhereInputSchema).array() ]).optional(),
  approval_type_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  sub_approval_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  requester_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  request_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  approver_role_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  origin_location_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  destination_location_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  approver_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  approve_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_approved: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  approval_role: z.union([ z.lazy(() => Approval_roleRelationFilterSchema),z.lazy(() => approval_roleWhereInputSchema) ]).optional(),
  device_approval: z.union([ z.lazy(() => Device_approvalNullableRelationFilterSchema),z.lazy(() => device_approvalWhereInputSchema) ]).optional().nullable(),
  other_device_approval: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  device_approval_type: z.union([ z.lazy(() => Device_approval_typeRelationFilterSchema),z.lazy(() => device_approval_typeWhereInputSchema) ]).optional(),
  location_device_approval_origin_location_idTolocation: z.union([ z.lazy(() => LocationNullableRelationFilterSchema),z.lazy(() => locationWhereInputSchema) ]).optional().nullable(),
  location_device_approval_destination_location_idTolocation: z.union([ z.lazy(() => LocationNullableRelationFilterSchema),z.lazy(() => locationWhereInputSchema) ]).optional().nullable(),
  user_device_approval_requester_idTouser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  user_device_approval_approver_idTouser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional().nullable(),
}).strict());

export const device_approvalOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_approvalOrderByWithAggregationInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  sub_approval_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  request_at: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  origin_location_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  destination_location_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approver_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approve_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_approved: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => device_approvalCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_approvalAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_approvalMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_approvalMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_approvalSumOrderByAggregateInputSchema).optional()
}).strict();

export const device_approvalScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_approvalScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_approvalScalarWhereWithAggregatesInputSchema),z.lazy(() => device_approvalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_approvalScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_approvalScalarWhereWithAggregatesInputSchema),z.lazy(() => device_approvalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  approval_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  approval_type_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  sub_approval_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  requester_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  request_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  approver_role_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  origin_location_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  destination_location_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  approver_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  approve_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_approved: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const device_approval_typeWhereInputSchema: z.ZodType<Prisma.device_approval_typeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_approval_typeWhereInputSchema),z.lazy(() => device_approval_typeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_approval_typeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_approval_typeWhereInputSchema),z.lazy(() => device_approval_typeWhereInputSchema).array() ]).optional(),
  approval_type_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approval_type_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  device_approval: z.lazy(() => Device_approvalListRelationFilterSchema).optional()
}).strict();

export const device_approval_typeOrderByWithRelationInputSchema: z.ZodType<Prisma.device_approval_typeOrderByWithRelationInput> = z.object({
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_name: z.lazy(() => SortOrderSchema).optional(),
  device_approval: z.lazy(() => device_approvalOrderByRelationAggregateInputSchema).optional()
}).strict();

export const device_approval_typeWhereUniqueInputSchema: z.ZodType<Prisma.device_approval_typeWhereUniqueInput> = z.object({
  approval_type_id: z.coerce.number()
})
.and(z.object({
  approval_type_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => device_approval_typeWhereInputSchema),z.lazy(() => device_approval_typeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_approval_typeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_approval_typeWhereInputSchema),z.lazy(() => device_approval_typeWhereInputSchema).array() ]).optional(),
  approval_type_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  device_approval: z.lazy(() => Device_approvalListRelationFilterSchema).optional()
}).strict());

export const device_approval_typeOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_approval_typeOrderByWithAggregationInput> = z.object({
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_name: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => device_approval_typeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_approval_typeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_approval_typeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_approval_typeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_approval_typeSumOrderByAggregateInputSchema).optional()
}).strict();

export const device_approval_typeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_approval_typeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_approval_typeScalarWhereWithAggregatesInputSchema),z.lazy(() => device_approval_typeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_approval_typeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_approval_typeScalarWhereWithAggregatesInputSchema),z.lazy(() => device_approval_typeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  approval_type_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  approval_type_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const device_consumable_compatibilityWhereInputSchema: z.ZodType<Prisma.device_consumable_compatibilityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_consumable_compatibilityWhereInputSchema),z.lazy(() => device_consumable_compatibilityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_consumable_compatibilityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_consumable_compatibilityWhereInputSchema),z.lazy(() => device_consumable_compatibilityWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  consumable_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  consumable_model: z.union([ z.lazy(() => Consumable_modelRelationFilterSchema),z.lazy(() => consumable_modelWhereInputSchema) ]).optional(),
  device_model: z.union([ z.lazy(() => Device_modelRelationFilterSchema),z.lazy(() => device_modelWhereInputSchema) ]).optional(),
}).strict();

export const device_consumable_compatibilityOrderByWithRelationInputSchema: z.ZodType<Prisma.device_consumable_compatibilityOrderByWithRelationInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model: z.lazy(() => consumable_modelOrderByWithRelationInputSchema).optional(),
  device_model: z.lazy(() => device_modelOrderByWithRelationInputSchema).optional()
}).strict();

export const device_consumable_compatibilityWhereUniqueInputSchema: z.ZodType<Prisma.device_consumable_compatibilityWhereUniqueInput> = z.object({
  device_model_id_consumable_model_id: z.lazy(() => device_consumable_compatibilityDevice_model_idConsumable_model_idCompoundUniqueInputSchema)
})
.and(z.object({
  device_model_id_consumable_model_id: z.lazy(() => device_consumable_compatibilityDevice_model_idConsumable_model_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => device_consumable_compatibilityWhereInputSchema),z.lazy(() => device_consumable_compatibilityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_consumable_compatibilityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_consumable_compatibilityWhereInputSchema),z.lazy(() => device_consumable_compatibilityWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  consumable_model_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  consumable_model: z.union([ z.lazy(() => Consumable_modelRelationFilterSchema),z.lazy(() => consumable_modelWhereInputSchema) ]).optional(),
  device_model: z.union([ z.lazy(() => Device_modelRelationFilterSchema),z.lazy(() => device_modelWhereInputSchema) ]).optional(),
}).strict());

export const device_consumable_compatibilityOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_consumable_compatibilityOrderByWithAggregationInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => device_consumable_compatibilityCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_consumable_compatibilityAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_consumable_compatibilityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_consumable_compatibilityMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_consumable_compatibilitySumOrderByAggregateInputSchema).optional()
}).strict();

export const device_consumable_compatibilityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_consumable_compatibilityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_consumable_compatibilityScalarWhereWithAggregatesInputSchema),z.lazy(() => device_consumable_compatibilityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_consumable_compatibilityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_consumable_compatibilityScalarWhereWithAggregatesInputSchema),z.lazy(() => device_consumable_compatibilityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  consumable_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const device_driverWhereInputSchema: z.ZodType<Prisma.device_driverWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_driverWhereInputSchema),z.lazy(() => device_driverWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_driverWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_driverWhereInputSchema),z.lazy(() => device_driverWhereInputSchema).array() ]).optional(),
  device_driver_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printer_language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  install_file_address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device_model: z.union([ z.lazy(() => Device_modelRelationFilterSchema),z.lazy(() => device_modelWhereInputSchema) ]).optional(),
}).strict();

export const device_driverOrderByWithRelationInputSchema: z.ZodType<Prisma.device_driverOrderByWithRelationInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printer_language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  install_file_address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device_model: z.lazy(() => device_modelOrderByWithRelationInputSchema).optional()
}).strict();

export const device_driverWhereUniqueInputSchema: z.ZodType<Prisma.device_driverWhereUniqueInput> = z.object({
  device_driver_id: z.coerce.number()
})
.and(z.object({
  device_driver_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => device_driverWhereInputSchema),z.lazy(() => device_driverWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_driverWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_driverWhereInputSchema),z.lazy(() => device_driverWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  printer_language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  install_file_address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(200).nullable() ]).optional().nullable(),
  device_model: z.union([ z.lazy(() => Device_modelRelationFilterSchema),z.lazy(() => device_modelWhereInputSchema) ]).optional(),
}).strict());

export const device_driverOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_driverOrderByWithAggregationInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printer_language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  install_file_address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => device_driverCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_driverAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_driverMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_driverMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_driverSumOrderByAggregateInputSchema).optional()
}).strict();

export const device_driverScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_driverScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_driverScalarWhereWithAggregatesInputSchema),z.lazy(() => device_driverScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_driverScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_driverScalarWhereWithAggregatesInputSchema),z.lazy(() => device_driverScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_driver_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  printer_language: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  install_file_address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const device_inspection_logWhereInputSchema: z.ZodType<Prisma.device_inspection_logWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_inspection_logWhereInputSchema),z.lazy(() => device_inspection_logWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_inspection_logWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_inspection_logWhereInputSchema),z.lazy(() => device_inspection_logWhereInputSchema).array() ]).optional(),
  device_inspection_log_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inspector_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inspection_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  visit_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  call_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  FL: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  FS: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  BL: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  BS: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_count_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_count_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_count_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_count_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  drum_count_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  drum_count_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  drum_count_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  drum_count_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumdevice_inspection_log_statusNullableFilterSchema),z.lazy(() => device_inspection_log_statusSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => DeviceListRelationFilterSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.union([ z.lazy(() => DeviceRelationFilterSchema),z.lazy(() => deviceWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  call: z.union([ z.lazy(() => CallNullableRelationFilterSchema),z.lazy(() => callWhereInputSchema) ]).optional().nullable(),
  inspection_approval: z.lazy(() => Inspection_approvalListRelationFilterSchema).optional()
}).strict();

export const device_inspection_logOrderByWithRelationInputSchema: z.ZodType<Prisma.device_inspection_logOrderByWithRelationInput> = z.object({
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  inspector_id: z.lazy(() => SortOrderSchema).optional(),
  inspection_date: z.lazy(() => SortOrderSchema).optional(),
  visit_type: z.lazy(() => SortOrderSchema).optional(),
  call_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  FL: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  FS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BL: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_count_YE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_count_MA: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_count_CY: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_count_BK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_stock_YE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_stock_MA: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_stock_CY: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_stock_BK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_deliver_YE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_deliver_CY: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_deliver_MA: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_deliver_BK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drum_count_YE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drum_count_MA: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drum_count_CY: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drum_count_BK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drum_replacement_detail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceOrderByRelationAggregateInputSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => userOrderByWithRelationInputSchema).optional(),
  call: z.lazy(() => callOrderByWithRelationInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalOrderByRelationAggregateInputSchema).optional()
}).strict();

export const device_inspection_logWhereUniqueInputSchema: z.ZodType<Prisma.device_inspection_logWhereUniqueInput> = z.object({
  device_inspection_log_id: z.coerce.number()
})
.and(z.object({
  device_inspection_log_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => device_inspection_logWhereInputSchema),z.lazy(() => device_inspection_logWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_inspection_logWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_inspection_logWhereInputSchema),z.lazy(() => device_inspection_logWhereInputSchema).array() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  inspector_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  inspection_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  visit_type: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  call_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  FL: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  FS: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  BL: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  BS: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_count_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_count_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_count_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_count_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_stock_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_stock_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_stock_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_stock_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  drum_count_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  drum_count_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  drum_count_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  drum_count_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(50).nullable() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumdevice_inspection_log_statusNullableFilterSchema),z.lazy(() => device_inspection_log_statusSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => DeviceListRelationFilterSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.union([ z.lazy(() => DeviceRelationFilterSchema),z.lazy(() => deviceWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
  call: z.union([ z.lazy(() => CallNullableRelationFilterSchema),z.lazy(() => callWhereInputSchema) ]).optional().nullable(),
  inspection_approval: z.lazy(() => Inspection_approvalListRelationFilterSchema).optional()
}).strict());

export const device_inspection_logOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_inspection_logOrderByWithAggregationInput> = z.object({
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  inspector_id: z.lazy(() => SortOrderSchema).optional(),
  inspection_date: z.lazy(() => SortOrderSchema).optional(),
  visit_type: z.lazy(() => SortOrderSchema).optional(),
  call_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  FL: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  FS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BL: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BS: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_count_YE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_count_MA: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_count_CY: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_count_BK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_stock_YE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_stock_MA: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_stock_CY: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_stock_BK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_deliver_YE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_deliver_CY: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_deliver_MA: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  toner_deliver_BK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drum_count_YE: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drum_count_MA: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drum_count_CY: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drum_count_BK: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  drum_replacement_detail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => device_inspection_logCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_inspection_logAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_inspection_logMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_inspection_logMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_inspection_logSumOrderByAggregateInputSchema).optional()
}).strict();

export const device_inspection_logScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_inspection_logScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_inspection_logScalarWhereWithAggregatesInputSchema),z.lazy(() => device_inspection_logScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_inspection_logScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_inspection_logScalarWhereWithAggregatesInputSchema),z.lazy(() => device_inspection_logScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_inspection_log_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  device_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  inspector_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  inspection_date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  visit_type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  call_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  FL: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  FS: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  BL: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  BS: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_count_YE: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_count_MA: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_count_CY: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_count_BK: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_YE: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_MA: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_CY: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_BK: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  drum_count_YE: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  drum_count_MA: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  drum_count_CY: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  drum_count_BK: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumdevice_inspection_log_statusNullableWithAggregatesFilterSchema),z.lazy(() => device_inspection_log_statusSchema) ]).optional().nullable(),
}).strict();

export const device_install_infoWhereInputSchema: z.ZodType<Prisma.device_install_infoWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_install_infoWhereInputSchema),z.lazy(() => device_install_infoWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_install_infoWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_install_infoWhereInputSchema),z.lazy(() => device_install_infoWhereInputSchema).array() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  installer_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgmt_num: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ip_address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subnet_mask: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gateway: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dns1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dns2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device: z.union([ z.lazy(() => DeviceRelationFilterSchema),z.lazy(() => deviceWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict();

export const device_install_infoOrderByWithRelationInputSchema: z.ZodType<Prisma.device_install_infoOrderByWithRelationInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  installer_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_num: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  subnet_mask: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  gateway: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dns1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dns2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device: z.lazy(() => deviceOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => userOrderByWithRelationInputSchema).optional()
}).strict();

export const device_install_infoWhereUniqueInputSchema: z.ZodType<Prisma.device_install_infoWhereUniqueInput> = z.object({
  device_id: z.coerce.number()
})
.and(z.object({
  device_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => device_install_infoWhereInputSchema),z.lazy(() => device_install_infoWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_install_infoWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_install_infoWhereInputSchema),z.lazy(() => device_install_infoWhereInputSchema).array() ]).optional(),
  installer_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  mgmt_num: z.union([ z.lazy(() => StringFilterSchema),z.string().max(50) ]).optional(),
  ip_address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(50).nullable() ]).optional().nullable(),
  subnet_mask: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(50).nullable() ]).optional().nullable(),
  gateway: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(50).nullable() ]).optional().nullable(),
  dns1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(50).nullable() ]).optional().nullable(),
  dns2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(50).nullable() ]).optional().nullable(),
  device: z.union([ z.lazy(() => DeviceRelationFilterSchema),z.lazy(() => deviceWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict());

export const device_install_infoOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_install_infoOrderByWithAggregationInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  installer_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_num: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  subnet_mask: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  gateway: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dns1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dns2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => device_install_infoCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_install_infoAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_install_infoMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_install_infoMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_install_infoSumOrderByAggregateInputSchema).optional()
}).strict();

export const device_install_infoScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_install_infoScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_install_infoScalarWhereWithAggregatesInputSchema),z.lazy(() => device_install_infoScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_install_infoScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_install_infoScalarWhereWithAggregatesInputSchema),z.lazy(() => device_install_infoScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  installer_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  mgmt_num: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  ip_address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subnet_mask: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gateway: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dns1: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dns2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const device_location_logWhereInputSchema: z.ZodType<Prisma.device_location_logWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_location_logWhereInputSchema),z.lazy(() => device_location_logWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_location_logWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_location_logWhereInputSchema),z.lazy(() => device_location_logWhereInputSchema).array() ]).optional(),
  device_location_log_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  location_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  location_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  location_detail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => DeviceListRelationFilterSchema).optional(),
  device_device_location_log_device_idTodevice: z.union([ z.lazy(() => DeviceRelationFilterSchema),z.lazy(() => deviceWhereInputSchema) ]).optional(),
  location: z.union([ z.lazy(() => LocationRelationFilterSchema),z.lazy(() => locationWhereInputSchema) ]).optional(),
}).strict();

export const device_location_logOrderByWithRelationInputSchema: z.ZodType<Prisma.device_location_logOrderByWithRelationInput> = z.object({
  device_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  location_date: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional(),
  location_detail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceOrderByRelationAggregateInputSchema).optional(),
  device_device_location_log_device_idTodevice: z.lazy(() => deviceOrderByWithRelationInputSchema).optional(),
  location: z.lazy(() => locationOrderByWithRelationInputSchema).optional()
}).strict();

export const device_location_logWhereUniqueInputSchema: z.ZodType<Prisma.device_location_logWhereUniqueInput> = z.object({
  device_location_log_id: z.coerce.number()
})
.and(z.object({
  device_location_log_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => device_location_logWhereInputSchema),z.lazy(() => device_location_logWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_location_logWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_location_logWhereInputSchema),z.lazy(() => device_location_logWhereInputSchema).array() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  location_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  location_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  location_detail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(200).nullable() ]).optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => DeviceListRelationFilterSchema).optional(),
  device_device_location_log_device_idTodevice: z.union([ z.lazy(() => DeviceRelationFilterSchema),z.lazy(() => deviceWhereInputSchema) ]).optional(),
  location: z.union([ z.lazy(() => LocationRelationFilterSchema),z.lazy(() => locationWhereInputSchema) ]).optional(),
}).strict());

export const device_location_logOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_location_logOrderByWithAggregationInput> = z.object({
  device_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  location_date: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional(),
  location_detail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => device_location_logCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_location_logAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_location_logMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_location_logMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_location_logSumOrderByAggregateInputSchema).optional()
}).strict();

export const device_location_logScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_location_logScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_location_logScalarWhereWithAggregatesInputSchema),z.lazy(() => device_location_logScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_location_logScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_location_logScalarWhereWithAggregatesInputSchema),z.lazy(() => device_location_logScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_location_log_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  device_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  location_date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  location_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  location_detail: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const device_modelWhereInputSchema: z.ZodType<Prisma.device_modelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_modelWhereInputSchema),z.lazy(() => device_modelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_modelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_modelWhereInputSchema),z.lazy(() => device_modelWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  model_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  color_support: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device: z.lazy(() => DeviceListRelationFilterSchema).optional(),
  device_consumable_compatibility: z.lazy(() => Device_consumable_compatibilityListRelationFilterSchema).optional(),
  device_driver: z.lazy(() => Device_driverListRelationFilterSchema).optional(),
  device_option_compatibility: z.lazy(() => Device_option_compatibilityListRelationFilterSchema).optional()
}).strict();

export const device_modelOrderByWithRelationInputSchema: z.ZodType<Prisma.device_modelOrderByWithRelationInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => deviceOrderByRelationAggregateInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityOrderByRelationAggregateInputSchema).optional(),
  device_driver: z.lazy(() => device_driverOrderByRelationAggregateInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityOrderByRelationAggregateInputSchema).optional()
}).strict();

export const device_modelWhereUniqueInputSchema: z.ZodType<Prisma.device_modelWhereUniqueInput> = z.object({
  device_model_id: z.coerce.number()
})
.and(z.object({
  device_model_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => device_modelWhereInputSchema),z.lazy(() => device_modelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_modelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_modelWhereInputSchema),z.lazy(() => device_modelWhereInputSchema).array() ]).optional(),
  model_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  color_support: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  device: z.lazy(() => DeviceListRelationFilterSchema).optional(),
  device_consumable_compatibility: z.lazy(() => Device_consumable_compatibilityListRelationFilterSchema).optional(),
  device_driver: z.lazy(() => Device_driverListRelationFilterSchema).optional(),
  device_option_compatibility: z.lazy(() => Device_option_compatibilityListRelationFilterSchema).optional()
}).strict());

export const device_modelOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_modelOrderByWithAggregationInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => device_modelCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_modelAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_modelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_modelMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_modelSumOrderByAggregateInputSchema).optional()
}).strict();

export const device_modelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_modelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_modelScalarWhereWithAggregatesInputSchema),z.lazy(() => device_modelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_modelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_modelScalarWhereWithAggregatesInputSchema),z.lazy(() => device_modelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  model_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  color_support: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const device_optionWhereInputSchema: z.ZodType<Prisma.device_optionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_optionWhereInputSchema),z.lazy(() => device_optionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_optionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_optionWhereInputSchema),z.lazy(() => device_optionWhereInputSchema).array() ]).optional(),
  device_option_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  option_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  location_type: z.union([ z.lazy(() => Enumdevice_option_location_typeFilterSchema),z.lazy(() => device_option_location_typeSchema) ]).optional(),
  location_warehouse_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  location_device_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  device: z.union([ z.lazy(() => DeviceNullableRelationFilterSchema),z.lazy(() => deviceWhereInputSchema) ]).optional().nullable(),
  option_model: z.union([ z.lazy(() => Option_modelRelationFilterSchema),z.lazy(() => option_modelWhereInputSchema) ]).optional(),
  warehouse: z.union([ z.lazy(() => WarehouseNullableRelationFilterSchema),z.lazy(() => warehouseWhereInputSchema) ]).optional().nullable(),
}).strict();

export const device_optionOrderByWithRelationInputSchema: z.ZodType<Prisma.device_optionOrderByWithRelationInput> = z.object({
  device_option_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  location_type: z.lazy(() => SortOrderSchema).optional(),
  location_warehouse_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  location_device_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device: z.lazy(() => deviceOrderByWithRelationInputSchema).optional(),
  option_model: z.lazy(() => option_modelOrderByWithRelationInputSchema).optional(),
  warehouse: z.lazy(() => warehouseOrderByWithRelationInputSchema).optional()
}).strict();

export const device_optionWhereUniqueInputSchema: z.ZodType<Prisma.device_optionWhereUniqueInput> = z.object({
  device_option_id: z.coerce.number()
})
.and(z.object({
  device_option_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => device_optionWhereInputSchema),z.lazy(() => device_optionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_optionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_optionWhereInputSchema),z.lazy(() => device_optionWhereInputSchema).array() ]).optional(),
  option_model_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(50).nullable() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(1) ]).optional(),
  location_type: z.union([ z.lazy(() => Enumdevice_option_location_typeFilterSchema),z.lazy(() => device_option_location_typeSchema) ]).optional(),
  location_warehouse_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  location_device_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  device: z.union([ z.lazy(() => DeviceNullableRelationFilterSchema),z.lazy(() => deviceWhereInputSchema) ]).optional().nullable(),
  option_model: z.union([ z.lazy(() => Option_modelRelationFilterSchema),z.lazy(() => option_modelWhereInputSchema) ]).optional(),
  warehouse: z.union([ z.lazy(() => WarehouseNullableRelationFilterSchema),z.lazy(() => warehouseWhereInputSchema) ]).optional().nullable(),
}).strict());

export const device_optionOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_optionOrderByWithAggregationInput> = z.object({
  device_option_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  location_type: z.lazy(() => SortOrderSchema).optional(),
  location_warehouse_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  location_device_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => device_optionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_optionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_optionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_optionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_optionSumOrderByAggregateInputSchema).optional()
}).strict();

export const device_optionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_optionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_optionScalarWhereWithAggregatesInputSchema),z.lazy(() => device_optionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_optionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_optionScalarWhereWithAggregatesInputSchema),z.lazy(() => device_optionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_option_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  option_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  location_type: z.union([ z.lazy(() => Enumdevice_option_location_typeWithAggregatesFilterSchema),z.lazy(() => device_option_location_typeSchema) ]).optional(),
  location_warehouse_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  location_device_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const device_option_compatibilityWhereInputSchema: z.ZodType<Prisma.device_option_compatibilityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_option_compatibilityWhereInputSchema),z.lazy(() => device_option_compatibilityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_option_compatibilityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_option_compatibilityWhereInputSchema),z.lazy(() => device_option_compatibilityWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  option_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_model: z.union([ z.lazy(() => Device_modelRelationFilterSchema),z.lazy(() => device_modelWhereInputSchema) ]).optional(),
  option_model: z.union([ z.lazy(() => Option_modelRelationFilterSchema),z.lazy(() => option_modelWhereInputSchema) ]).optional(),
}).strict();

export const device_option_compatibilityOrderByWithRelationInputSchema: z.ZodType<Prisma.device_option_compatibilityOrderByWithRelationInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  device_model: z.lazy(() => device_modelOrderByWithRelationInputSchema).optional(),
  option_model: z.lazy(() => option_modelOrderByWithRelationInputSchema).optional()
}).strict();

export const device_option_compatibilityWhereUniqueInputSchema: z.ZodType<Prisma.device_option_compatibilityWhereUniqueInput> = z.object({
  device_model_id_option_model_id: z.lazy(() => device_option_compatibilityDevice_model_idOption_model_idCompoundUniqueInputSchema)
})
.and(z.object({
  device_model_id_option_model_id: z.lazy(() => device_option_compatibilityDevice_model_idOption_model_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => device_option_compatibilityWhereInputSchema),z.lazy(() => device_option_compatibilityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_option_compatibilityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_option_compatibilityWhereInputSchema),z.lazy(() => device_option_compatibilityWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  option_model_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  device_model: z.union([ z.lazy(() => Device_modelRelationFilterSchema),z.lazy(() => device_modelWhereInputSchema) ]).optional(),
  option_model: z.union([ z.lazy(() => Option_modelRelationFilterSchema),z.lazy(() => option_modelWhereInputSchema) ]).optional(),
}).strict());

export const device_option_compatibilityOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_option_compatibilityOrderByWithAggregationInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => device_option_compatibilityCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_option_compatibilityAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_option_compatibilityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_option_compatibilityMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_option_compatibilitySumOrderByAggregateInputSchema).optional()
}).strict();

export const device_option_compatibilityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_option_compatibilityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_option_compatibilityScalarWhereWithAggregatesInputSchema),z.lazy(() => device_option_compatibilityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_option_compatibilityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_option_compatibilityScalarWhereWithAggregatesInputSchema),z.lazy(() => device_option_compatibilityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  option_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const device_statusWhereInputSchema: z.ZodType<Prisma.device_statusWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_statusWhereInputSchema),z.lazy(() => device_statusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_statusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_statusWhereInputSchema),z.lazy(() => device_statusWhereInputSchema).array() ]).optional(),
  status_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  device: z.lazy(() => DeviceListRelationFilterSchema).optional()
}).strict();

export const device_statusOrderByWithRelationInputSchema: z.ZodType<Prisma.device_statusOrderByWithRelationInput> = z.object({
  status_id: z.lazy(() => SortOrderSchema).optional(),
  status_name: z.lazy(() => SortOrderSchema).optional(),
  device: z.lazy(() => deviceOrderByRelationAggregateInputSchema).optional()
}).strict();

export const device_statusWhereUniqueInputSchema: z.ZodType<Prisma.device_statusWhereUniqueInput> = z.object({
  status_id: z.coerce.number()
})
.and(z.object({
  status_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => device_statusWhereInputSchema),z.lazy(() => device_statusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_statusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_statusWhereInputSchema),z.lazy(() => device_statusWhereInputSchema).array() ]).optional(),
  status_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  device: z.lazy(() => DeviceListRelationFilterSchema).optional()
}).strict());

export const device_statusOrderByWithAggregationInputSchema: z.ZodType<Prisma.device_statusOrderByWithAggregationInput> = z.object({
  status_id: z.lazy(() => SortOrderSchema).optional(),
  status_name: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => device_statusCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => device_statusAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => device_statusMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => device_statusMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => device_statusSumOrderByAggregateInputSchema).optional()
}).strict();

export const device_statusScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.device_statusScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => device_statusScalarWhereWithAggregatesInputSchema),z.lazy(() => device_statusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_statusScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_statusScalarWhereWithAggregatesInputSchema),z.lazy(() => device_statusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  status_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  status_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const inspection_approvalWhereInputSchema: z.ZodType<Prisma.inspection_approvalWhereInput> = z.object({
  AND: z.union([ z.lazy(() => inspection_approvalWhereInputSchema),z.lazy(() => inspection_approvalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => inspection_approvalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => inspection_approvalWhereInputSchema),z.lazy(() => inspection_approvalWhereInputSchema).array() ]).optional(),
  approval_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  requester_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  request_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  approver_role_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  device_inspection_log_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approver_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approved_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_approved: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approval_role: z.union([ z.lazy(() => Approval_roleNullableRelationFilterSchema),z.lazy(() => approval_roleWhereInputSchema) ]).optional().nullable(),
  device_inspection_log: z.union([ z.lazy(() => Device_inspection_logRelationFilterSchema),z.lazy(() => device_inspection_logWhereInputSchema) ]).optional(),
  user_inspection_approval_approver_idTouser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional().nullable(),
  user_inspection_approval_requester_idTouser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict();

export const inspection_approvalOrderByWithRelationInputSchema: z.ZodType<Prisma.inspection_approvalOrderByWithRelationInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  request_at: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approved_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_approved: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approval_role: z.lazy(() => approval_roleOrderByWithRelationInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logOrderByWithRelationInputSchema).optional(),
  user_inspection_approval_approver_idTouser: z.lazy(() => userOrderByWithRelationInputSchema).optional(),
  user_inspection_approval_requester_idTouser: z.lazy(() => userOrderByWithRelationInputSchema).optional()
}).strict();

export const inspection_approvalWhereUniqueInputSchema: z.ZodType<Prisma.inspection_approvalWhereUniqueInput> = z.object({
  approval_id: z.coerce.number()
})
.and(z.object({
  approval_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => inspection_approvalWhereInputSchema),z.lazy(() => inspection_approvalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => inspection_approvalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => inspection_approvalWhereInputSchema),z.lazy(() => inspection_approvalWhereInputSchema).array() ]).optional(),
  requester_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  request_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  approver_role_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  device_inspection_log_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  approver_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  approved_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_approved: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  approval_role: z.union([ z.lazy(() => Approval_roleNullableRelationFilterSchema),z.lazy(() => approval_roleWhereInputSchema) ]).optional().nullable(),
  device_inspection_log: z.union([ z.lazy(() => Device_inspection_logRelationFilterSchema),z.lazy(() => device_inspection_logWhereInputSchema) ]).optional(),
  user_inspection_approval_approver_idTouser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional().nullable(),
  user_inspection_approval_requester_idTouser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict());

export const inspection_approvalOrderByWithAggregationInputSchema: z.ZodType<Prisma.inspection_approvalOrderByWithAggregationInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  request_at: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approved_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_approved: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => inspection_approvalCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => inspection_approvalAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => inspection_approvalMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => inspection_approvalMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => inspection_approvalSumOrderByAggregateInputSchema).optional()
}).strict();

export const inspection_approvalScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.inspection_approvalScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => inspection_approvalScalarWhereWithAggregatesInputSchema),z.lazy(() => inspection_approvalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => inspection_approvalScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => inspection_approvalScalarWhereWithAggregatesInputSchema),z.lazy(() => inspection_approvalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  approval_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  requester_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  request_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  approver_role_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  device_inspection_log_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  approver_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  approved_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_approved: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const locationWhereInputSchema: z.ZodType<Prisma.locationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => locationWhereInputSchema),z.lazy(() => locationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => locationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => locationWhereInputSchema),z.lazy(() => locationWhereInputSchema).array() ]).optional(),
  location_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  location_type: z.union([ z.lazy(() => Enumlocation_location_typeFilterSchema),z.lazy(() => location_location_typeSchema) ]).optional(),
  warehouse_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  client_branch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  device_location_log: z.lazy(() => Device_location_logListRelationFilterSchema).optional(),
  client_branch: z.union([ z.lazy(() => Client_branchNullableRelationFilterSchema),z.lazy(() => client_branchWhereInputSchema) ]).optional().nullable(),
  warehouse: z.union([ z.lazy(() => WarehouseNullableRelationFilterSchema),z.lazy(() => warehouseWhereInputSchema) ]).optional().nullable(),
}).strict();

export const locationOrderByWithRelationInputSchema: z.ZodType<Prisma.locationOrderByWithRelationInput> = z.object({
  location_id: z.lazy(() => SortOrderSchema).optional(),
  location_type: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client_branch_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalOrderByRelationAggregateInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalOrderByRelationAggregateInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logOrderByRelationAggregateInputSchema).optional(),
  client_branch: z.lazy(() => client_branchOrderByWithRelationInputSchema).optional(),
  warehouse: z.lazy(() => warehouseOrderByWithRelationInputSchema).optional()
}).strict();

export const locationWhereUniqueInputSchema: z.ZodType<Prisma.locationWhereUniqueInput> = z.object({
  location_id: z.coerce.number()
})
.and(z.object({
  location_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => locationWhereInputSchema),z.lazy(() => locationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => locationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => locationWhereInputSchema),z.lazy(() => locationWhereInputSchema).array() ]).optional(),
  location_type: z.union([ z.lazy(() => Enumlocation_location_typeFilterSchema),z.lazy(() => location_location_typeSchema) ]).optional(),
  warehouse_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  client_branch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  device_location_log: z.lazy(() => Device_location_logListRelationFilterSchema).optional(),
  client_branch: z.union([ z.lazy(() => Client_branchNullableRelationFilterSchema),z.lazy(() => client_branchWhereInputSchema) ]).optional().nullable(),
  warehouse: z.union([ z.lazy(() => WarehouseNullableRelationFilterSchema),z.lazy(() => warehouseWhereInputSchema) ]).optional().nullable(),
}).strict());

export const locationOrderByWithAggregationInputSchema: z.ZodType<Prisma.locationOrderByWithAggregationInput> = z.object({
  location_id: z.lazy(() => SortOrderSchema).optional(),
  location_type: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client_branch_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => locationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => locationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => locationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => locationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => locationSumOrderByAggregateInputSchema).optional()
}).strict();

export const locationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.locationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => locationScalarWhereWithAggregatesInputSchema),z.lazy(() => locationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => locationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => locationScalarWhereWithAggregatesInputSchema),z.lazy(() => locationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  location_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  location_type: z.union([ z.lazy(() => Enumlocation_location_typeWithAggregatesFilterSchema),z.lazy(() => location_location_typeSchema) ]).optional(),
  warehouse_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  client_branch_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const option_modelWhereInputSchema: z.ZodType<Prisma.option_modelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => option_modelWhereInputSchema),z.lazy(() => option_modelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => option_modelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => option_modelWhereInputSchema),z.lazy(() => option_modelWhereInputSchema).array() ]).optional(),
  option_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  option_model_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  option_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  device_option: z.lazy(() => Device_optionListRelationFilterSchema).optional(),
  device_option_compatibility: z.lazy(() => Device_option_compatibilityListRelationFilterSchema).optional()
}).strict();

export const option_modelOrderByWithRelationInputSchema: z.ZodType<Prisma.option_modelOrderByWithRelationInput> = z.object({
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_name: z.lazy(() => SortOrderSchema).optional(),
  option_type: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  device_option: z.lazy(() => device_optionOrderByRelationAggregateInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityOrderByRelationAggregateInputSchema).optional()
}).strict();

export const option_modelWhereUniqueInputSchema: z.ZodType<Prisma.option_modelWhereUniqueInput> = z.object({
  option_model_id: z.coerce.number()
})
.and(z.object({
  option_model_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => option_modelWhereInputSchema),z.lazy(() => option_modelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => option_modelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => option_modelWhereInputSchema),z.lazy(() => option_modelWhereInputSchema).array() ]).optional(),
  option_model_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  option_type: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  device_option: z.lazy(() => Device_optionListRelationFilterSchema).optional(),
  device_option_compatibility: z.lazy(() => Device_option_compatibilityListRelationFilterSchema).optional()
}).strict());

export const option_modelOrderByWithAggregationInputSchema: z.ZodType<Prisma.option_modelOrderByWithAggregationInput> = z.object({
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_name: z.lazy(() => SortOrderSchema).optional(),
  option_type: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => option_modelCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => option_modelAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => option_modelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => option_modelMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => option_modelSumOrderByAggregateInputSchema).optional()
}).strict();

export const option_modelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.option_modelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => option_modelScalarWhereWithAggregatesInputSchema),z.lazy(() => option_modelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => option_modelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => option_modelScalarWhereWithAggregatesInputSchema),z.lazy(() => option_modelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  option_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  option_model_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  option_type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const sidoWhereInputSchema: z.ZodType<Prisma.sidoWhereInput> = z.object({
  AND: z.union([ z.lazy(() => sidoWhereInputSchema),z.lazy(() => sidoWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sidoWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sidoWhereInputSchema),z.lazy(() => sidoWhereInputSchema).array() ]).optional(),
  sido_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sido_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sigungu: z.lazy(() => SigunguListRelationFilterSchema).optional()
}).strict();

export const sidoOrderByWithRelationInputSchema: z.ZodType<Prisma.sidoOrderByWithRelationInput> = z.object({
  sido_id: z.lazy(() => SortOrderSchema).optional(),
  sido_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sigungu: z.lazy(() => sigunguOrderByRelationAggregateInputSchema).optional()
}).strict();

export const sidoWhereUniqueInputSchema: z.ZodType<Prisma.sidoWhereUniqueInput> = z.object({
  sido_id: z.coerce.number()
})
.and(z.object({
  sido_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => sidoWhereInputSchema),z.lazy(() => sidoWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sidoWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sidoWhereInputSchema),z.lazy(() => sidoWhereInputSchema).array() ]).optional(),
  sido_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  sigungu: z.lazy(() => SigunguListRelationFilterSchema).optional()
}).strict());

export const sidoOrderByWithAggregationInputSchema: z.ZodType<Prisma.sidoOrderByWithAggregationInput> = z.object({
  sido_id: z.lazy(() => SortOrderSchema).optional(),
  sido_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => sidoCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => sidoAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => sidoMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => sidoMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => sidoSumOrderByAggregateInputSchema).optional()
}).strict();

export const sidoScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.sidoScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => sidoScalarWhereWithAggregatesInputSchema),z.lazy(() => sidoScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => sidoScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sidoScalarWhereWithAggregatesInputSchema),z.lazy(() => sidoScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  sido_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  sido_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const sigunguWhereInputSchema: z.ZodType<Prisma.sigunguWhereInput> = z.object({
  AND: z.union([ z.lazy(() => sigunguWhereInputSchema),z.lazy(() => sigunguWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sigunguWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sigunguWhereInputSchema),z.lazy(() => sigunguWhereInputSchema).array() ]).optional(),
  sigungu_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sigungu_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sido_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_branch: z.lazy(() => Client_branchListRelationFilterSchema).optional(),
  sido: z.union([ z.lazy(() => SidoRelationFilterSchema),z.lazy(() => sidoWhereInputSchema) ]).optional(),
}).strict();

export const sigunguOrderByWithRelationInputSchema: z.ZodType<Prisma.sigunguOrderByWithRelationInput> = z.object({
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_name: z.lazy(() => SortOrderSchema).optional(),
  sido_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch: z.lazy(() => client_branchOrderByRelationAggregateInputSchema).optional(),
  sido: z.lazy(() => sidoOrderByWithRelationInputSchema).optional()
}).strict();

export const sigunguWhereUniqueInputSchema: z.ZodType<Prisma.sigunguWhereUniqueInput> = z.object({
  sigungu_id: z.coerce.number()
})
.and(z.object({
  sigungu_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => sigunguWhereInputSchema),z.lazy(() => sigunguWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sigunguWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sigunguWhereInputSchema),z.lazy(() => sigunguWhereInputSchema).array() ]).optional(),
  sigungu_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  sido_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  client_branch: z.lazy(() => Client_branchListRelationFilterSchema).optional(),
  sido: z.union([ z.lazy(() => SidoRelationFilterSchema),z.lazy(() => sidoWhereInputSchema) ]).optional(),
}).strict());

export const sigunguOrderByWithAggregationInputSchema: z.ZodType<Prisma.sigunguOrderByWithAggregationInput> = z.object({
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_name: z.lazy(() => SortOrderSchema).optional(),
  sido_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => sigunguCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => sigunguAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => sigunguMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => sigunguMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => sigunguSumOrderByAggregateInputSchema).optional()
}).strict();

export const sigunguScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.sigunguScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => sigunguScalarWhereWithAggregatesInputSchema),z.lazy(() => sigunguScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => sigunguScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sigunguScalarWhereWithAggregatesInputSchema),z.lazy(() => sigunguScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  sigungu_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  sigungu_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sido_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const userWhereInputSchema: z.ZodType<Prisma.userWhereInput> = z.object({
  AND: z.union([ z.lazy(() => userWhereInputSchema),z.lazy(() => userWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => userWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => userWhereInputSchema),z.lazy(() => userWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  user_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  login_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mobile_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  office_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  modified_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approval_role_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  position_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  permission: z.union([ z.lazy(() => Enumuser_permissionFilterSchema),z.lazy(() => user_permissionSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => CallListRelationFilterSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => CallListRelationFilterSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  device_inspection_log: z.lazy(() => Device_inspection_logListRelationFilterSchema).optional(),
  device_install_info: z.lazy(() => Device_install_infoListRelationFilterSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => Inspection_approvalListRelationFilterSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => Inspection_approvalListRelationFilterSchema).optional(),
  approval_role: z.union([ z.lazy(() => Approval_roleNullableRelationFilterSchema),z.lazy(() => approval_roleWhereInputSchema) ]).optional().nullable(),
  dept: z.union([ z.lazy(() => DeptRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional(),
  user_position: z.union([ z.lazy(() => User_positionRelationFilterSchema),z.lazy(() => user_positionWhereInputSchema) ]).optional(),
  user_role_assignment: z.lazy(() => User_role_assignmentListRelationFilterSchema).optional()
}).strict();

export const userOrderByWithRelationInputSchema: z.ZodType<Prisma.userOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_name: z.lazy(() => SortOrderSchema).optional(),
  login_id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  mobile_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  office_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  modified_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callOrderByRelationAggregateInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callOrderByRelationAggregateInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalOrderByRelationAggregateInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalOrderByRelationAggregateInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logOrderByRelationAggregateInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoOrderByRelationAggregateInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalOrderByRelationAggregateInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalOrderByRelationAggregateInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleOrderByWithRelationInputSchema).optional(),
  dept: z.lazy(() => deptOrderByWithRelationInputSchema).optional(),
  user_position: z.lazy(() => user_positionOrderByWithRelationInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const userWhereUniqueInputSchema: z.ZodType<Prisma.userWhereUniqueInput> = z.union([
  z.object({
    user_id: z.coerce.number(),
    login_id: z.string().max(45)
  }),
  z.object({
    user_id: z.coerce.number(),
  }),
  z.object({
    login_id: z.string().max(45),
  }),
])
.and(z.object({
  user_id: z.coerce.number().optional(),
  login_id: z.string().max(45).optional(),
  AND: z.union([ z.lazy(() => userWhereInputSchema),z.lazy(() => userWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => userWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => userWhereInputSchema),z.lazy(() => userWhereInputSchema).array() ]).optional(),
  user_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string().max(50) ]).optional(),
  mobile_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(20).nullable() ]).optional().nullable(),
  office_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(20).nullable() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  modified_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  dept_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  approval_role_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  position_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(1) ]).optional(),
  permission: z.union([ z.lazy(() => Enumuser_permissionFilterSchema),z.lazy(() => user_permissionSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => CallListRelationFilterSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => CallListRelationFilterSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => Device_approvalListRelationFilterSchema).optional(),
  device_inspection_log: z.lazy(() => Device_inspection_logListRelationFilterSchema).optional(),
  device_install_info: z.lazy(() => Device_install_infoListRelationFilterSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => Inspection_approvalListRelationFilterSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => Inspection_approvalListRelationFilterSchema).optional(),
  approval_role: z.union([ z.lazy(() => Approval_roleNullableRelationFilterSchema),z.lazy(() => approval_roleWhereInputSchema) ]).optional().nullable(),
  dept: z.union([ z.lazy(() => DeptRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional(),
  user_position: z.union([ z.lazy(() => User_positionRelationFilterSchema),z.lazy(() => user_positionWhereInputSchema) ]).optional(),
  user_role_assignment: z.lazy(() => User_role_assignmentListRelationFilterSchema).optional()
}).strict());

export const userOrderByWithAggregationInputSchema: z.ZodType<Prisma.userOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_name: z.lazy(() => SortOrderSchema).optional(),
  login_id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  mobile_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  office_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  modified_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => userCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => userAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => userMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => userMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => userSumOrderByAggregateInputSchema).optional()
}).strict();

export const userScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.userScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => userScalarWhereWithAggregatesInputSchema),z.lazy(() => userScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => userScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => userScalarWhereWithAggregatesInputSchema),z.lazy(() => userScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  user_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  login_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mobile_num: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  office_num: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  modified_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  approval_role_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  position_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  is_active: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  permission: z.union([ z.lazy(() => Enumuser_permissionWithAggregatesFilterSchema),z.lazy(() => user_permissionSchema) ]).optional(),
}).strict();

export const user_positionWhereInputSchema: z.ZodType<Prisma.user_positionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => user_positionWhereInputSchema),z.lazy(() => user_positionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => user_positionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => user_positionWhereInputSchema),z.lazy(() => user_positionWhereInputSchema).array() ]).optional(),
  user_position_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  position_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict();

export const user_positionOrderByWithRelationInputSchema: z.ZodType<Prisma.user_positionOrderByWithRelationInput> = z.object({
  user_position_id: z.lazy(() => SortOrderSchema).optional(),
  position_name: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => userOrderByRelationAggregateInputSchema).optional()
}).strict();

export const user_positionWhereUniqueInputSchema: z.ZodType<Prisma.user_positionWhereUniqueInput> = z.object({
  user_position_id: z.coerce.number()
})
.and(z.object({
  user_position_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => user_positionWhereInputSchema),z.lazy(() => user_positionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => user_positionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => user_positionWhereInputSchema),z.lazy(() => user_positionWhereInputSchema).array() ]).optional(),
  position_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  user: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict());

export const user_positionOrderByWithAggregationInputSchema: z.ZodType<Prisma.user_positionOrderByWithAggregationInput> = z.object({
  user_position_id: z.lazy(() => SortOrderSchema).optional(),
  position_name: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => user_positionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => user_positionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => user_positionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => user_positionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => user_positionSumOrderByAggregateInputSchema).optional()
}).strict();

export const user_positionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.user_positionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => user_positionScalarWhereWithAggregatesInputSchema),z.lazy(() => user_positionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => user_positionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => user_positionScalarWhereWithAggregatesInputSchema),z.lazy(() => user_positionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_position_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  position_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const user_role_assignmentWhereInputSchema: z.ZodType<Prisma.user_role_assignmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => user_role_assignmentWhereInputSchema),z.lazy(() => user_role_assignmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => user_role_assignmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => user_role_assignmentWhereInputSchema),z.lazy(() => user_role_assignmentWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approver_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approval_role: z.union([ z.lazy(() => Approval_roleRelationFilterSchema),z.lazy(() => approval_roleWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict();

export const user_role_assignmentOrderByWithRelationInputSchema: z.ZodType<Prisma.user_role_assignmentOrderByWithRelationInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role: z.lazy(() => approval_roleOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => userOrderByWithRelationInputSchema).optional()
}).strict();

export const user_role_assignmentWhereUniqueInputSchema: z.ZodType<Prisma.user_role_assignmentWhereUniqueInput> = z.object({
  role_id_approver_id: z.lazy(() => user_role_assignmentRole_idApprover_idCompoundUniqueInputSchema)
})
.and(z.object({
  role_id_approver_id: z.lazy(() => user_role_assignmentRole_idApprover_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => user_role_assignmentWhereInputSchema),z.lazy(() => user_role_assignmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => user_role_assignmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => user_role_assignmentWhereInputSchema),z.lazy(() => user_role_assignmentWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  approver_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  approval_role: z.union([ z.lazy(() => Approval_roleRelationFilterSchema),z.lazy(() => approval_roleWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => userWhereInputSchema) ]).optional(),
}).strict());

export const user_role_assignmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.user_role_assignmentOrderByWithAggregationInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => user_role_assignmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => user_role_assignmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => user_role_assignmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => user_role_assignmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => user_role_assignmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const user_role_assignmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.user_role_assignmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => user_role_assignmentScalarWhereWithAggregatesInputSchema),z.lazy(() => user_role_assignmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => user_role_assignmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => user_role_assignmentScalarWhereWithAggregatesInputSchema),z.lazy(() => user_role_assignmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  approver_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const warehouseWhereInputSchema: z.ZodType<Prisma.warehouseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => warehouseWhereInputSchema),z.lazy(() => warehouseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => warehouseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => warehouseWhereInputSchema),z.lazy(() => warehouseWhereInputSchema).array() ]).optional(),
  warehouse_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  warehouse_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_option: z.lazy(() => Device_optionListRelationFilterSchema).optional(),
  location: z.lazy(() => LocationListRelationFilterSchema).optional(),
  dept: z.union([ z.lazy(() => DeptRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional(),
}).strict();

export const warehouseOrderByWithRelationInputSchema: z.ZodType<Prisma.warehouseOrderByWithRelationInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  device_option: z.lazy(() => device_optionOrderByRelationAggregateInputSchema).optional(),
  location: z.lazy(() => locationOrderByRelationAggregateInputSchema).optional(),
  dept: z.lazy(() => deptOrderByWithRelationInputSchema).optional()
}).strict();

export const warehouseWhereUniqueInputSchema: z.ZodType<Prisma.warehouseWhereUniqueInput> = z.object({
  warehouse_id: z.coerce.number()
})
.and(z.object({
  warehouse_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => warehouseWhereInputSchema),z.lazy(() => warehouseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => warehouseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => warehouseWhereInputSchema),z.lazy(() => warehouseWhereInputSchema).array() ]).optional(),
  warehouse_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  device_option: z.lazy(() => Device_optionListRelationFilterSchema).optional(),
  location: z.lazy(() => LocationListRelationFilterSchema).optional(),
  dept: z.union([ z.lazy(() => DeptRelationFilterSchema),z.lazy(() => deptWhereInputSchema) ]).optional(),
}).strict());

export const warehouseOrderByWithAggregationInputSchema: z.ZodType<Prisma.warehouseOrderByWithAggregationInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => warehouseCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => warehouseAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => warehouseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => warehouseMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => warehouseSumOrderByAggregateInputSchema).optional()
}).strict();

export const warehouseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.warehouseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => warehouseScalarWhereWithAggregatesInputSchema),z.lazy(() => warehouseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => warehouseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => warehouseScalarWhereWithAggregatesInputSchema),z.lazy(() => warehouseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  warehouse_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  warehouse_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const deleteneededWhereInputSchema: z.ZodType<Prisma.deleteneededWhereInput> = z.object({
  AND: z.union([ z.lazy(() => deleteneededWhereInputSchema),z.lazy(() => deleteneededWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => deleteneededWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deleteneededWhereInputSchema),z.lazy(() => deleteneededWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const deleteneededOrderByWithRelationInputSchema: z.ZodType<Prisma.deleteneededOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deleteneededWhereUniqueInputSchema: z.ZodType<Prisma.deleteneededWhereUniqueInput> = z.object({
  id: z.coerce.number()
})
.and(z.object({
  id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => deleteneededWhereInputSchema),z.lazy(() => deleteneededWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => deleteneededWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deleteneededWhereInputSchema),z.lazy(() => deleteneededWhereInputSchema).array() ]).optional(),
}).strict());

export const deleteneededOrderByWithAggregationInputSchema: z.ZodType<Prisma.deleteneededOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => deleteneededCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => deleteneededAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => deleteneededMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => deleteneededMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => deleteneededSumOrderByAggregateInputSchema).optional()
}).strict();

export const deleteneededScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.deleteneededScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => deleteneededScalarWhereWithAggregatesInputSchema),z.lazy(() => deleteneededScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => deleteneededScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deleteneededScalarWhereWithAggregatesInputSchema),z.lazy(() => deleteneededScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const v_clientWhereInputSchema: z.ZodType<Prisma.v_clientWhereInput> = z.object({
  AND: z.union([ z.lazy(() => v_clientWhereInputSchema),z.lazy(() => v_clientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_clientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_clientWhereInputSchema),z.lazy(() => v_clientWhereInputSchema).array() ]).optional(),
  client_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parent_client_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  parent_client_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  client_rate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  rate_detail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  branch_count: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
}).strict();

export const v_clientOrderByWithRelationInputSchema: z.ZodType<Prisma.v_clientOrderByWithRelationInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  parent_client_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client_rate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rate_detail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_clientWhereUniqueInputSchema: z.ZodType<Prisma.v_clientWhereUniqueInput> = z.object({
  client_id: z.coerce.number()
})
.and(z.object({
  client_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => v_clientWhereInputSchema),z.lazy(() => v_clientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_clientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_clientWhereInputSchema),z.lazy(() => v_clientWhereInputSchema).array() ]).optional(),
  client_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  parent_client_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.lazy(() => BigIntFilterSchema),z.coerce.number().default(0) ]).optional(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(0) ]).optional(),
  parent_client_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  client_rate: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(10).nullable() ]).optional().nullable(),
  rate_detail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  branch_count: z.union([ z.lazy(() => BigIntFilterSchema),z.coerce.number().default(0) ]).optional(),
}).strict());

export const v_clientOrderByWithAggregationInputSchema: z.ZodType<Prisma.v_clientOrderByWithAggregationInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  parent_client_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client_rate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rate_detail: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_count: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => v_clientCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => v_clientAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => v_clientMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => v_clientMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => v_clientSumOrderByAggregateInputSchema).optional()
}).strict();

export const v_clientScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.v_clientScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => v_clientScalarWhereWithAggregatesInputSchema),z.lazy(() => v_clientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_clientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_clientScalarWhereWithAggregatesInputSchema),z.lazy(() => v_clientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  client_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  client_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  parent_client_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
  is_active: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  parent_client_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  client_rate: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  rate_detail: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  branch_count: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
}).strict();

export const v_client_branchWhereInputSchema: z.ZodType<Prisma.v_client_branchWhereInput> = z.object({
  AND: z.union([ z.lazy(() => v_client_branchWhereInputSchema),z.lazy(() => v_client_branchWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_client_branchWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_client_branchWhereInputSchema),z.lazy(() => v_client_branchWhereInputSchema).array() ]).optional(),
  client_branch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_branch_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  client_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sigungu_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_branch_rate_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  branch_mgr_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  remote_support: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  push_alert: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sigungu_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sido_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const v_client_branchOrderByWithRelationInputSchema: z.ZodType<Prisma.v_client_branchOrderByWithRelationInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_office_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sigungu_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sido_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const v_client_branchWhereUniqueInputSchema: z.ZodType<Prisma.v_client_branchWhereUniqueInput> = z.object({
  client_branch_id: z.coerce.number()
})
.and(z.object({
  client_branch_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => v_client_branchWhereInputSchema),z.lazy(() => v_client_branchWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_client_branchWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_client_branchWhereInputSchema),z.lazy(() => v_client_branchWhereInputSchema).array() ]).optional(),
  client_branch_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  client_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  sigungu_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  client_branch_rate_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  branch_mgr_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  branch_mgr_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(1) ]).optional(),
  remote_support: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(0) ]).optional(),
  push_alert: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(0) ]).optional(),
  client_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  sigungu_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  sido_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
}).strict());

export const v_client_branchOrderByWithAggregationInputSchema: z.ZodType<Prisma.v_client_branchOrderByWithAggregationInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_office_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  branch_mgr_email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sigungu_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sido_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => v_client_branchCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => v_client_branchAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => v_client_branchMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => v_client_branchMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => v_client_branchSumOrderByAggregateInputSchema).optional()
}).strict();

export const v_client_branchScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.v_client_branchScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => v_client_branchScalarWhereWithAggregatesInputSchema),z.lazy(() => v_client_branchScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_client_branchScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_client_branchScalarWhereWithAggregatesInputSchema),z.lazy(() => v_client_branchScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  client_branch_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  client_branch_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  client_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  sigungu_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  client_branch_rate_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  branch_mgr_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  remote_support: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  push_alert: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  client_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sigungu_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sido_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const v_consumable_modelWhereInputSchema: z.ZodType<Prisma.v_consumable_modelWhereInput> = z.object({
  AND: z.union([ z.lazy(() => v_consumable_modelWhereInputSchema),z.lazy(() => v_consumable_modelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_consumable_modelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_consumable_modelWhereInputSchema),z.lazy(() => v_consumable_modelWhereInputSchema).array() ]).optional(),
  compatibility_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  consumable_model_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  consumable_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  consumable_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  model_manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  model_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  device_model_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const v_consumable_modelOrderByWithRelationInputSchema: z.ZodType<Prisma.v_consumable_modelOrderByWithRelationInput> = z.object({
  compatibility_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  consumable_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  consumable_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  model_manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  model_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device_model_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const v_consumable_modelWhereUniqueInputSchema: z.ZodType<Prisma.v_consumable_modelWhereUniqueInput> = z.object({
  compatibility_id: z.string().max(23)
})
.and(z.object({
  compatibility_id: z.string().max(23).optional(),
  AND: z.union([ z.lazy(() => v_consumable_modelWhereInputSchema),z.lazy(() => v_consumable_modelWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_consumable_modelWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_consumable_modelWhereInputSchema),z.lazy(() => v_consumable_modelWhereInputSchema).array() ]).optional(),
  consumable_model_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  consumable_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  consumable_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  model_manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  model_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  device_model_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
}).strict());

export const v_consumable_modelOrderByWithAggregationInputSchema: z.ZodType<Prisma.v_consumable_modelOrderByWithAggregationInput> = z.object({
  compatibility_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  consumable_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  consumable_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  model_manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  model_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  device_model_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => v_consumable_modelCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => v_consumable_modelAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => v_consumable_modelMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => v_consumable_modelMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => v_consumable_modelSumOrderByAggregateInputSchema).optional()
}).strict();

export const v_consumable_modelScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.v_consumable_modelScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => v_consumable_modelScalarWhereWithAggregatesInputSchema),z.lazy(() => v_consumable_modelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_consumable_modelScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_consumable_modelScalarWhereWithAggregatesInputSchema),z.lazy(() => v_consumable_modelScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  compatibility_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  consumable_model_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  manufacturer: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  consumable_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  consumable_type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  model_manufacturer: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  model_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  device_model_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const v_deptWhereInputSchema: z.ZodType<Prisma.v_deptWhereInput> = z.object({
  AND: z.union([ z.lazy(() => v_deptWhereInputSchema),z.lazy(() => v_deptWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_deptWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_deptWhereInputSchema),z.lazy(() => v_deptWhereInputSchema).array() ]).optional(),
  dept_id: z.union([ z.lazy(() => BigIntFilterSchema),z.bigint() ]).optional(),
  dept_1_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dept_1: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dept_2_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dept_2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dept_3_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dept_3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const v_deptOrderByWithRelationInputSchema: z.ZodType<Prisma.v_deptOrderByWithRelationInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  dept_1_id: z.lazy(() => SortOrderSchema).optional(),
  dept_1: z.lazy(() => SortOrderSchema).optional(),
  dept_2_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dept_2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dept_3_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dept_3: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const v_deptWhereUniqueInputSchema: z.ZodType<Prisma.v_deptWhereUniqueInput> = z.object({
  dept_id: z.coerce.number()
})
.and(z.object({
  dept_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => v_deptWhereInputSchema),z.lazy(() => v_deptWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_deptWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_deptWhereInputSchema),z.lazy(() => v_deptWhereInputSchema).array() ]).optional(),
  dept_1_id: z.union([ z.lazy(() => StringFilterSchema),z.string().max(20) ]).optional(),
  dept_1: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  dept_2_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(20).nullable() ]).optional().nullable(),
  dept_2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  dept_3_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(20).nullable() ]).optional().nullable(),
  dept_3: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
}).strict());

export const v_deptOrderByWithAggregationInputSchema: z.ZodType<Prisma.v_deptOrderByWithAggregationInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  dept_1_id: z.lazy(() => SortOrderSchema).optional(),
  dept_1: z.lazy(() => SortOrderSchema).optional(),
  dept_2_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dept_2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dept_3_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dept_3: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => v_deptCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => v_deptAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => v_deptMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => v_deptMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => v_deptSumOrderByAggregateInputSchema).optional()
}).strict();

export const v_deptScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.v_deptScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => v_deptScalarWhereWithAggregatesInputSchema),z.lazy(() => v_deptScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_deptScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_deptScalarWhereWithAggregatesInputSchema),z.lazy(() => v_deptScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  dept_id: z.union([ z.lazy(() => BigIntWithAggregatesFilterSchema),z.bigint() ]).optional(),
  dept_1_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  dept_1: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  dept_2_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dept_2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dept_3_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dept_3: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const v_device_driverWhereInputSchema: z.ZodType<Prisma.v_device_driverWhereInput> = z.object({
  AND: z.union([ z.lazy(() => v_device_driverWhereInputSchema),z.lazy(() => v_device_driverWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_device_driverWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_device_driverWhereInputSchema),z.lazy(() => v_device_driverWhereInputSchema).array() ]).optional(),
  device_driver_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  driver_manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printer_language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  install_file_address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  model_manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  model_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  color_support: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const v_device_driverOrderByWithRelationInputSchema: z.ZodType<Prisma.v_device_driverOrderByWithRelationInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  driver_manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printer_language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  install_file_address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  model_manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  model_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  color_support: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const v_device_driverWhereUniqueInputSchema: z.ZodType<Prisma.v_device_driverWhereUniqueInput> = z.object({
  device_driver_id: z.coerce.number()
})
.and(z.object({
  device_driver_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => v_device_driverWhereInputSchema),z.lazy(() => v_device_driverWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_device_driverWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_device_driverWhereInputSchema),z.lazy(() => v_device_driverWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  driver_manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  printer_language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  install_file_address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(200).nullable() ]).optional().nullable(),
  model_manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  model_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  color_support: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
}).strict());

export const v_device_driverOrderByWithAggregationInputSchema: z.ZodType<Prisma.v_device_driverOrderByWithAggregationInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  driver_manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  printer_language: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  install_file_address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  model_manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  model_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  color_support: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => v_device_driverCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => v_device_driverAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => v_device_driverMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => v_device_driverMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => v_device_driverSumOrderByAggregateInputSchema).optional()
}).strict();

export const v_device_driverScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.v_device_driverScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => v_device_driverScalarWhereWithAggregatesInputSchema),z.lazy(() => v_device_driverScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_device_driverScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_device_driverScalarWhereWithAggregatesInputSchema),z.lazy(() => v_device_driverScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_driver_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  driver_manufacturer: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  printer_language: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  install_file_address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  model_manufacturer: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  model_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  color_support: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const v_userWhereInputSchema: z.ZodType<Prisma.v_userWhereInput> = z.object({
  AND: z.union([ z.lazy(() => v_userWhereInputSchema),z.lazy(() => v_userWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_userWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_userWhereInputSchema),z.lazy(() => v_userWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  user_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  login_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mobile_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  office_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  modified_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  permission: z.union([ z.lazy(() => Enumv_user_permissionFilterSchema),z.lazy(() => v_user_permissionSchema) ]).optional(),
  dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approval_role_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  position_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  dept_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  parent_dept_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const v_userOrderByWithRelationInputSchema: z.ZodType<Prisma.v_userOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_name: z.lazy(() => SortOrderSchema).optional(),
  login_id: z.lazy(() => SortOrderSchema).optional(),
  mobile_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  office_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  modified_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  dept_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const v_userWhereUniqueInputSchema: z.ZodType<Prisma.v_userWhereUniqueInput> = z.object({
  user_id: z.coerce.number()
})
.and(z.object({
  user_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => v_userWhereInputSchema),z.lazy(() => v_userWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_userWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_userWhereInputSchema),z.lazy(() => v_userWhereInputSchema).array() ]).optional(),
  user_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  login_id: z.union([ z.lazy(() => StringFilterSchema),z.string().max(45) ]).optional(),
  mobile_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(20).nullable() ]).optional().nullable(),
  office_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(20).nullable() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  modified_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number().default(1) ]).optional(),
  permission: z.union([ z.lazy(() => Enumv_user_permissionFilterSchema),z.lazy(() => v_user_permissionSchema) ]).optional(),
  dept_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  approval_role_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  position_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  dept_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  parent_dept_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
}).strict());

export const v_userOrderByWithAggregationInputSchema: z.ZodType<Prisma.v_userOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_name: z.lazy(() => SortOrderSchema).optional(),
  login_id: z.lazy(() => SortOrderSchema).optional(),
  mobile_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  office_num: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  modified_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  dept_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => v_userCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => v_userAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => v_userMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => v_userMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => v_userSumOrderByAggregateInputSchema).optional()
}).strict();

export const v_userScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.v_userScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => v_userScalarWhereWithAggregatesInputSchema),z.lazy(() => v_userScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_userScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_userScalarWhereWithAggregatesInputSchema),z.lazy(() => v_userScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  user_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  login_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mobile_num: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  office_num: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  modified_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  is_active: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  permission: z.union([ z.lazy(() => Enumv_user_permissionWithAggregatesFilterSchema),z.lazy(() => v_user_permissionSchema) ]).optional(),
  dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  approval_role_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  position_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  dept_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  parent_dept_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const v_warehouseWhereInputSchema: z.ZodType<Prisma.v_warehouseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => v_warehouseWhereInputSchema),z.lazy(() => v_warehouseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_warehouseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_warehouseWhereInputSchema),z.lazy(() => v_warehouseWhereInputSchema).array() ]).optional(),
  warehouse_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  warehouse_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgmt_dept_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mgmt_parent_dept_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const v_warehouseOrderByWithRelationInputSchema: z.ZodType<Prisma.v_warehouseOrderByWithRelationInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mgmt_parent_dept_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const v_warehouseWhereUniqueInputSchema: z.ZodType<Prisma.v_warehouseWhereUniqueInput> = z.object({
  warehouse_id: z.coerce.number()
})
.and(z.object({
  warehouse_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => v_warehouseWhereInputSchema),z.lazy(() => v_warehouseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_warehouseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_warehouseWhereInputSchema),z.lazy(() => v_warehouseWhereInputSchema).array() ]).optional(),
  warehouse_name: z.union([ z.lazy(() => StringFilterSchema),z.string().max(100) ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  mgmt_dept_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  mgmt_parent_dept_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
}).strict());

export const v_warehouseOrderByWithAggregationInputSchema: z.ZodType<Prisma.v_warehouseOrderByWithAggregationInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mgmt_parent_dept_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => v_warehouseCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => v_warehouseAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => v_warehouseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => v_warehouseMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => v_warehouseSumOrderByAggregateInputSchema).optional()
}).strict();

export const v_warehouseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.v_warehouseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => v_warehouseScalarWhereWithAggregatesInputSchema),z.lazy(() => v_warehouseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_warehouseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_warehouseScalarWhereWithAggregatesInputSchema),z.lazy(() => v_warehouseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  warehouse_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  warehouse_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  mgmt_dept_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mgmt_parent_dept_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const v_deviceWhereInputSchema: z.ZodType<Prisma.v_deviceWhereInput> = z.object({
  AND: z.union([ z.lazy(() => v_deviceWhereInputSchema),z.lazy(() => v_deviceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_deviceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_deviceWhereInputSchema),z.lazy(() => v_deviceWhereInputSchema).array() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  owner_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  regi_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  mac: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  last_location_log_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  status_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  model_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  owner_dept_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mgmt_dept_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  location_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  warehouse_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  warehouse_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  client_branch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  client_branch_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  has_fax: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.bigint() ]).optional().nullable(),
  has_desk: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.bigint() ]).optional().nullable(),
  has_shelf: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.bigint() ]).optional().nullable(),
}).strict();

export const v_deviceOrderByWithRelationInputSchema: z.ZodType<Prisma.v_deviceOrderByWithRelationInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  regi_date: z.lazy(() => SortOrderSchema).optional(),
  mac: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_location_log_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  owner_dept_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mgmt_dept_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  location_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  warehouse_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  warehouse_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client_branch_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client_branch_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  has_fax: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  has_desk: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  has_shelf: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const v_deviceWhereUniqueInputSchema: z.ZodType<Prisma.v_deviceWhereUniqueInput> = z.object({
  device_id: z.coerce.number()
})
.and(z.object({
  device_id: z.coerce.number().optional(),
  AND: z.union([ z.lazy(() => v_deviceWhereInputSchema),z.lazy(() => v_deviceWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_deviceWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_deviceWhereInputSchema),z.lazy(() => v_deviceWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  owner_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringFilterSchema),z.string().max(50) ]).optional(),
  regi_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  mac: z.union([ z.lazy(() => StringFilterSchema),z.string().max(50) ]).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  last_location_log_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  status_id: z.union([ z.lazy(() => IntFilterSchema),z.coerce.number() ]).optional(),
  model_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  owner_dept_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  mgmt_dept_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  location_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  warehouse_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  warehouse_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  client_branch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  client_branch_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(100).nullable() ]).optional().nullable(),
  status_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string().max(45).nullable() ]).optional().nullable(),
  has_fax: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  has_desk: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
  has_shelf: z.union([ z.lazy(() => BigIntNullableFilterSchema),z.coerce.number().nullable() ]).optional().nullable(),
}).strict());

export const v_deviceOrderByWithAggregationInputSchema: z.ZodType<Prisma.v_deviceOrderByWithAggregationInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  regi_date: z.lazy(() => SortOrderSchema).optional(),
  mac: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_location_log_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  manufacturer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  owner_dept_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mgmt_dept_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  location_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  warehouse_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  warehouse_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client_branch_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  client_branch_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  has_fax: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  has_desk: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  has_shelf: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => v_deviceCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => v_deviceAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => v_deviceMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => v_deviceMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => v_deviceSumOrderByAggregateInputSchema).optional()
}).strict();

export const v_deviceScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.v_deviceScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => v_deviceScalarWhereWithAggregatesInputSchema),z.lazy(() => v_deviceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => v_deviceScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => v_deviceScalarWhereWithAggregatesInputSchema),z.lazy(() => v_deviceScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  device_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  owner_dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  regi_date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  mac: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  last_location_log_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  status_id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  model_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  manufacturer: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  owner_dept_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mgmt_dept_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  location_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  warehouse_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  warehouse_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  client_branch_id: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  client_branch_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  has_fax: z.union([ z.lazy(() => BigIntNullableWithAggregatesFilterSchema),z.bigint() ]).optional().nullable(),
  has_desk: z.union([ z.lazy(() => BigIntNullableWithAggregatesFilterSchema),z.bigint() ]).optional().nullable(),
  has_shelf: z.union([ z.lazy(() => BigIntNullableWithAggregatesFilterSchema),z.bigint() ]).optional().nullable(),
}).strict();

export const approval_roleCreateInputSchema: z.ZodType<Prisma.approval_roleCreateInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutOther_approval_roleInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleUncheckedCreateInputSchema: z.ZodType<Prisma.approval_roleUncheckedCreateInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  upper_role_id: z.coerce.number().nullable().optional().nullable(),
  other_approval_role: z.lazy(() => approval_roleUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleUpdateInputSchema: z.ZodType<Prisma.approval_roleUpdateInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutOther_approval_roleNestedInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const approval_roleUncheckedUpdateInputSchema: z.ZodType<Prisma.approval_roleUncheckedUpdateInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  upper_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_approval_role: z.lazy(() => approval_roleUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const approval_roleCreateManyInputSchema: z.ZodType<Prisma.approval_roleCreateManyInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  upper_role_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const approval_roleUpdateManyMutationInputSchema: z.ZodType<Prisma.approval_roleUpdateManyMutationInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const approval_roleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.approval_roleUncheckedUpdateManyInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  upper_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const callCreateInputSchema: z.ZodType<Prisma.callCreateInput> = z.object({
  call_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  transferred_at: z.coerce.date().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  call_type: z.lazy(() => call_typeCreateNestedOneWithoutCallInputSchema),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutCallInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutCallInputSchema).optional(),
  device: z.lazy(() => deviceCreateNestedOneWithoutCallInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_receiver_idTouserInputSchema),
  user_call_assigner_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_assigner_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callUncheckedCreateInputSchema: z.ZodType<Prisma.callUncheckedCreateInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callUpdateInputSchema: z.ZodType<Prisma.callUpdateInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  call_type: z.lazy(() => call_typeUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutCallNestedInputSchema).optional(),
  device: z.lazy(() => deviceUpdateOneWithoutCallNestedInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userUpdateOneRequiredWithoutCall_call_receiver_idTouserNestedInputSchema).optional(),
  user_call_assigner_idTouser: z.lazy(() => userUpdateOneWithoutCall_call_assigner_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateInputSchema: z.ZodType<Prisma.callUncheckedUpdateInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callCreateManyInputSchema: z.ZodType<Prisma.callCreateManyInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable()
}).strict();

export const callUpdateManyMutationInputSchema: z.ZodType<Prisma.callUpdateManyMutationInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const callUncheckedUpdateManyInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const call_typeCreateInputSchema: z.ZodType<Prisma.call_typeCreateInput> = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutCall_typeInputSchema).optional(),
  call_type: z.lazy(() => call_typeCreateNestedOneWithoutOther_call_typeInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeCreateNestedManyWithoutCall_typeInputSchema).optional()
}).strict();

export const call_typeUncheckedCreateInputSchema: z.ZodType<Prisma.call_typeUncheckedCreateInput> = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50),
  parent_call_type_id: z.coerce.number().nullable().optional().nullable(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutCall_typeInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeUncheckedCreateNestedManyWithoutCall_typeInputSchema).optional()
}).strict();

export const call_typeUpdateInputSchema: z.ZodType<Prisma.call_typeUpdateInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutCall_typeNestedInputSchema).optional(),
  call_type: z.lazy(() => call_typeUpdateOneWithoutOther_call_typeNestedInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeUpdateManyWithoutCall_typeNestedInputSchema).optional()
}).strict();

export const call_typeUncheckedUpdateInputSchema: z.ZodType<Prisma.call_typeUncheckedUpdateInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parent_call_type_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutCall_typeNestedInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeUncheckedUpdateManyWithoutCall_typeNestedInputSchema).optional()
}).strict();

export const call_typeCreateManyInputSchema: z.ZodType<Prisma.call_typeCreateManyInput> = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50),
  parent_call_type_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const call_typeUpdateManyMutationInputSchema: z.ZodType<Prisma.call_typeUpdateManyMutationInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const call_typeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.call_typeUncheckedUpdateManyInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parent_call_type_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const clientCreateInputSchema: z.ZodType<Prisma.clientCreateInput> = z.object({
  client_id: z.coerce.number(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  client: z.lazy(() => clientCreateNestedOneWithoutOther_clientInputSchema).optional(),
  other_client: z.lazy(() => clientCreateNestedManyWithoutClientInputSchema).optional(),
  client_rate: z.lazy(() => client_rateCreateNestedOneWithoutClientInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutClientInputSchema).optional()
}).strict();

export const clientUncheckedCreateInputSchema: z.ZodType<Prisma.clientUncheckedCreateInput> = z.object({
  client_id: z.coerce.number(),
  parent_client_id: z.coerce.number().nullable().optional().nullable(),
  default_client_branch_rate_id: z.coerce.number().nullable().optional().nullable(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  other_client: z.lazy(() => clientUncheckedCreateNestedManyWithoutClientInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutClientInputSchema).optional()
}).strict();

export const clientUpdateInputSchema: z.ZodType<Prisma.clientUpdateInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.lazy(() => clientUpdateOneWithoutOther_clientNestedInputSchema).optional(),
  other_client: z.lazy(() => clientUpdateManyWithoutClientNestedInputSchema).optional(),
  client_rate: z.lazy(() => client_rateUpdateOneWithoutClientNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutClientNestedInputSchema).optional()
}).strict();

export const clientUncheckedUpdateInputSchema: z.ZodType<Prisma.clientUncheckedUpdateInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  other_client: z.lazy(() => clientUncheckedUpdateManyWithoutClientNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutClientNestedInputSchema).optional()
}).strict();

export const clientCreateManyInputSchema: z.ZodType<Prisma.clientCreateManyInput> = z.object({
  client_id: z.coerce.number(),
  parent_client_id: z.coerce.number().nullable().optional().nullable(),
  default_client_branch_rate_id: z.coerce.number().nullable().optional().nullable(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional()
}).strict();

export const clientUpdateManyMutationInputSchema: z.ZodType<Prisma.clientUpdateManyMutationInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const clientUncheckedUpdateManyInputSchema: z.ZodType<Prisma.clientUncheckedUpdateManyInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const client_branchCreateInputSchema: z.ZodType<Prisma.client_branchCreateInput> = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callCreateNestedManyWithoutClient_branchInputSchema).optional(),
  client: z.lazy(() => clientCreateNestedOneWithoutClient_branchInputSchema),
  client_rate: z.lazy(() => client_rateCreateNestedOneWithoutClient_branchInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutClient_branchInputSchema),
  sigungu: z.lazy(() => sigunguCreateNestedOneWithoutClient_branchInputSchema),
  location: z.lazy(() => locationCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchUncheckedCreateInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateInput> = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional(),
  location: z.lazy(() => locationUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchUpdateInputSchema: z.ZodType<Prisma.client_branchUpdateInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  client: z.lazy(() => clientUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  client_rate: z.lazy(() => client_rateUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  sigungu: z.lazy(() => sigunguUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchCreateManyInputSchema: z.ZodType<Prisma.client_branchCreateManyInput> = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional()
}).strict();

export const client_branchUpdateManyMutationInputSchema: z.ZodType<Prisma.client_branchUpdateManyMutationInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const client_branchUncheckedUpdateManyInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateManyInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const client_rateCreateInputSchema: z.ZodType<Prisma.client_rateCreateInput> = z.object({
  client_rate_id: z.coerce.number(),
  rate_type: z.string().max(10),
  rate_detail: z.string().max(45).nullable().optional().nullable(),
  client: z.lazy(() => clientCreateNestedManyWithoutClient_rateInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutClient_rateInputSchema).optional()
}).strict();

export const client_rateUncheckedCreateInputSchema: z.ZodType<Prisma.client_rateUncheckedCreateInput> = z.object({
  client_rate_id: z.coerce.number(),
  rate_type: z.string().max(10),
  rate_detail: z.string().max(45).nullable().optional().nullable(),
  client: z.lazy(() => clientUncheckedCreateNestedManyWithoutClient_rateInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutClient_rateInputSchema).optional()
}).strict();

export const client_rateUpdateInputSchema: z.ZodType<Prisma.client_rateUpdateInput> = z.object({
  client_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  rate_type: z.union([ z.string().max(10),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client: z.lazy(() => clientUpdateManyWithoutClient_rateNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutClient_rateNestedInputSchema).optional()
}).strict();

export const client_rateUncheckedUpdateInputSchema: z.ZodType<Prisma.client_rateUncheckedUpdateInput> = z.object({
  client_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  rate_type: z.union([ z.string().max(10),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client: z.lazy(() => clientUncheckedUpdateManyWithoutClient_rateNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutClient_rateNestedInputSchema).optional()
}).strict();

export const client_rateCreateManyInputSchema: z.ZodType<Prisma.client_rateCreateManyInput> = z.object({
  client_rate_id: z.coerce.number(),
  rate_type: z.string().max(10),
  rate_detail: z.string().max(45).nullable().optional().nullable()
}).strict();

export const client_rateUpdateManyMutationInputSchema: z.ZodType<Prisma.client_rateUpdateManyMutationInput> = z.object({
  client_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  rate_type: z.union([ z.string().max(10),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const client_rateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.client_rateUncheckedUpdateManyInput> = z.object({
  client_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  rate_type: z.union([ z.string().max(10),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const consumable_modelCreateInputSchema: z.ZodType<Prisma.consumable_modelCreateInput> = z.object({
  consumable_model_id: z.coerce.number(),
  manufacturer: z.string().max(100),
  consumable_name: z.string().max(100),
  consumable_type: z.string().max(100),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityCreateNestedManyWithoutConsumable_modelInputSchema).optional()
}).strict();

export const consumable_modelUncheckedCreateInputSchema: z.ZodType<Prisma.consumable_modelUncheckedCreateInput> = z.object({
  consumable_model_id: z.coerce.number(),
  manufacturer: z.string().max(100),
  consumable_name: z.string().max(100),
  consumable_type: z.string().max(100),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUncheckedCreateNestedManyWithoutConsumable_modelInputSchema).optional()
}).strict();

export const consumable_modelUpdateInputSchema: z.ZodType<Prisma.consumable_modelUpdateInput> = z.object({
  consumable_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_type: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUpdateManyWithoutConsumable_modelNestedInputSchema).optional()
}).strict();

export const consumable_modelUncheckedUpdateInputSchema: z.ZodType<Prisma.consumable_modelUncheckedUpdateInput> = z.object({
  consumable_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_type: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUncheckedUpdateManyWithoutConsumable_modelNestedInputSchema).optional()
}).strict();

export const consumable_modelCreateManyInputSchema: z.ZodType<Prisma.consumable_modelCreateManyInput> = z.object({
  consumable_model_id: z.coerce.number(),
  manufacturer: z.string().max(100),
  consumable_name: z.string().max(100),
  consumable_type: z.string().max(100)
}).strict();

export const consumable_modelUpdateManyMutationInputSchema: z.ZodType<Prisma.consumable_modelUpdateManyMutationInput> = z.object({
  consumable_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_type: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const consumable_modelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.consumable_modelUncheckedUpdateManyInput> = z.object({
  consumable_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_type: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deptCreateInputSchema: z.ZodType<Prisma.deptCreateInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutDeptInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutOther_deptInputSchema).optional(),
  other_dept: z.lazy(() => deptCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptUncheckedCreateInputSchema: z.ZodType<Prisma.deptUncheckedCreateInput> = z.object({
  dept_id: z.coerce.number(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptUpdateInputSchema: z.ZodType<Prisma.deptUpdateInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutDeptNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutOther_deptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUncheckedUpdateInputSchema: z.ZodType<Prisma.deptUncheckedUpdateInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptCreateManyInputSchema: z.ZodType<Prisma.deptCreateManyInput> = z.object({
  dept_id: z.coerce.number(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable(),
  dept_name: z.string().max(100)
}).strict();

export const deptUpdateManyMutationInputSchema: z.ZodType<Prisma.deptUpdateManyMutationInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deptUncheckedUpdateManyInputSchema: z.ZodType<Prisma.deptUncheckedUpdateManyInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deviceCreateInputSchema: z.ZodType<Prisma.deviceCreateInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateInputSchema: z.ZodType<Prisma.deviceUncheckedCreateInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUpdateInputSchema: z.ZodType<Prisma.deviceUpdateInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceCreateManyInputSchema: z.ZodType<Prisma.deviceCreateManyInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number()
}).strict();

export const deviceUpdateManyMutationInputSchema: z.ZodType<Prisma.deviceUpdateManyMutationInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deviceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_approvalCreateInputSchema: z.ZodType<Prisma.device_approvalCreateInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutDevice_approvalInputSchema),
  device_approval: z.lazy(() => device_approvalCreateNestedOneWithoutOther_device_approvalInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutDevice_approvalInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeCreateNestedOneWithoutDevice_approvalInputSchema),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_requester_idTouserInputSchema),
  user_device_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional()
}).strict();

export const device_approvalUncheckedCreateInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutDevice_approvalInputSchema).optional()
}).strict();

export const device_approvalUpdateInputSchema: z.ZodType<Prisma.device_approvalUpdateInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateOneWithoutOther_device_approvalNestedInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalUpdateManyWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutDevice_approval_device_approval_requester_idTouserNestedInputSchema).optional(),
  user_device_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutDevice_approval_device_approval_approver_idTouserNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approvalNestedInputSchema).optional()
}).strict();

export const device_approvalCreateManyInputSchema: z.ZodType<Prisma.device_approvalCreateManyInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_approvalUpdateManyMutationInputSchema: z.ZodType<Prisma.device_approvalUpdateManyMutationInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_approvalUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_approval_typeCreateInputSchema: z.ZodType<Prisma.device_approval_typeCreateInput> = z.object({
  approval_type_id: z.coerce.number(),
  approval_type_name: z.string().max(45),
  device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutDevice_approval_typeInputSchema).optional()
}).strict();

export const device_approval_typeUncheckedCreateInputSchema: z.ZodType<Prisma.device_approval_typeUncheckedCreateInput> = z.object({
  approval_type_id: z.coerce.number(),
  approval_type_name: z.string().max(45),
  device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutDevice_approval_typeInputSchema).optional()
}).strict();

export const device_approval_typeUpdateInputSchema: z.ZodType<Prisma.device_approval_typeUpdateInput> = z.object({
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_approval: z.lazy(() => device_approvalUpdateManyWithoutDevice_approval_typeNestedInputSchema).optional()
}).strict();

export const device_approval_typeUncheckedUpdateInputSchema: z.ZodType<Prisma.device_approval_typeUncheckedUpdateInput> = z.object({
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approval_typeNestedInputSchema).optional()
}).strict();

export const device_approval_typeCreateManyInputSchema: z.ZodType<Prisma.device_approval_typeCreateManyInput> = z.object({
  approval_type_id: z.coerce.number(),
  approval_type_name: z.string().max(45)
}).strict();

export const device_approval_typeUpdateManyMutationInputSchema: z.ZodType<Prisma.device_approval_typeUpdateManyMutationInput> = z.object({
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_approval_typeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_approval_typeUncheckedUpdateManyInput> = z.object({
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_consumable_compatibilityCreateInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateInput> = z.object({
  consumable_model: z.lazy(() => consumable_modelCreateNestedOneWithoutDevice_consumable_compatibilityInputSchema),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDevice_consumable_compatibilityInputSchema)
}).strict();

export const device_consumable_compatibilityUncheckedCreateInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedCreateInput> = z.object({
  device_model_id: z.coerce.number(),
  consumable_model_id: z.coerce.number()
}).strict();

export const device_consumable_compatibilityUpdateInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateInput> = z.object({
  consumable_model: z.lazy(() => consumable_modelUpdateOneRequiredWithoutDevice_consumable_compatibilityNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDevice_consumable_compatibilityNestedInputSchema).optional()
}).strict();

export const device_consumable_compatibilityUncheckedUpdateInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedUpdateInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_consumable_compatibilityCreateManyInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateManyInput> = z.object({
  device_model_id: z.coerce.number(),
  consumable_model_id: z.coerce.number()
}).strict();

export const device_consumable_compatibilityUpdateManyMutationInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateManyMutationInput> = z.object({
}).strict();

export const device_consumable_compatibilityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedUpdateManyInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_driverCreateInputSchema: z.ZodType<Prisma.device_driverCreateInput> = z.object({
  device_driver_id: z.coerce.number(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  printer_language: z.string().max(45).nullable().optional().nullable(),
  install_file_address: z.string().max(200).nullable().optional().nullable(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDevice_driverInputSchema)
}).strict();

export const device_driverUncheckedCreateInputSchema: z.ZodType<Prisma.device_driverUncheckedCreateInput> = z.object({
  device_driver_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  printer_language: z.string().max(45).nullable().optional().nullable(),
  install_file_address: z.string().max(200).nullable().optional().nullable()
}).strict();

export const device_driverUpdateInputSchema: z.ZodType<Prisma.device_driverUpdateInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDevice_driverNestedInputSchema).optional()
}).strict();

export const device_driverUncheckedUpdateInputSchema: z.ZodType<Prisma.device_driverUncheckedUpdateInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_driverCreateManyInputSchema: z.ZodType<Prisma.device_driverCreateManyInput> = z.object({
  device_driver_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  printer_language: z.string().max(45).nullable().optional().nullable(),
  install_file_address: z.string().max(200).nullable().optional().nullable()
}).strict();

export const device_driverUpdateManyMutationInputSchema: z.ZodType<Prisma.device_driverUpdateManyMutationInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_driverUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_driverUncheckedUpdateManyInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_inspection_logCreateInputSchema: z.ZodType<Prisma.device_inspection_logCreateInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceCreateNestedOneWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),
  user: z.lazy(() => userCreateNestedOneWithoutDevice_inspection_logInputSchema),
  call: z.lazy(() => callCreateNestedOneWithoutDevice_inspection_logInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedCreateInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedCreateInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  inspector_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  call_id: z.coerce.number().nullable().optional().nullable(),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logUpdateInputSchema: z.ZodType<Prisma.device_inspection_logUpdateInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceUpdateOneRequiredWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutDevice_inspection_logNestedInputSchema).optional(),
  call: z.lazy(() => callUpdateOneWithoutDevice_inspection_logNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedUpdateInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspector_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_inspection_logCreateManyInputSchema: z.ZodType<Prisma.device_inspection_logCreateManyInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  inspector_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  call_id: z.coerce.number().nullable().optional().nullable(),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable()
}).strict();

export const device_inspection_logUpdateManyMutationInputSchema: z.ZodType<Prisma.device_inspection_logUpdateManyMutationInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_inspection_logUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateManyInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspector_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_install_infoCreateInputSchema: z.ZodType<Prisma.device_install_infoCreateInput> = z.object({
  mgmt_num: z.string().max(50),
  ip_address: z.string().max(50).nullable().optional().nullable(),
  subnet_mask: z.string().max(50).nullable().optional().nullable(),
  gateway: z.string().max(50).nullable().optional().nullable(),
  dns1: z.string().max(50).nullable().optional().nullable(),
  dns2: z.string().max(50).nullable().optional().nullable(),
  device: z.lazy(() => deviceCreateNestedOneWithoutDevice_install_infoInputSchema),
  user: z.lazy(() => userCreateNestedOneWithoutDevice_install_infoInputSchema)
}).strict();

export const device_install_infoUncheckedCreateInputSchema: z.ZodType<Prisma.device_install_infoUncheckedCreateInput> = z.object({
  device_id: z.coerce.number(),
  installer_id: z.coerce.number(),
  mgmt_num: z.string().max(50),
  ip_address: z.string().max(50).nullable().optional().nullable(),
  subnet_mask: z.string().max(50).nullable().optional().nullable(),
  gateway: z.string().max(50).nullable().optional().nullable(),
  dns1: z.string().max(50).nullable().optional().nullable(),
  dns2: z.string().max(50).nullable().optional().nullable()
}).strict();

export const device_install_infoUpdateInputSchema: z.ZodType<Prisma.device_install_infoUpdateInput> = z.object({
  mgmt_num: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ip_address: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subnet_mask: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gateway: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns1: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns2: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.lazy(() => deviceUpdateOneRequiredWithoutDevice_install_infoNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutDevice_install_infoNestedInputSchema).optional()
}).strict();

export const device_install_infoUncheckedUpdateInputSchema: z.ZodType<Prisma.device_install_infoUncheckedUpdateInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  installer_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_num: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ip_address: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subnet_mask: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gateway: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns1: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns2: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_install_infoCreateManyInputSchema: z.ZodType<Prisma.device_install_infoCreateManyInput> = z.object({
  device_id: z.coerce.number(),
  installer_id: z.coerce.number(),
  mgmt_num: z.string().max(50),
  ip_address: z.string().max(50).nullable().optional().nullable(),
  subnet_mask: z.string().max(50).nullable().optional().nullable(),
  gateway: z.string().max(50).nullable().optional().nullable(),
  dns1: z.string().max(50).nullable().optional().nullable(),
  dns2: z.string().max(50).nullable().optional().nullable()
}).strict();

export const device_install_infoUpdateManyMutationInputSchema: z.ZodType<Prisma.device_install_infoUpdateManyMutationInput> = z.object({
  mgmt_num: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ip_address: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subnet_mask: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gateway: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns1: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns2: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_install_infoUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_install_infoUncheckedUpdateManyInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  installer_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_num: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ip_address: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subnet_mask: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gateway: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns1: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns2: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_location_logCreateInputSchema: z.ZodType<Prisma.device_location_logCreateInput> = z.object({
  device_location_log_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_detail: z.string().max(200).nullable().optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceCreateNestedManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_device_location_log_device_idTodevice: z.lazy(() => deviceCreateNestedOneWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema),
  location: z.lazy(() => locationCreateNestedOneWithoutDevice_location_logInputSchema)
}).strict();

export const device_location_logUncheckedCreateInputSchema: z.ZodType<Prisma.device_location_logUncheckedCreateInput> = z.object({
  device_location_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_id: z.coerce.number(),
  location_detail: z.string().max(200).nullable().optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).optional()
}).strict();

export const device_location_logUpdateInputSchema: z.ZodType<Prisma.device_location_logUpdateInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_device_location_log_device_idTodevice: z.lazy(() => deviceUpdateOneRequiredWithoutDevice_location_log_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateOneRequiredWithoutDevice_location_logNestedInputSchema).optional()
}).strict();

export const device_location_logUncheckedUpdateInputSchema: z.ZodType<Prisma.device_location_logUncheckedUpdateInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logNestedInputSchema).optional()
}).strict();

export const device_location_logCreateManyInputSchema: z.ZodType<Prisma.device_location_logCreateManyInput> = z.object({
  device_location_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_id: z.coerce.number(),
  location_detail: z.string().max(200).nullable().optional().nullable()
}).strict();

export const device_location_logUpdateManyMutationInputSchema: z.ZodType<Prisma.device_location_logUpdateManyMutationInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_location_logUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_location_logUncheckedUpdateManyInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_modelCreateInputSchema: z.ZodType<Prisma.device_modelCreateInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
  device: z.lazy(() => deviceCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_driver: z.lazy(() => device_driverCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityCreateNestedManyWithoutDevice_modelInputSchema).optional()
}).strict();

export const device_modelUncheckedCreateInputSchema: z.ZodType<Prisma.device_modelUncheckedCreateInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
  device: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional()
}).strict();

export const device_modelUpdateInputSchema: z.ZodType<Prisma.device_modelUpdateInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUpdateManyWithoutDevice_modelNestedInputSchema).optional()
}).strict();

export const device_modelUncheckedUpdateInputSchema: z.ZodType<Prisma.device_modelUncheckedUpdateInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional()
}).strict();

export const device_modelCreateManyInputSchema: z.ZodType<Prisma.device_modelCreateManyInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number()
}).strict();

export const device_modelUpdateManyMutationInputSchema: z.ZodType<Prisma.device_modelUpdateManyMutationInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_modelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_modelUncheckedUpdateManyInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_optionCreateInputSchema: z.ZodType<Prisma.device_optionCreateInput> = z.object({
  device_option_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  device: z.lazy(() => deviceCreateNestedOneWithoutDevice_optionInputSchema).optional(),
  option_model: z.lazy(() => option_modelCreateNestedOneWithoutDevice_optionInputSchema),
  warehouse: z.lazy(() => warehouseCreateNestedOneWithoutDevice_optionInputSchema).optional()
}).strict();

export const device_optionUncheckedCreateInputSchema: z.ZodType<Prisma.device_optionUncheckedCreateInput> = z.object({
  device_option_id: z.coerce.number(),
  option_model_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  location_warehouse_id: z.coerce.number().nullable().optional().nullable(),
  location_device_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_optionUpdateInputSchema: z.ZodType<Prisma.device_optionUpdateInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUpdateOneWithoutDevice_optionNestedInputSchema).optional(),
  option_model: z.lazy(() => option_modelUpdateOneRequiredWithoutDevice_optionNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateOneWithoutDevice_optionNestedInputSchema).optional()
}).strict();

export const device_optionUncheckedUpdateInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  location_warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location_device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_optionCreateManyInputSchema: z.ZodType<Prisma.device_optionCreateManyInput> = z.object({
  device_option_id: z.coerce.number(),
  option_model_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  location_warehouse_id: z.coerce.number().nullable().optional().nullable(),
  location_device_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_optionUpdateManyMutationInputSchema: z.ZodType<Prisma.device_optionUpdateManyMutationInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_optionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateManyInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  location_warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location_device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_option_compatibilityCreateInputSchema: z.ZodType<Prisma.device_option_compatibilityCreateInput> = z.object({
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDevice_option_compatibilityInputSchema),
  option_model: z.lazy(() => option_modelCreateNestedOneWithoutDevice_option_compatibilityInputSchema)
}).strict();

export const device_option_compatibilityUncheckedCreateInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedCreateInput> = z.object({
  device_model_id: z.coerce.number(),
  option_model_id: z.coerce.number()
}).strict();

export const device_option_compatibilityUpdateInputSchema: z.ZodType<Prisma.device_option_compatibilityUpdateInput> = z.object({
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDevice_option_compatibilityNestedInputSchema).optional(),
  option_model: z.lazy(() => option_modelUpdateOneRequiredWithoutDevice_option_compatibilityNestedInputSchema).optional()
}).strict();

export const device_option_compatibilityUncheckedUpdateInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedUpdateInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_option_compatibilityCreateManyInputSchema: z.ZodType<Prisma.device_option_compatibilityCreateManyInput> = z.object({
  device_model_id: z.coerce.number(),
  option_model_id: z.coerce.number()
}).strict();

export const device_option_compatibilityUpdateManyMutationInputSchema: z.ZodType<Prisma.device_option_compatibilityUpdateManyMutationInput> = z.object({
}).strict();

export const device_option_compatibilityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedUpdateManyInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_statusCreateInputSchema: z.ZodType<Prisma.device_statusCreateInput> = z.object({
  status_id: z.coerce.number(),
  status_name: z.string().max(45),
  device: z.lazy(() => deviceCreateNestedManyWithoutDevice_statusInputSchema).optional()
}).strict();

export const device_statusUncheckedCreateInputSchema: z.ZodType<Prisma.device_statusUncheckedCreateInput> = z.object({
  status_id: z.coerce.number(),
  status_name: z.string().max(45),
  device: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_statusInputSchema).optional()
}).strict();

export const device_statusUpdateInputSchema: z.ZodType<Prisma.device_statusUpdateInput> = z.object({
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUpdateManyWithoutDevice_statusNestedInputSchema).optional()
}).strict();

export const device_statusUncheckedUpdateInputSchema: z.ZodType<Prisma.device_statusUncheckedUpdateInput> = z.object({
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_statusNestedInputSchema).optional()
}).strict();

export const device_statusCreateManyInputSchema: z.ZodType<Prisma.device_statusCreateManyInput> = z.object({
  status_id: z.coerce.number(),
  status_name: z.string().max(45)
}).strict();

export const device_statusUpdateManyMutationInputSchema: z.ZodType<Prisma.device_statusUpdateManyMutationInput> = z.object({
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_statusUncheckedUpdateManyInputSchema: z.ZodType<Prisma.device_statusUncheckedUpdateManyInput> = z.object({
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const inspection_approvalCreateInputSchema: z.ZodType<Prisma.inspection_approvalCreateInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutInspection_approvalInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutInspection_approvalInputSchema),
  user_inspection_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema).optional(),
  user_inspection_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema)
}).strict();

export const inspection_approvalUncheckedCreateInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedCreateInput> = z.object({
  approval_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number().nullable().optional().nullable(),
  device_inspection_log_id: z.coerce.number(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const inspection_approvalUpdateInputSchema: z.ZodType<Prisma.inspection_approvalUpdateInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutInspection_approvalNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateOneRequiredWithoutInspection_approvalNestedInputSchema).optional(),
  user_inspection_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutInspection_approval_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  user_inspection_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutInspection_approval_inspection_approval_requester_idTouserNestedInputSchema).optional()
}).strict();

export const inspection_approvalUncheckedUpdateInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const inspection_approvalCreateManyInputSchema: z.ZodType<Prisma.inspection_approvalCreateManyInput> = z.object({
  approval_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number().nullable().optional().nullable(),
  device_inspection_log_id: z.coerce.number(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const inspection_approvalUpdateManyMutationInputSchema: z.ZodType<Prisma.inspection_approvalUpdateManyMutationInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const inspection_approvalUncheckedUpdateManyInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateManyInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const locationCreateInputSchema: z.ZodType<Prisma.locationCreateInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logCreateNestedManyWithoutLocationInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutLocationInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedOneWithoutLocationInputSchema).optional()
}).strict();

export const locationUncheckedCreateInputSchema: z.ZodType<Prisma.locationUncheckedCreateInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  warehouse_id: z.coerce.number().nullable().optional().nullable(),
  client_branch_id: z.coerce.number().nullable().optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutLocationInputSchema).optional()
}).strict();

export const locationUpdateInputSchema: z.ZodType<Prisma.locationUpdateInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUpdateManyWithoutLocationNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneWithoutLocationNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateOneWithoutLocationNestedInputSchema).optional()
}).strict();

export const locationUncheckedUpdateInputSchema: z.ZodType<Prisma.locationUncheckedUpdateInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUncheckedUpdateManyWithoutLocationNestedInputSchema).optional()
}).strict();

export const locationCreateManyInputSchema: z.ZodType<Prisma.locationCreateManyInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  warehouse_id: z.coerce.number().nullable().optional().nullable(),
  client_branch_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const locationUpdateManyMutationInputSchema: z.ZodType<Prisma.locationUpdateManyMutationInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const locationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.locationUncheckedUpdateManyInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const option_modelCreateInputSchema: z.ZodType<Prisma.option_modelCreateInput> = z.object({
  option_model_id: z.coerce.number(),
  option_model_name: z.string().max(100),
  option_type: z.string().max(45),
  manufacturer: z.string().max(100),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutOption_modelInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityCreateNestedManyWithoutOption_modelInputSchema).optional()
}).strict();

export const option_modelUncheckedCreateInputSchema: z.ZodType<Prisma.option_modelUncheckedCreateInput> = z.object({
  option_model_id: z.coerce.number(),
  option_model_name: z.string().max(100),
  option_type: z.string().max(45),
  manufacturer: z.string().max(100),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutOption_modelInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedCreateNestedManyWithoutOption_modelInputSchema).optional()
}).strict();

export const option_modelUpdateInputSchema: z.ZodType<Prisma.option_modelUpdateInput> = z.object({
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  option_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutOption_modelNestedInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUpdateManyWithoutOption_modelNestedInputSchema).optional()
}).strict();

export const option_modelUncheckedUpdateInputSchema: z.ZodType<Prisma.option_modelUncheckedUpdateInput> = z.object({
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  option_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutOption_modelNestedInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedUpdateManyWithoutOption_modelNestedInputSchema).optional()
}).strict();

export const option_modelCreateManyInputSchema: z.ZodType<Prisma.option_modelCreateManyInput> = z.object({
  option_model_id: z.coerce.number(),
  option_model_name: z.string().max(100),
  option_type: z.string().max(45),
  manufacturer: z.string().max(100)
}).strict();

export const option_modelUpdateManyMutationInputSchema: z.ZodType<Prisma.option_modelUpdateManyMutationInput> = z.object({
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  option_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const option_modelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.option_modelUncheckedUpdateManyInput> = z.object({
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  option_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const sidoCreateInputSchema: z.ZodType<Prisma.sidoCreateInput> = z.object({
  sido_id: z.coerce.number(),
  sido_name: z.string().max(45).nullable().optional().nullable(),
  sigungu: z.lazy(() => sigunguCreateNestedManyWithoutSidoInputSchema).optional()
}).strict();

export const sidoUncheckedCreateInputSchema: z.ZodType<Prisma.sidoUncheckedCreateInput> = z.object({
  sido_id: z.coerce.number(),
  sido_name: z.string().max(45).nullable().optional().nullable(),
  sigungu: z.lazy(() => sigunguUncheckedCreateNestedManyWithoutSidoInputSchema).optional()
}).strict();

export const sidoUpdateInputSchema: z.ZodType<Prisma.sidoUpdateInput> = z.object({
  sido_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sido_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sigungu: z.lazy(() => sigunguUpdateManyWithoutSidoNestedInputSchema).optional()
}).strict();

export const sidoUncheckedUpdateInputSchema: z.ZodType<Prisma.sidoUncheckedUpdateInput> = z.object({
  sido_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sido_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sigungu: z.lazy(() => sigunguUncheckedUpdateManyWithoutSidoNestedInputSchema).optional()
}).strict();

export const sidoCreateManyInputSchema: z.ZodType<Prisma.sidoCreateManyInput> = z.object({
  sido_id: z.coerce.number(),
  sido_name: z.string().max(45).nullable().optional().nullable()
}).strict();

export const sidoUpdateManyMutationInputSchema: z.ZodType<Prisma.sidoUpdateManyMutationInput> = z.object({
  sido_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sido_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sidoUncheckedUpdateManyInputSchema: z.ZodType<Prisma.sidoUncheckedUpdateManyInput> = z.object({
  sido_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sido_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sigunguCreateInputSchema: z.ZodType<Prisma.sigunguCreateInput> = z.object({
  sigungu_id: z.coerce.number(),
  sigungu_name: z.string().max(45),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutSigunguInputSchema).optional(),
  sido: z.lazy(() => sidoCreateNestedOneWithoutSigunguInputSchema)
}).strict();

export const sigunguUncheckedCreateInputSchema: z.ZodType<Prisma.sigunguUncheckedCreateInput> = z.object({
  sigungu_id: z.coerce.number(),
  sigungu_name: z.string().max(45),
  sido_id: z.coerce.number(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutSigunguInputSchema).optional()
}).strict();

export const sigunguUpdateInputSchema: z.ZodType<Prisma.sigunguUpdateInput> = z.object({
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutSigunguNestedInputSchema).optional(),
  sido: z.lazy(() => sidoUpdateOneRequiredWithoutSigunguNestedInputSchema).optional()
}).strict();

export const sigunguUncheckedUpdateInputSchema: z.ZodType<Prisma.sigunguUncheckedUpdateInput> = z.object({
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sido_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutSigunguNestedInputSchema).optional()
}).strict();

export const sigunguCreateManyInputSchema: z.ZodType<Prisma.sigunguCreateManyInput> = z.object({
  sigungu_id: z.coerce.number(),
  sigungu_name: z.string().max(45),
  sido_id: z.coerce.number()
}).strict();

export const sigunguUpdateManyMutationInputSchema: z.ZodType<Prisma.sigunguUpdateManyMutationInput> = z.object({
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const sigunguUncheckedUpdateManyInputSchema: z.ZodType<Prisma.sigunguUncheckedUpdateManyInput> = z.object({
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sido_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const userCreateInputSchema: z.ZodType<Prisma.userCreateInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateInputSchema: z.ZodType<Prisma.userUncheckedCreateInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUpdateInputSchema: z.ZodType<Prisma.userUpdateInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateInputSchema: z.ZodType<Prisma.userUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userCreateManyInputSchema: z.ZodType<Prisma.userCreateManyInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional()
}).strict();

export const userUpdateManyMutationInputSchema: z.ZodType<Prisma.userUpdateManyMutationInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const userUncheckedUpdateManyInputSchema: z.ZodType<Prisma.userUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const user_positionCreateInputSchema: z.ZodType<Prisma.user_positionCreateInput> = z.object({
  user_position_id: z.coerce.number(),
  position_name: z.string().max(45),
  user: z.lazy(() => userCreateNestedManyWithoutUser_positionInputSchema).optional()
}).strict();

export const user_positionUncheckedCreateInputSchema: z.ZodType<Prisma.user_positionUncheckedCreateInput> = z.object({
  user_position_id: z.coerce.number(),
  position_name: z.string().max(45),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutUser_positionInputSchema).optional()
}).strict();

export const user_positionUpdateInputSchema: z.ZodType<Prisma.user_positionUpdateInput> = z.object({
  user_position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => userUpdateManyWithoutUser_positionNestedInputSchema).optional()
}).strict();

export const user_positionUncheckedUpdateInputSchema: z.ZodType<Prisma.user_positionUncheckedUpdateInput> = z.object({
  user_position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutUser_positionNestedInputSchema).optional()
}).strict();

export const user_positionCreateManyInputSchema: z.ZodType<Prisma.user_positionCreateManyInput> = z.object({
  user_position_id: z.coerce.number(),
  position_name: z.string().max(45)
}).strict();

export const user_positionUpdateManyMutationInputSchema: z.ZodType<Prisma.user_positionUpdateManyMutationInput> = z.object({
  user_position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const user_positionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.user_positionUncheckedUpdateManyInput> = z.object({
  user_position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const user_role_assignmentCreateInputSchema: z.ZodType<Prisma.user_role_assignmentCreateInput> = z.object({
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUser_role_assignmentInputSchema),
  user: z.lazy(() => userCreateNestedOneWithoutUser_role_assignmentInputSchema)
}).strict();

export const user_role_assignmentUncheckedCreateInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedCreateInput> = z.object({
  role_id: z.coerce.number(),
  approver_id: z.coerce.number()
}).strict();

export const user_role_assignmentUpdateInputSchema: z.ZodType<Prisma.user_role_assignmentUpdateInput> = z.object({
  approval_role: z.lazy(() => approval_roleUpdateOneRequiredWithoutUser_role_assignmentNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutUser_role_assignmentNestedInputSchema).optional()
}).strict();

export const user_role_assignmentUncheckedUpdateInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedUpdateInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const user_role_assignmentCreateManyInputSchema: z.ZodType<Prisma.user_role_assignmentCreateManyInput> = z.object({
  role_id: z.coerce.number(),
  approver_id: z.coerce.number()
}).strict();

export const user_role_assignmentUpdateManyMutationInputSchema: z.ZodType<Prisma.user_role_assignmentUpdateManyMutationInput> = z.object({
}).strict();

export const user_role_assignmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedUpdateManyInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const warehouseCreateInputSchema: z.ZodType<Prisma.warehouseCreateInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutWarehouseInputSchema).optional(),
  location: z.lazy(() => locationCreateNestedManyWithoutWarehouseInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutWarehouseInputSchema)
}).strict();

export const warehouseUncheckedCreateInputSchema: z.ZodType<Prisma.warehouseUncheckedCreateInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  mgmt_dept_id: z.coerce.number(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutWarehouseInputSchema).optional(),
  location: z.lazy(() => locationUncheckedCreateNestedManyWithoutWarehouseInputSchema).optional()
}).strict();

export const warehouseUpdateInputSchema: z.ZodType<Prisma.warehouseUpdateInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutWarehouseNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateManyWithoutWarehouseNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutWarehouseNestedInputSchema).optional()
}).strict();

export const warehouseUncheckedUpdateInputSchema: z.ZodType<Prisma.warehouseUncheckedUpdateInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutWarehouseNestedInputSchema).optional(),
  location: z.lazy(() => locationUncheckedUpdateManyWithoutWarehouseNestedInputSchema).optional()
}).strict();

export const warehouseCreateManyInputSchema: z.ZodType<Prisma.warehouseCreateManyInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  mgmt_dept_id: z.coerce.number()
}).strict();

export const warehouseUpdateManyMutationInputSchema: z.ZodType<Prisma.warehouseUpdateManyMutationInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const warehouseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.warehouseUncheckedUpdateManyInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deleteneededCreateInputSchema: z.ZodType<Prisma.deleteneededCreateInput> = z.object({
  id: z.coerce.number()
}).strict();

export const deleteneededUncheckedCreateInputSchema: z.ZodType<Prisma.deleteneededUncheckedCreateInput> = z.object({
  id: z.coerce.number()
}).strict();

export const deleteneededUpdateInputSchema: z.ZodType<Prisma.deleteneededUpdateInput> = z.object({
  id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deleteneededUncheckedUpdateInputSchema: z.ZodType<Prisma.deleteneededUncheckedUpdateInput> = z.object({
  id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deleteneededCreateManyInputSchema: z.ZodType<Prisma.deleteneededCreateManyInput> = z.object({
  id: z.coerce.number()
}).strict();

export const deleteneededUpdateManyMutationInputSchema: z.ZodType<Prisma.deleteneededUpdateManyMutationInput> = z.object({
  id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deleteneededUncheckedUpdateManyInputSchema: z.ZodType<Prisma.deleteneededUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const v_clientCreateInputSchema: z.ZodType<Prisma.v_clientCreateInput> = z.object({
  client_id: z.coerce.number(),
  client_name: z.string().max(45).optional(),
  parent_client_id: z.coerce.number().nullable().optional().nullable(),
  default_client_branch_rate_id: z.coerce.number().default(0).optional(),
  is_active: z.coerce.number().default(0).optional(),
  parent_client_name: z.string().max(45).nullable().optional().nullable(),
  client_rate: z.string().max(10).nullable().optional().nullable(),
  rate_detail: z.string().max(45).nullable().optional().nullable(),
  branch_count: z.coerce.number().default(0).optional()
}).strict();

export const v_clientUncheckedCreateInputSchema: z.ZodType<Prisma.v_clientUncheckedCreateInput> = z.object({
  client_id: z.coerce.number(),
  client_name: z.string().max(45).optional(),
  parent_client_id: z.coerce.number().nullable().optional().nullable(),
  default_client_branch_rate_id: z.coerce.number().default(0).optional(),
  is_active: z.coerce.number().default(0).optional(),
  parent_client_name: z.string().max(45).nullable().optional().nullable(),
  client_rate: z.string().max(10).nullable().optional().nullable(),
  rate_detail: z.string().max(45).nullable().optional().nullable(),
  branch_count: z.coerce.number().default(0).optional()
}).strict();

export const v_clientUpdateInputSchema: z.ZodType<Prisma.v_clientUpdateInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.coerce.number().default(0),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_rate: z.union([ z.string().max(10).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_count: z.union([ z.coerce.number().default(0),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const v_clientUncheckedUpdateInputSchema: z.ZodType<Prisma.v_clientUncheckedUpdateInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.coerce.number().default(0),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_rate: z.union([ z.string().max(10).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_count: z.union([ z.coerce.number().default(0),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const v_clientCreateManyInputSchema: z.ZodType<Prisma.v_clientCreateManyInput> = z.object({
  client_id: z.coerce.number(),
  client_name: z.string().max(45).optional(),
  parent_client_id: z.coerce.number().nullable().optional().nullable(),
  default_client_branch_rate_id: z.coerce.number().default(0).optional(),
  is_active: z.coerce.number().default(0).optional(),
  parent_client_name: z.string().max(45).nullable().optional().nullable(),
  client_rate: z.string().max(10).nullable().optional().nullable(),
  rate_detail: z.string().max(45).nullable().optional().nullable(),
  branch_count: z.coerce.number().default(0).optional()
}).strict();

export const v_clientUpdateManyMutationInputSchema: z.ZodType<Prisma.v_clientUpdateManyMutationInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.coerce.number().default(0),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_rate: z.union([ z.string().max(10).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_count: z.union([ z.coerce.number().default(0),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const v_clientUncheckedUpdateManyInputSchema: z.ZodType<Prisma.v_clientUncheckedUpdateManyInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.coerce.number().default(0),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_rate: z.union([ z.string().max(10).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_count: z.union([ z.coerce.number().default(0),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const v_client_branchCreateInputSchema: z.ZodType<Prisma.v_client_branchCreateInput> = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  client_name: z.string().max(45).nullable().optional().nullable(),
  sigungu_name: z.string().max(45).nullable().optional().nullable(),
  sido_name: z.string().max(45).nullable().optional().nullable()
}).strict();

export const v_client_branchUncheckedCreateInputSchema: z.ZodType<Prisma.v_client_branchUncheckedCreateInput> = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  client_name: z.string().max(45).nullable().optional().nullable(),
  sigungu_name: z.string().max(45).nullable().optional().nullable(),
  sido_name: z.string().max(45).nullable().optional().nullable()
}).strict();

export const v_client_branchUpdateInputSchema: z.ZodType<Prisma.v_client_branchUpdateInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sigungu_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sido_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_client_branchUncheckedUpdateInputSchema: z.ZodType<Prisma.v_client_branchUncheckedUpdateInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sigungu_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sido_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_client_branchCreateManyInputSchema: z.ZodType<Prisma.v_client_branchCreateManyInput> = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  client_name: z.string().max(45).nullable().optional().nullable(),
  sigungu_name: z.string().max(45).nullable().optional().nullable(),
  sido_name: z.string().max(45).nullable().optional().nullable()
}).strict();

export const v_client_branchUpdateManyMutationInputSchema: z.ZodType<Prisma.v_client_branchUpdateManyMutationInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sigungu_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sido_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_client_branchUncheckedUpdateManyInputSchema: z.ZodType<Prisma.v_client_branchUncheckedUpdateManyInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sigungu_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sido_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_consumable_modelCreateInputSchema: z.ZodType<Prisma.v_consumable_modelCreateInput> = z.object({
  compatibility_id: z.string().max(23),
  consumable_model_id: z.coerce.number().nullable().optional().nullable(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  consumable_name: z.string().max(100).nullable().optional().nullable(),
  consumable_type: z.string().max(100).nullable().optional().nullable(),
  model_manufacturer: z.string().max(100).nullable().optional().nullable(),
  model_name: z.string().max(100).nullable().optional().nullable(),
  device_model_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_consumable_modelUncheckedCreateInputSchema: z.ZodType<Prisma.v_consumable_modelUncheckedCreateInput> = z.object({
  compatibility_id: z.string().max(23),
  consumable_model_id: z.coerce.number().nullable().optional().nullable(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  consumable_name: z.string().max(100).nullable().optional().nullable(),
  consumable_type: z.string().max(100).nullable().optional().nullable(),
  model_manufacturer: z.string().max(100).nullable().optional().nullable(),
  model_name: z.string().max(100).nullable().optional().nullable(),
  device_model_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_consumable_modelUpdateInputSchema: z.ZodType<Prisma.v_consumable_modelUpdateInput> = z.object({
  compatibility_id: z.union([ z.string().max(23),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_model_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  consumable_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  consumable_type: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_model_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_consumable_modelUncheckedUpdateInputSchema: z.ZodType<Prisma.v_consumable_modelUncheckedUpdateInput> = z.object({
  compatibility_id: z.union([ z.string().max(23),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_model_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  consumable_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  consumable_type: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_model_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_consumable_modelCreateManyInputSchema: z.ZodType<Prisma.v_consumable_modelCreateManyInput> = z.object({
  compatibility_id: z.string().max(23),
  consumable_model_id: z.coerce.number().nullable().optional().nullable(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  consumable_name: z.string().max(100).nullable().optional().nullable(),
  consumable_type: z.string().max(100).nullable().optional().nullable(),
  model_manufacturer: z.string().max(100).nullable().optional().nullable(),
  model_name: z.string().max(100).nullable().optional().nullable(),
  device_model_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_consumable_modelUpdateManyMutationInputSchema: z.ZodType<Prisma.v_consumable_modelUpdateManyMutationInput> = z.object({
  compatibility_id: z.union([ z.string().max(23),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_model_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  consumable_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  consumable_type: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_model_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_consumable_modelUncheckedUpdateManyInputSchema: z.ZodType<Prisma.v_consumable_modelUncheckedUpdateManyInput> = z.object({
  compatibility_id: z.union([ z.string().max(23),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_model_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  consumable_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  consumable_type: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_model_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_deptCreateInputSchema: z.ZodType<Prisma.v_deptCreateInput> = z.object({
  dept_id: z.coerce.number().optional(),
  dept_1_id: z.string().max(20).optional(),
  dept_1: z.string().max(100).optional(),
  dept_2_id: z.string().max(20).nullable().optional().nullable(),
  dept_2: z.string().max(100).nullable().optional().nullable(),
  dept_3_id: z.string().max(20).nullable().optional().nullable(),
  dept_3: z.string().max(100).nullable().optional().nullable()
}).strict();

export const v_deptUncheckedCreateInputSchema: z.ZodType<Prisma.v_deptUncheckedCreateInput> = z.object({
  dept_id: z.coerce.number().optional(),
  dept_1_id: z.string().max(20).optional(),
  dept_1: z.string().max(100).optional(),
  dept_2_id: z.string().max(20).nullable().optional().nullable(),
  dept_2: z.string().max(100).nullable().optional().nullable(),
  dept_3_id: z.string().max(20).nullable().optional().nullable(),
  dept_3: z.string().max(100).nullable().optional().nullable()
}).strict();

export const v_deptUpdateInputSchema: z.ZodType<Prisma.v_deptUpdateInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_1_id: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dept_1: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dept_2_id: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_2: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_3_id: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_3: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_deptUncheckedUpdateInputSchema: z.ZodType<Prisma.v_deptUncheckedUpdateInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_1_id: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dept_1: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dept_2_id: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_2: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_3_id: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_3: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_deptCreateManyInputSchema: z.ZodType<Prisma.v_deptCreateManyInput> = z.object({
  dept_id: z.coerce.number().optional(),
  dept_1_id: z.string().max(20).optional(),
  dept_1: z.string().max(100).optional(),
  dept_2_id: z.string().max(20).nullable().optional().nullable(),
  dept_2: z.string().max(100).nullable().optional().nullable(),
  dept_3_id: z.string().max(20).nullable().optional().nullable(),
  dept_3: z.string().max(100).nullable().optional().nullable()
}).strict();

export const v_deptUpdateManyMutationInputSchema: z.ZodType<Prisma.v_deptUpdateManyMutationInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_1_id: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dept_1: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dept_2_id: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_2: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_3_id: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_3: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_deptUncheckedUpdateManyInputSchema: z.ZodType<Prisma.v_deptUncheckedUpdateManyInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => BigIntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_1_id: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dept_1: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dept_2_id: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_2: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_3_id: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_3: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_device_driverCreateInputSchema: z.ZodType<Prisma.v_device_driverCreateInput> = z.object({
  device_driver_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  driver_manufacturer: z.string().max(100).nullable().optional().nullable(),
  printer_language: z.string().max(45).nullable().optional().nullable(),
  install_file_address: z.string().max(200).nullable().optional().nullable(),
  model_manufacturer: z.string().max(100).nullable().optional().nullable(),
  model_name: z.string().max(100).nullable().optional().nullable(),
  color_support: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_device_driverUncheckedCreateInputSchema: z.ZodType<Prisma.v_device_driverUncheckedCreateInput> = z.object({
  device_driver_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  driver_manufacturer: z.string().max(100).nullable().optional().nullable(),
  printer_language: z.string().max(45).nullable().optional().nullable(),
  install_file_address: z.string().max(200).nullable().optional().nullable(),
  model_manufacturer: z.string().max(100).nullable().optional().nullable(),
  model_name: z.string().max(100).nullable().optional().nullable(),
  color_support: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_device_driverUpdateInputSchema: z.ZodType<Prisma.v_device_driverUpdateInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  driver_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_device_driverUncheckedUpdateInputSchema: z.ZodType<Prisma.v_device_driverUncheckedUpdateInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  driver_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_device_driverCreateManyInputSchema: z.ZodType<Prisma.v_device_driverCreateManyInput> = z.object({
  device_driver_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  driver_manufacturer: z.string().max(100).nullable().optional().nullable(),
  printer_language: z.string().max(45).nullable().optional().nullable(),
  install_file_address: z.string().max(200).nullable().optional().nullable(),
  model_manufacturer: z.string().max(100).nullable().optional().nullable(),
  model_name: z.string().max(100).nullable().optional().nullable(),
  color_support: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_device_driverUpdateManyMutationInputSchema: z.ZodType<Prisma.v_device_driverUpdateManyMutationInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  driver_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_device_driverUncheckedUpdateManyInputSchema: z.ZodType<Prisma.v_device_driverUncheckedUpdateManyInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  driver_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_userCreateInputSchema: z.ZodType<Prisma.v_userCreateInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => v_user_permissionSchema).optional(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number(),
  position_id: z.coerce.number(),
  dept_name: z.string().max(100).nullable().optional().nullable(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_userUncheckedCreateInputSchema: z.ZodType<Prisma.v_userUncheckedCreateInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => v_user_permissionSchema).optional(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number(),
  position_id: z.coerce.number(),
  dept_name: z.string().max(100).nullable().optional().nullable(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_userUpdateInputSchema: z.ZodType<Prisma.v_userUpdateInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => v_user_permissionSchema),z.lazy(() => Enumv_user_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_userUncheckedUpdateInputSchema: z.ZodType<Prisma.v_userUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => v_user_permissionSchema),z.lazy(() => Enumv_user_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_userCreateManyInputSchema: z.ZodType<Prisma.v_userCreateManyInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => v_user_permissionSchema).optional(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number(),
  position_id: z.coerce.number(),
  dept_name: z.string().max(100).nullable().optional().nullable(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_userUpdateManyMutationInputSchema: z.ZodType<Prisma.v_userUpdateManyMutationInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => v_user_permissionSchema),z.lazy(() => Enumv_user_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_userUncheckedUpdateManyInputSchema: z.ZodType<Prisma.v_userUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => v_user_permissionSchema),z.lazy(() => Enumv_user_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_warehouseCreateInputSchema: z.ZodType<Prisma.v_warehouseCreateInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  mgmt_dept_id: z.coerce.number(),
  mgmt_dept_name: z.string().max(100).nullable().optional().nullable(),
  mgmt_parent_dept_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_warehouseUncheckedCreateInputSchema: z.ZodType<Prisma.v_warehouseUncheckedCreateInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  mgmt_dept_id: z.coerce.number(),
  mgmt_dept_name: z.string().max(100).nullable().optional().nullable(),
  mgmt_parent_dept_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_warehouseUpdateInputSchema: z.ZodType<Prisma.v_warehouseUpdateInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mgmt_parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_warehouseUncheckedUpdateInputSchema: z.ZodType<Prisma.v_warehouseUncheckedUpdateInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mgmt_parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_warehouseCreateManyInputSchema: z.ZodType<Prisma.v_warehouseCreateManyInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  mgmt_dept_id: z.coerce.number(),
  mgmt_dept_name: z.string().max(100).nullable().optional().nullable(),
  mgmt_parent_dept_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_warehouseUpdateManyMutationInputSchema: z.ZodType<Prisma.v_warehouseUpdateManyMutationInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mgmt_parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_warehouseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.v_warehouseUncheckedUpdateManyInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mgmt_parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_deviceCreateInputSchema: z.ZodType<Prisma.v_deviceCreateInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  model_name: z.string().max(100).nullable().optional().nullable(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  owner_dept_name: z.string().max(100).nullable().optional().nullable(),
  mgmt_dept_name: z.string().max(100).nullable().optional().nullable(),
  location_id: z.coerce.number().nullable().optional().nullable(),
  warehouse_id: z.coerce.number().nullable().optional().nullable(),
  warehouse_name: z.string().max(100).nullable().optional().nullable(),
  client_branch_id: z.coerce.number().nullable().optional().nullable(),
  client_branch_name: z.string().max(100).nullable().optional().nullable(),
  status_name: z.string().max(45).nullable().optional().nullable(),
  has_fax: z.coerce.number().nullable().optional().nullable(),
  has_desk: z.coerce.number().nullable().optional().nullable(),
  has_shelf: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_deviceUncheckedCreateInputSchema: z.ZodType<Prisma.v_deviceUncheckedCreateInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  model_name: z.string().max(100).nullable().optional().nullable(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  owner_dept_name: z.string().max(100).nullable().optional().nullable(),
  mgmt_dept_name: z.string().max(100).nullable().optional().nullable(),
  location_id: z.coerce.number().nullable().optional().nullable(),
  warehouse_id: z.coerce.number().nullable().optional().nullable(),
  warehouse_name: z.string().max(100).nullable().optional().nullable(),
  client_branch_id: z.coerce.number().nullable().optional().nullable(),
  client_branch_name: z.string().max(100).nullable().optional().nullable(),
  status_name: z.string().max(45).nullable().optional().nullable(),
  has_fax: z.coerce.number().nullable().optional().nullable(),
  has_desk: z.coerce.number().nullable().optional().nullable(),
  has_shelf: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_deviceUpdateInputSchema: z.ZodType<Prisma.v_deviceUpdateInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mgmt_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warehouse_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_fax: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_desk: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_shelf: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_deviceUncheckedUpdateInputSchema: z.ZodType<Prisma.v_deviceUncheckedUpdateInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mgmt_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warehouse_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_fax: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_desk: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_shelf: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_deviceCreateManyInputSchema: z.ZodType<Prisma.v_deviceCreateManyInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  model_name: z.string().max(100).nullable().optional().nullable(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  owner_dept_name: z.string().max(100).nullable().optional().nullable(),
  mgmt_dept_name: z.string().max(100).nullable().optional().nullable(),
  location_id: z.coerce.number().nullable().optional().nullable(),
  warehouse_id: z.coerce.number().nullable().optional().nullable(),
  warehouse_name: z.string().max(100).nullable().optional().nullable(),
  client_branch_id: z.coerce.number().nullable().optional().nullable(),
  client_branch_name: z.string().max(100).nullable().optional().nullable(),
  status_name: z.string().max(45).nullable().optional().nullable(),
  has_fax: z.coerce.number().nullable().optional().nullable(),
  has_desk: z.coerce.number().nullable().optional().nullable(),
  has_shelf: z.coerce.number().nullable().optional().nullable()
}).strict();

export const v_deviceUpdateManyMutationInputSchema: z.ZodType<Prisma.v_deviceUpdateManyMutationInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mgmt_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warehouse_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_fax: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_desk: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_shelf: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const v_deviceUncheckedUpdateManyInputSchema: z.ZodType<Prisma.v_deviceUncheckedUpdateManyInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  owner_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mgmt_dept_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warehouse_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_name: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_fax: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_desk: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  has_shelf: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableBigIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Approval_roleNullableRelationFilterSchema: z.ZodType<Prisma.Approval_roleNullableRelationFilter> = z.object({
  is: z.lazy(() => approval_roleWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => approval_roleWhereInputSchema).optional().nullable()
}).strict();

export const Approval_roleListRelationFilterSchema: z.ZodType<Prisma.Approval_roleListRelationFilter> = z.object({
  every: z.lazy(() => approval_roleWhereInputSchema).optional(),
  some: z.lazy(() => approval_roleWhereInputSchema).optional(),
  none: z.lazy(() => approval_roleWhereInputSchema).optional()
}).strict();

export const Device_approvalListRelationFilterSchema: z.ZodType<Prisma.Device_approvalListRelationFilter> = z.object({
  every: z.lazy(() => device_approvalWhereInputSchema).optional(),
  some: z.lazy(() => device_approvalWhereInputSchema).optional(),
  none: z.lazy(() => device_approvalWhereInputSchema).optional()
}).strict();

export const Inspection_approvalListRelationFilterSchema: z.ZodType<Prisma.Inspection_approvalListRelationFilter> = z.object({
  every: z.lazy(() => inspection_approvalWhereInputSchema).optional(),
  some: z.lazy(() => inspection_approvalWhereInputSchema).optional(),
  none: z.lazy(() => inspection_approvalWhereInputSchema).optional()
}).strict();

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> = z.object({
  every: z.lazy(() => userWhereInputSchema).optional(),
  some: z.lazy(() => userWhereInputSchema).optional(),
  none: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const User_role_assignmentListRelationFilterSchema: z.ZodType<Prisma.User_role_assignmentListRelationFilter> = z.object({
  every: z.lazy(() => user_role_assignmentWhereInputSchema).optional(),
  some: z.lazy(() => user_role_assignmentWhereInputSchema).optional(),
  none: z.lazy(() => user_role_assignmentWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const approval_roleOrderByRelationAggregateInputSchema: z.ZodType<Prisma.approval_roleOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_approvalOrderByRelationAggregateInputSchema: z.ZodType<Prisma.device_approvalOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const inspection_approvalOrderByRelationAggregateInputSchema: z.ZodType<Prisma.inspection_approvalOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userOrderByRelationAggregateInputSchema: z.ZodType<Prisma.userOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const user_role_assignmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.user_role_assignmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const approval_roleCountOrderByAggregateInputSchema: z.ZodType<Prisma.approval_roleCountOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  role_name: z.lazy(() => SortOrderSchema).optional(),
  upper_role_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const approval_roleAvgOrderByAggregateInputSchema: z.ZodType<Prisma.approval_roleAvgOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  upper_role_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const approval_roleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.approval_roleMaxOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  role_name: z.lazy(() => SortOrderSchema).optional(),
  upper_role_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const approval_roleMinOrderByAggregateInputSchema: z.ZodType<Prisma.approval_roleMinOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  role_name: z.lazy(() => SortOrderSchema).optional(),
  upper_role_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const approval_roleSumOrderByAggregateInputSchema: z.ZodType<Prisma.approval_roleSumOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  upper_role_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Call_typeRelationFilterSchema: z.ZodType<Prisma.Call_typeRelationFilter> = z.object({
  is: z.lazy(() => call_typeWhereInputSchema).optional(),
  isNot: z.lazy(() => call_typeWhereInputSchema).optional()
}).strict();

export const Client_branchRelationFilterSchema: z.ZodType<Prisma.Client_branchRelationFilter> = z.object({
  is: z.lazy(() => client_branchWhereInputSchema).optional(),
  isNot: z.lazy(() => client_branchWhereInputSchema).optional()
}).strict();

export const DeptNullableRelationFilterSchema: z.ZodType<Prisma.DeptNullableRelationFilter> = z.object({
  is: z.lazy(() => deptWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => deptWhereInputSchema).optional().nullable()
}).strict();

export const DeviceNullableRelationFilterSchema: z.ZodType<Prisma.DeviceNullableRelationFilter> = z.object({
  is: z.lazy(() => deviceWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => deviceWhereInputSchema).optional().nullable()
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => userWhereInputSchema).optional(),
  isNot: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const UserNullableRelationFilterSchema: z.ZodType<Prisma.UserNullableRelationFilter> = z.object({
  is: z.lazy(() => userWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => userWhereInputSchema).optional().nullable()
}).strict();

export const Device_inspection_logListRelationFilterSchema: z.ZodType<Prisma.Device_inspection_logListRelationFilter> = z.object({
  every: z.lazy(() => device_inspection_logWhereInputSchema).optional(),
  some: z.lazy(() => device_inspection_logWhereInputSchema).optional(),
  none: z.lazy(() => device_inspection_logWhereInputSchema).optional()
}).strict();

export const device_inspection_logOrderByRelationAggregateInputSchema: z.ZodType<Prisma.device_inspection_logOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const callCountOrderByAggregateInputSchema: z.ZodType<Prisma.callCountOrderByAggregateInput> = z.object({
  call_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  requester_name: z.lazy(() => SortOrderSchema).optional(),
  requester_num: z.lazy(() => SortOrderSchema).optional(),
  requester_black_consumer: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  detail: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  received_at: z.lazy(() => SortOrderSchema).optional(),
  receiver_id: z.lazy(() => SortOrderSchema).optional(),
  transferred_at: z.lazy(() => SortOrderSchema).optional(),
  transferred_dept_id: z.lazy(() => SortOrderSchema).optional(),
  assigner_id: z.lazy(() => SortOrderSchema).optional(),
  completed_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const callAvgOrderByAggregateInputSchema: z.ZodType<Prisma.callAvgOrderByAggregateInput> = z.object({
  call_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  requester_black_consumer: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  receiver_id: z.lazy(() => SortOrderSchema).optional(),
  transferred_dept_id: z.lazy(() => SortOrderSchema).optional(),
  assigner_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const callMaxOrderByAggregateInputSchema: z.ZodType<Prisma.callMaxOrderByAggregateInput> = z.object({
  call_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  requester_name: z.lazy(() => SortOrderSchema).optional(),
  requester_num: z.lazy(() => SortOrderSchema).optional(),
  requester_black_consumer: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  detail: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  received_at: z.lazy(() => SortOrderSchema).optional(),
  receiver_id: z.lazy(() => SortOrderSchema).optional(),
  transferred_at: z.lazy(() => SortOrderSchema).optional(),
  transferred_dept_id: z.lazy(() => SortOrderSchema).optional(),
  assigner_id: z.lazy(() => SortOrderSchema).optional(),
  completed_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const callMinOrderByAggregateInputSchema: z.ZodType<Prisma.callMinOrderByAggregateInput> = z.object({
  call_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  requester_name: z.lazy(() => SortOrderSchema).optional(),
  requester_num: z.lazy(() => SortOrderSchema).optional(),
  requester_black_consumer: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  detail: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  received_at: z.lazy(() => SortOrderSchema).optional(),
  receiver_id: z.lazy(() => SortOrderSchema).optional(),
  transferred_at: z.lazy(() => SortOrderSchema).optional(),
  transferred_dept_id: z.lazy(() => SortOrderSchema).optional(),
  assigner_id: z.lazy(() => SortOrderSchema).optional(),
  completed_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const callSumOrderByAggregateInputSchema: z.ZodType<Prisma.callSumOrderByAggregateInput> = z.object({
  call_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  requester_black_consumer: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  receiver_id: z.lazy(() => SortOrderSchema).optional(),
  transferred_dept_id: z.lazy(() => SortOrderSchema).optional(),
  assigner_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const CallListRelationFilterSchema: z.ZodType<Prisma.CallListRelationFilter> = z.object({
  every: z.lazy(() => callWhereInputSchema).optional(),
  some: z.lazy(() => callWhereInputSchema).optional(),
  none: z.lazy(() => callWhereInputSchema).optional()
}).strict();

export const Call_typeNullableRelationFilterSchema: z.ZodType<Prisma.Call_typeNullableRelationFilter> = z.object({
  is: z.lazy(() => call_typeWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => call_typeWhereInputSchema).optional().nullable()
}).strict();

export const Call_typeListRelationFilterSchema: z.ZodType<Prisma.Call_typeListRelationFilter> = z.object({
  every: z.lazy(() => call_typeWhereInputSchema).optional(),
  some: z.lazy(() => call_typeWhereInputSchema).optional(),
  none: z.lazy(() => call_typeWhereInputSchema).optional()
}).strict();

export const callOrderByRelationAggregateInputSchema: z.ZodType<Prisma.callOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const call_typeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.call_typeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const call_typeCountOrderByAggregateInputSchema: z.ZodType<Prisma.call_typeCountOrderByAggregateInput> = z.object({
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_name: z.lazy(() => SortOrderSchema).optional(),
  parent_call_type_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const call_typeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.call_typeAvgOrderByAggregateInput> = z.object({
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  parent_call_type_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const call_typeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.call_typeMaxOrderByAggregateInput> = z.object({
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_name: z.lazy(() => SortOrderSchema).optional(),
  parent_call_type_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const call_typeMinOrderByAggregateInputSchema: z.ZodType<Prisma.call_typeMinOrderByAggregateInput> = z.object({
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  call_type_name: z.lazy(() => SortOrderSchema).optional(),
  parent_call_type_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const call_typeSumOrderByAggregateInputSchema: z.ZodType<Prisma.call_typeSumOrderByAggregateInput> = z.object({
  call_type_id: z.lazy(() => SortOrderSchema).optional(),
  parent_call_type_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ClientNullableRelationFilterSchema: z.ZodType<Prisma.ClientNullableRelationFilter> = z.object({
  is: z.lazy(() => clientWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => clientWhereInputSchema).optional().nullable()
}).strict();

export const ClientListRelationFilterSchema: z.ZodType<Prisma.ClientListRelationFilter> = z.object({
  every: z.lazy(() => clientWhereInputSchema).optional(),
  some: z.lazy(() => clientWhereInputSchema).optional(),
  none: z.lazy(() => clientWhereInputSchema).optional()
}).strict();

export const Client_rateNullableRelationFilterSchema: z.ZodType<Prisma.Client_rateNullableRelationFilter> = z.object({
  is: z.lazy(() => client_rateWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => client_rateWhereInputSchema).optional().nullable()
}).strict();

export const Client_branchListRelationFilterSchema: z.ZodType<Prisma.Client_branchListRelationFilter> = z.object({
  every: z.lazy(() => client_branchWhereInputSchema).optional(),
  some: z.lazy(() => client_branchWhereInputSchema).optional(),
  none: z.lazy(() => client_branchWhereInputSchema).optional()
}).strict();

export const clientOrderByRelationAggregateInputSchema: z.ZodType<Prisma.clientOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const client_branchOrderByRelationAggregateInputSchema: z.ZodType<Prisma.client_branchOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const clientCountOrderByAggregateInputSchema: z.ZodType<Prisma.clientCountOrderByAggregateInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.lazy(() => SortOrderSchema).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const clientAvgOrderByAggregateInputSchema: z.ZodType<Prisma.clientAvgOrderByAggregateInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.lazy(() => SortOrderSchema).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const clientMaxOrderByAggregateInputSchema: z.ZodType<Prisma.clientMaxOrderByAggregateInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.lazy(() => SortOrderSchema).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const clientMinOrderByAggregateInputSchema: z.ZodType<Prisma.clientMinOrderByAggregateInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.lazy(() => SortOrderSchema).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const clientSumOrderByAggregateInputSchema: z.ZodType<Prisma.clientSumOrderByAggregateInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.lazy(() => SortOrderSchema).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ClientRelationFilterSchema: z.ZodType<Prisma.ClientRelationFilter> = z.object({
  is: z.lazy(() => clientWhereInputSchema).optional(),
  isNot: z.lazy(() => clientWhereInputSchema).optional()
}).strict();

export const Client_rateRelationFilterSchema: z.ZodType<Prisma.Client_rateRelationFilter> = z.object({
  is: z.lazy(() => client_rateWhereInputSchema).optional(),
  isNot: z.lazy(() => client_rateWhereInputSchema).optional()
}).strict();

export const DeptRelationFilterSchema: z.ZodType<Prisma.DeptRelationFilter> = z.object({
  is: z.lazy(() => deptWhereInputSchema).optional(),
  isNot: z.lazy(() => deptWhereInputSchema).optional()
}).strict();

export const SigunguRelationFilterSchema: z.ZodType<Prisma.SigunguRelationFilter> = z.object({
  is: z.lazy(() => sigunguWhereInputSchema).optional(),
  isNot: z.lazy(() => sigunguWhereInputSchema).optional()
}).strict();

export const LocationListRelationFilterSchema: z.ZodType<Prisma.LocationListRelationFilter> = z.object({
  every: z.lazy(() => locationWhereInputSchema).optional(),
  some: z.lazy(() => locationWhereInputSchema).optional(),
  none: z.lazy(() => locationWhereInputSchema).optional()
}).strict();

export const locationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.locationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const client_branchCountOrderByAggregateInputSchema: z.ZodType<Prisma.client_branchCountOrderByAggregateInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_name: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_mobile_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_office_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_email: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const client_branchAvgOrderByAggregateInputSchema: z.ZodType<Prisma.client_branchAvgOrderByAggregateInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const client_branchMaxOrderByAggregateInputSchema: z.ZodType<Prisma.client_branchMaxOrderByAggregateInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_name: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_mobile_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_office_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_email: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const client_branchMinOrderByAggregateInputSchema: z.ZodType<Prisma.client_branchMinOrderByAggregateInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_name: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_mobile_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_office_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_email: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const client_branchSumOrderByAggregateInputSchema: z.ZodType<Prisma.client_branchSumOrderByAggregateInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const client_rateCountOrderByAggregateInputSchema: z.ZodType<Prisma.client_rateCountOrderByAggregateInput> = z.object({
  client_rate_id: z.lazy(() => SortOrderSchema).optional(),
  rate_type: z.lazy(() => SortOrderSchema).optional(),
  rate_detail: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const client_rateAvgOrderByAggregateInputSchema: z.ZodType<Prisma.client_rateAvgOrderByAggregateInput> = z.object({
  client_rate_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const client_rateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.client_rateMaxOrderByAggregateInput> = z.object({
  client_rate_id: z.lazy(() => SortOrderSchema).optional(),
  rate_type: z.lazy(() => SortOrderSchema).optional(),
  rate_detail: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const client_rateMinOrderByAggregateInputSchema: z.ZodType<Prisma.client_rateMinOrderByAggregateInput> = z.object({
  client_rate_id: z.lazy(() => SortOrderSchema).optional(),
  rate_type: z.lazy(() => SortOrderSchema).optional(),
  rate_detail: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const client_rateSumOrderByAggregateInputSchema: z.ZodType<Prisma.client_rateSumOrderByAggregateInput> = z.object({
  client_rate_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Device_consumable_compatibilityListRelationFilterSchema: z.ZodType<Prisma.Device_consumable_compatibilityListRelationFilter> = z.object({
  every: z.lazy(() => device_consumable_compatibilityWhereInputSchema).optional(),
  some: z.lazy(() => device_consumable_compatibilityWhereInputSchema).optional(),
  none: z.lazy(() => device_consumable_compatibilityWhereInputSchema).optional()
}).strict();

export const device_consumable_compatibilityOrderByRelationAggregateInputSchema: z.ZodType<Prisma.device_consumable_compatibilityOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const consumable_modelCountOrderByAggregateInputSchema: z.ZodType<Prisma.consumable_modelCountOrderByAggregateInput> = z.object({
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  consumable_name: z.lazy(() => SortOrderSchema).optional(),
  consumable_type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const consumable_modelAvgOrderByAggregateInputSchema: z.ZodType<Prisma.consumable_modelAvgOrderByAggregateInput> = z.object({
  consumable_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const consumable_modelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.consumable_modelMaxOrderByAggregateInput> = z.object({
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  consumable_name: z.lazy(() => SortOrderSchema).optional(),
  consumable_type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const consumable_modelMinOrderByAggregateInputSchema: z.ZodType<Prisma.consumable_modelMinOrderByAggregateInput> = z.object({
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  consumable_name: z.lazy(() => SortOrderSchema).optional(),
  consumable_type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const consumable_modelSumOrderByAggregateInputSchema: z.ZodType<Prisma.consumable_modelSumOrderByAggregateInput> = z.object({
  consumable_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DeptListRelationFilterSchema: z.ZodType<Prisma.DeptListRelationFilter> = z.object({
  every: z.lazy(() => deptWhereInputSchema).optional(),
  some: z.lazy(() => deptWhereInputSchema).optional(),
  none: z.lazy(() => deptWhereInputSchema).optional()
}).strict();

export const DeviceListRelationFilterSchema: z.ZodType<Prisma.DeviceListRelationFilter> = z.object({
  every: z.lazy(() => deviceWhereInputSchema).optional(),
  some: z.lazy(() => deviceWhereInputSchema).optional(),
  none: z.lazy(() => deviceWhereInputSchema).optional()
}).strict();

export const WarehouseListRelationFilterSchema: z.ZodType<Prisma.WarehouseListRelationFilter> = z.object({
  every: z.lazy(() => warehouseWhereInputSchema).optional(),
  some: z.lazy(() => warehouseWhereInputSchema).optional(),
  none: z.lazy(() => warehouseWhereInputSchema).optional()
}).strict();

export const deptOrderByRelationAggregateInputSchema: z.ZodType<Prisma.deptOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deviceOrderByRelationAggregateInputSchema: z.ZodType<Prisma.deviceOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const warehouseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.warehouseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deptCountOrderByAggregateInputSchema: z.ZodType<Prisma.deptCountOrderByAggregateInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.lazy(() => SortOrderSchema).optional(),
  dept_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deptAvgOrderByAggregateInputSchema: z.ZodType<Prisma.deptAvgOrderByAggregateInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deptMaxOrderByAggregateInputSchema: z.ZodType<Prisma.deptMaxOrderByAggregateInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.lazy(() => SortOrderSchema).optional(),
  dept_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deptMinOrderByAggregateInputSchema: z.ZodType<Prisma.deptMinOrderByAggregateInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.lazy(() => SortOrderSchema).optional(),
  dept_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deptSumOrderByAggregateInputSchema: z.ZodType<Prisma.deptSumOrderByAggregateInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Device_statusRelationFilterSchema: z.ZodType<Prisma.Device_statusRelationFilter> = z.object({
  is: z.lazy(() => device_statusWhereInputSchema).optional(),
  isNot: z.lazy(() => device_statusWhereInputSchema).optional()
}).strict();

export const Device_location_logNullableRelationFilterSchema: z.ZodType<Prisma.Device_location_logNullableRelationFilter> = z.object({
  is: z.lazy(() => device_location_logWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => device_location_logWhereInputSchema).optional().nullable()
}).strict();

export const Device_inspection_logNullableRelationFilterSchema: z.ZodType<Prisma.Device_inspection_logNullableRelationFilter> = z.object({
  is: z.lazy(() => device_inspection_logWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => device_inspection_logWhereInputSchema).optional().nullable()
}).strict();

export const Device_modelRelationFilterSchema: z.ZodType<Prisma.Device_modelRelationFilter> = z.object({
  is: z.lazy(() => device_modelWhereInputSchema).optional(),
  isNot: z.lazy(() => device_modelWhereInputSchema).optional()
}).strict();

export const Device_install_infoNullableRelationFilterSchema: z.ZodType<Prisma.Device_install_infoNullableRelationFilter> = z.object({
  is: z.lazy(() => device_install_infoWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => device_install_infoWhereInputSchema).optional().nullable()
}).strict();

export const Device_location_logListRelationFilterSchema: z.ZodType<Prisma.Device_location_logListRelationFilter> = z.object({
  every: z.lazy(() => device_location_logWhereInputSchema).optional(),
  some: z.lazy(() => device_location_logWhereInputSchema).optional(),
  none: z.lazy(() => device_location_logWhereInputSchema).optional()
}).strict();

export const Device_optionListRelationFilterSchema: z.ZodType<Prisma.Device_optionListRelationFilter> = z.object({
  every: z.lazy(() => device_optionWhereInputSchema).optional(),
  some: z.lazy(() => device_optionWhereInputSchema).optional(),
  none: z.lazy(() => device_optionWhereInputSchema).optional()
}).strict();

export const device_location_logOrderByRelationAggregateInputSchema: z.ZodType<Prisma.device_location_logOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_optionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.device_optionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deviceCountOrderByAggregateInputSchema: z.ZodType<Prisma.deviceCountOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  regi_date: z.lazy(() => SortOrderSchema).optional(),
  mac: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  last_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deviceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.deviceAvgOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  last_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deviceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.deviceMaxOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  regi_date: z.lazy(() => SortOrderSchema).optional(),
  mac: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  last_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deviceMinOrderByAggregateInputSchema: z.ZodType<Prisma.deviceMinOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  regi_date: z.lazy(() => SortOrderSchema).optional(),
  mac: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  last_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deviceSumOrderByAggregateInputSchema: z.ZodType<Prisma.deviceSumOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  last_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Approval_roleRelationFilterSchema: z.ZodType<Prisma.Approval_roleRelationFilter> = z.object({
  is: z.lazy(() => approval_roleWhereInputSchema).optional(),
  isNot: z.lazy(() => approval_roleWhereInputSchema).optional()
}).strict();

export const Device_approvalNullableRelationFilterSchema: z.ZodType<Prisma.Device_approvalNullableRelationFilter> = z.object({
  is: z.lazy(() => device_approvalWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => device_approvalWhereInputSchema).optional().nullable()
}).strict();

export const Device_approval_typeRelationFilterSchema: z.ZodType<Prisma.Device_approval_typeRelationFilter> = z.object({
  is: z.lazy(() => device_approval_typeWhereInputSchema).optional(),
  isNot: z.lazy(() => device_approval_typeWhereInputSchema).optional()
}).strict();

export const LocationNullableRelationFilterSchema: z.ZodType<Prisma.LocationNullableRelationFilter> = z.object({
  is: z.lazy(() => locationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => locationWhereInputSchema).optional().nullable()
}).strict();

export const device_approvalCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_approvalCountOrderByAggregateInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  sub_approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  request_at: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  origin_location_id: z.lazy(() => SortOrderSchema).optional(),
  destination_location_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  approve_at: z.lazy(() => SortOrderSchema).optional(),
  is_approved: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_approvalAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_approvalAvgOrderByAggregateInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  sub_approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  origin_location_id: z.lazy(() => SortOrderSchema).optional(),
  destination_location_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  is_approved: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_approvalMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_approvalMaxOrderByAggregateInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  sub_approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  request_at: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  origin_location_id: z.lazy(() => SortOrderSchema).optional(),
  destination_location_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  approve_at: z.lazy(() => SortOrderSchema).optional(),
  is_approved: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_approvalMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_approvalMinOrderByAggregateInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  sub_approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  request_at: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  origin_location_id: z.lazy(() => SortOrderSchema).optional(),
  destination_location_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  approve_at: z.lazy(() => SortOrderSchema).optional(),
  is_approved: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_approvalSumOrderByAggregateInputSchema: z.ZodType<Prisma.device_approvalSumOrderByAggregateInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  sub_approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  origin_location_id: z.lazy(() => SortOrderSchema).optional(),
  destination_location_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  is_approved: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_approval_typeCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_approval_typeCountOrderByAggregateInput> = z.object({
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_approval_typeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_approval_typeAvgOrderByAggregateInput> = z.object({
  approval_type_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_approval_typeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_approval_typeMaxOrderByAggregateInput> = z.object({
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_approval_typeMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_approval_typeMinOrderByAggregateInput> = z.object({
  approval_type_id: z.lazy(() => SortOrderSchema).optional(),
  approval_type_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_approval_typeSumOrderByAggregateInputSchema: z.ZodType<Prisma.device_approval_typeSumOrderByAggregateInput> = z.object({
  approval_type_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Consumable_modelRelationFilterSchema: z.ZodType<Prisma.Consumable_modelRelationFilter> = z.object({
  is: z.lazy(() => consumable_modelWhereInputSchema).optional(),
  isNot: z.lazy(() => consumable_modelWhereInputSchema).optional()
}).strict();

export const device_consumable_compatibilityDevice_model_idConsumable_model_idCompoundUniqueInputSchema: z.ZodType<Prisma.device_consumable_compatibilityDevice_model_idConsumable_model_idCompoundUniqueInput> = z.object({
  device_model_id: z.number(),
  consumable_model_id: z.number()
}).strict();

export const device_consumable_compatibilityCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCountOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_consumable_compatibilityAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_consumable_compatibilityAvgOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_consumable_compatibilityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_consumable_compatibilityMaxOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_consumable_compatibilityMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_consumable_compatibilityMinOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_consumable_compatibilitySumOrderByAggregateInputSchema: z.ZodType<Prisma.device_consumable_compatibilitySumOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_driverCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_driverCountOrderByAggregateInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  printer_language: z.lazy(() => SortOrderSchema).optional(),
  install_file_address: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_driverAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_driverAvgOrderByAggregateInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_driverMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_driverMaxOrderByAggregateInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  printer_language: z.lazy(() => SortOrderSchema).optional(),
  install_file_address: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_driverMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_driverMinOrderByAggregateInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  printer_language: z.lazy(() => SortOrderSchema).optional(),
  install_file_address: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_driverSumOrderByAggregateInputSchema: z.ZodType<Prisma.device_driverSumOrderByAggregateInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumdevice_inspection_log_statusNullableFilterSchema: z.ZodType<Prisma.Enumdevice_inspection_log_statusNullableFilter> = z.object({
  equals: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  in: z.lazy(() => device_inspection_log_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => device_inspection_log_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NestedEnumdevice_inspection_log_statusNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DeviceRelationFilterSchema: z.ZodType<Prisma.DeviceRelationFilter> = z.object({
  is: z.lazy(() => deviceWhereInputSchema).optional(),
  isNot: z.lazy(() => deviceWhereInputSchema).optional()
}).strict();

export const CallNullableRelationFilterSchema: z.ZodType<Prisma.CallNullableRelationFilter> = z.object({
  is: z.lazy(() => callWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => callWhereInputSchema).optional().nullable()
}).strict();

export const device_inspection_logCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_inspection_logCountOrderByAggregateInput> = z.object({
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  inspector_id: z.lazy(() => SortOrderSchema).optional(),
  inspection_date: z.lazy(() => SortOrderSchema).optional(),
  visit_type: z.lazy(() => SortOrderSchema).optional(),
  call_id: z.lazy(() => SortOrderSchema).optional(),
  FL: z.lazy(() => SortOrderSchema).optional(),
  FS: z.lazy(() => SortOrderSchema).optional(),
  BL: z.lazy(() => SortOrderSchema).optional(),
  BS: z.lazy(() => SortOrderSchema).optional(),
  toner_count_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_count_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_count_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_count_BK: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_BK: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_BK: z.lazy(() => SortOrderSchema).optional(),
  drum_count_YE: z.lazy(() => SortOrderSchema).optional(),
  drum_count_MA: z.lazy(() => SortOrderSchema).optional(),
  drum_count_CY: z.lazy(() => SortOrderSchema).optional(),
  drum_count_BK: z.lazy(() => SortOrderSchema).optional(),
  drum_replacement_detail: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_inspection_logAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_inspection_logAvgOrderByAggregateInput> = z.object({
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  inspector_id: z.lazy(() => SortOrderSchema).optional(),
  call_id: z.lazy(() => SortOrderSchema).optional(),
  FL: z.lazy(() => SortOrderSchema).optional(),
  FS: z.lazy(() => SortOrderSchema).optional(),
  BL: z.lazy(() => SortOrderSchema).optional(),
  BS: z.lazy(() => SortOrderSchema).optional(),
  toner_count_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_count_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_count_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_count_BK: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_BK: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_BK: z.lazy(() => SortOrderSchema).optional(),
  drum_count_YE: z.lazy(() => SortOrderSchema).optional(),
  drum_count_MA: z.lazy(() => SortOrderSchema).optional(),
  drum_count_CY: z.lazy(() => SortOrderSchema).optional(),
  drum_count_BK: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_inspection_logMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_inspection_logMaxOrderByAggregateInput> = z.object({
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  inspector_id: z.lazy(() => SortOrderSchema).optional(),
  inspection_date: z.lazy(() => SortOrderSchema).optional(),
  visit_type: z.lazy(() => SortOrderSchema).optional(),
  call_id: z.lazy(() => SortOrderSchema).optional(),
  FL: z.lazy(() => SortOrderSchema).optional(),
  FS: z.lazy(() => SortOrderSchema).optional(),
  BL: z.lazy(() => SortOrderSchema).optional(),
  BS: z.lazy(() => SortOrderSchema).optional(),
  toner_count_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_count_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_count_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_count_BK: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_BK: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_BK: z.lazy(() => SortOrderSchema).optional(),
  drum_count_YE: z.lazy(() => SortOrderSchema).optional(),
  drum_count_MA: z.lazy(() => SortOrderSchema).optional(),
  drum_count_CY: z.lazy(() => SortOrderSchema).optional(),
  drum_count_BK: z.lazy(() => SortOrderSchema).optional(),
  drum_replacement_detail: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_inspection_logMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_inspection_logMinOrderByAggregateInput> = z.object({
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  inspector_id: z.lazy(() => SortOrderSchema).optional(),
  inspection_date: z.lazy(() => SortOrderSchema).optional(),
  visit_type: z.lazy(() => SortOrderSchema).optional(),
  call_id: z.lazy(() => SortOrderSchema).optional(),
  FL: z.lazy(() => SortOrderSchema).optional(),
  FS: z.lazy(() => SortOrderSchema).optional(),
  BL: z.lazy(() => SortOrderSchema).optional(),
  BS: z.lazy(() => SortOrderSchema).optional(),
  toner_count_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_count_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_count_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_count_BK: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_BK: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_BK: z.lazy(() => SortOrderSchema).optional(),
  drum_count_YE: z.lazy(() => SortOrderSchema).optional(),
  drum_count_MA: z.lazy(() => SortOrderSchema).optional(),
  drum_count_CY: z.lazy(() => SortOrderSchema).optional(),
  drum_count_BK: z.lazy(() => SortOrderSchema).optional(),
  drum_replacement_detail: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_inspection_logSumOrderByAggregateInputSchema: z.ZodType<Prisma.device_inspection_logSumOrderByAggregateInput> = z.object({
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  inspector_id: z.lazy(() => SortOrderSchema).optional(),
  call_id: z.lazy(() => SortOrderSchema).optional(),
  FL: z.lazy(() => SortOrderSchema).optional(),
  FS: z.lazy(() => SortOrderSchema).optional(),
  BL: z.lazy(() => SortOrderSchema).optional(),
  BS: z.lazy(() => SortOrderSchema).optional(),
  toner_count_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_count_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_count_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_count_BK: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_stock_BK: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_YE: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_CY: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_MA: z.lazy(() => SortOrderSchema).optional(),
  toner_deliver_BK: z.lazy(() => SortOrderSchema).optional(),
  drum_count_YE: z.lazy(() => SortOrderSchema).optional(),
  drum_count_MA: z.lazy(() => SortOrderSchema).optional(),
  drum_count_CY: z.lazy(() => SortOrderSchema).optional(),
  drum_count_BK: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumdevice_inspection_log_statusNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumdevice_inspection_log_statusNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  in: z.lazy(() => device_inspection_log_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => device_inspection_log_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NestedEnumdevice_inspection_log_statusNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumdevice_inspection_log_statusNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumdevice_inspection_log_statusNullableFilterSchema).optional()
}).strict();

export const device_install_infoCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_install_infoCountOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  installer_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_num: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional(),
  subnet_mask: z.lazy(() => SortOrderSchema).optional(),
  gateway: z.lazy(() => SortOrderSchema).optional(),
  dns1: z.lazy(() => SortOrderSchema).optional(),
  dns2: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_install_infoAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_install_infoAvgOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  installer_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_install_infoMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_install_infoMaxOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  installer_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_num: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional(),
  subnet_mask: z.lazy(() => SortOrderSchema).optional(),
  gateway: z.lazy(() => SortOrderSchema).optional(),
  dns1: z.lazy(() => SortOrderSchema).optional(),
  dns2: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_install_infoMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_install_infoMinOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  installer_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_num: z.lazy(() => SortOrderSchema).optional(),
  ip_address: z.lazy(() => SortOrderSchema).optional(),
  subnet_mask: z.lazy(() => SortOrderSchema).optional(),
  gateway: z.lazy(() => SortOrderSchema).optional(),
  dns1: z.lazy(() => SortOrderSchema).optional(),
  dns2: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_install_infoSumOrderByAggregateInputSchema: z.ZodType<Prisma.device_install_infoSumOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  installer_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LocationRelationFilterSchema: z.ZodType<Prisma.LocationRelationFilter> = z.object({
  is: z.lazy(() => locationWhereInputSchema).optional(),
  isNot: z.lazy(() => locationWhereInputSchema).optional()
}).strict();

export const device_location_logCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_location_logCountOrderByAggregateInput> = z.object({
  device_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  location_date: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional(),
  location_detail: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_location_logAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_location_logAvgOrderByAggregateInput> = z.object({
  device_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_location_logMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_location_logMaxOrderByAggregateInput> = z.object({
  device_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  location_date: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional(),
  location_detail: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_location_logMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_location_logMinOrderByAggregateInput> = z.object({
  device_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  location_date: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional(),
  location_detail: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_location_logSumOrderByAggregateInputSchema: z.ZodType<Prisma.device_location_logSumOrderByAggregateInput> = z.object({
  device_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  device_id: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Device_driverListRelationFilterSchema: z.ZodType<Prisma.Device_driverListRelationFilter> = z.object({
  every: z.lazy(() => device_driverWhereInputSchema).optional(),
  some: z.lazy(() => device_driverWhereInputSchema).optional(),
  none: z.lazy(() => device_driverWhereInputSchema).optional()
}).strict();

export const Device_option_compatibilityListRelationFilterSchema: z.ZodType<Prisma.Device_option_compatibilityListRelationFilter> = z.object({
  every: z.lazy(() => device_option_compatibilityWhereInputSchema).optional(),
  some: z.lazy(() => device_option_compatibilityWhereInputSchema).optional(),
  none: z.lazy(() => device_option_compatibilityWhereInputSchema).optional()
}).strict();

export const device_driverOrderByRelationAggregateInputSchema: z.ZodType<Prisma.device_driverOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_option_compatibilityOrderByRelationAggregateInputSchema: z.ZodType<Prisma.device_option_compatibilityOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_modelCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_modelCountOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_modelAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_modelAvgOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_modelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_modelMaxOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_modelMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_modelMinOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_modelSumOrderByAggregateInputSchema: z.ZodType<Prisma.device_modelSumOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumdevice_option_location_typeFilterSchema: z.ZodType<Prisma.Enumdevice_option_location_typeFilter> = z.object({
  equals: z.lazy(() => device_option_location_typeSchema).optional(),
  in: z.lazy(() => device_option_location_typeSchema).array().optional(),
  notIn: z.lazy(() => device_option_location_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => NestedEnumdevice_option_location_typeFilterSchema) ]).optional(),
}).strict();

export const Option_modelRelationFilterSchema: z.ZodType<Prisma.Option_modelRelationFilter> = z.object({
  is: z.lazy(() => option_modelWhereInputSchema).optional(),
  isNot: z.lazy(() => option_modelWhereInputSchema).optional()
}).strict();

export const WarehouseNullableRelationFilterSchema: z.ZodType<Prisma.WarehouseNullableRelationFilter> = z.object({
  is: z.lazy(() => warehouseWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => warehouseWhereInputSchema).optional().nullable()
}).strict();

export const device_optionCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_optionCountOrderByAggregateInput> = z.object({
  device_option_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  location_type: z.lazy(() => SortOrderSchema).optional(),
  location_warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  location_device_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_optionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_optionAvgOrderByAggregateInput> = z.object({
  device_option_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  location_warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  location_device_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_optionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_optionMaxOrderByAggregateInput> = z.object({
  device_option_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  location_type: z.lazy(() => SortOrderSchema).optional(),
  location_warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  location_device_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_optionMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_optionMinOrderByAggregateInput> = z.object({
  device_option_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  location_type: z.lazy(() => SortOrderSchema).optional(),
  location_warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  location_device_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_optionSumOrderByAggregateInputSchema: z.ZodType<Prisma.device_optionSumOrderByAggregateInput> = z.object({
  device_option_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  location_warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  location_device_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumdevice_option_location_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumdevice_option_location_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => device_option_location_typeSchema).optional(),
  in: z.lazy(() => device_option_location_typeSchema).array().optional(),
  notIn: z.lazy(() => device_option_location_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => NestedEnumdevice_option_location_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumdevice_option_location_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumdevice_option_location_typeFilterSchema).optional()
}).strict();

export const device_option_compatibilityDevice_model_idOption_model_idCompoundUniqueInputSchema: z.ZodType<Prisma.device_option_compatibilityDevice_model_idOption_model_idCompoundUniqueInput> = z.object({
  device_model_id: z.number(),
  option_model_id: z.number()
}).strict();

export const device_option_compatibilityCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_option_compatibilityCountOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_option_compatibilityAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_option_compatibilityAvgOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_option_compatibilityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_option_compatibilityMaxOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_option_compatibilityMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_option_compatibilityMinOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_option_compatibilitySumOrderByAggregateInputSchema: z.ZodType<Prisma.device_option_compatibilitySumOrderByAggregateInput> = z.object({
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_statusCountOrderByAggregateInputSchema: z.ZodType<Prisma.device_statusCountOrderByAggregateInput> = z.object({
  status_id: z.lazy(() => SortOrderSchema).optional(),
  status_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_statusAvgOrderByAggregateInputSchema: z.ZodType<Prisma.device_statusAvgOrderByAggregateInput> = z.object({
  status_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_statusMaxOrderByAggregateInputSchema: z.ZodType<Prisma.device_statusMaxOrderByAggregateInput> = z.object({
  status_id: z.lazy(() => SortOrderSchema).optional(),
  status_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_statusMinOrderByAggregateInputSchema: z.ZodType<Prisma.device_statusMinOrderByAggregateInput> = z.object({
  status_id: z.lazy(() => SortOrderSchema).optional(),
  status_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const device_statusSumOrderByAggregateInputSchema: z.ZodType<Prisma.device_statusSumOrderByAggregateInput> = z.object({
  status_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Device_inspection_logRelationFilterSchema: z.ZodType<Prisma.Device_inspection_logRelationFilter> = z.object({
  is: z.lazy(() => device_inspection_logWhereInputSchema).optional(),
  isNot: z.lazy(() => device_inspection_logWhereInputSchema).optional()
}).strict();

export const inspection_approvalCountOrderByAggregateInputSchema: z.ZodType<Prisma.inspection_approvalCountOrderByAggregateInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  request_at: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  approved_at: z.lazy(() => SortOrderSchema).optional(),
  is_approved: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const inspection_approvalAvgOrderByAggregateInputSchema: z.ZodType<Prisma.inspection_approvalAvgOrderByAggregateInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  is_approved: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const inspection_approvalMaxOrderByAggregateInputSchema: z.ZodType<Prisma.inspection_approvalMaxOrderByAggregateInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  request_at: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  approved_at: z.lazy(() => SortOrderSchema).optional(),
  is_approved: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const inspection_approvalMinOrderByAggregateInputSchema: z.ZodType<Prisma.inspection_approvalMinOrderByAggregateInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  request_at: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  approved_at: z.lazy(() => SortOrderSchema).optional(),
  is_approved: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const inspection_approvalSumOrderByAggregateInputSchema: z.ZodType<Prisma.inspection_approvalSumOrderByAggregateInput> = z.object({
  approval_id: z.lazy(() => SortOrderSchema).optional(),
  requester_id: z.lazy(() => SortOrderSchema).optional(),
  approver_role_id: z.lazy(() => SortOrderSchema).optional(),
  device_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional(),
  is_approved: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumlocation_location_typeFilterSchema: z.ZodType<Prisma.Enumlocation_location_typeFilter> = z.object({
  equals: z.lazy(() => location_location_typeSchema).optional(),
  in: z.lazy(() => location_location_typeSchema).array().optional(),
  notIn: z.lazy(() => location_location_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => NestedEnumlocation_location_typeFilterSchema) ]).optional(),
}).strict();

export const Client_branchNullableRelationFilterSchema: z.ZodType<Prisma.Client_branchNullableRelationFilter> = z.object({
  is: z.lazy(() => client_branchWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => client_branchWhereInputSchema).optional().nullable()
}).strict();

export const locationCountOrderByAggregateInputSchema: z.ZodType<Prisma.locationCountOrderByAggregateInput> = z.object({
  location_id: z.lazy(() => SortOrderSchema).optional(),
  location_type: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const locationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.locationAvgOrderByAggregateInput> = z.object({
  location_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const locationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.locationMaxOrderByAggregateInput> = z.object({
  location_id: z.lazy(() => SortOrderSchema).optional(),
  location_type: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const locationMinOrderByAggregateInputSchema: z.ZodType<Prisma.locationMinOrderByAggregateInput> = z.object({
  location_id: z.lazy(() => SortOrderSchema).optional(),
  location_type: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const locationSumOrderByAggregateInputSchema: z.ZodType<Prisma.locationSumOrderByAggregateInput> = z.object({
  location_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumlocation_location_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumlocation_location_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => location_location_typeSchema).optional(),
  in: z.lazy(() => location_location_typeSchema).array().optional(),
  notIn: z.lazy(() => location_location_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => NestedEnumlocation_location_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumlocation_location_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumlocation_location_typeFilterSchema).optional()
}).strict();

export const option_modelCountOrderByAggregateInputSchema: z.ZodType<Prisma.option_modelCountOrderByAggregateInput> = z.object({
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_name: z.lazy(() => SortOrderSchema).optional(),
  option_type: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const option_modelAvgOrderByAggregateInputSchema: z.ZodType<Prisma.option_modelAvgOrderByAggregateInput> = z.object({
  option_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const option_modelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.option_modelMaxOrderByAggregateInput> = z.object({
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_name: z.lazy(() => SortOrderSchema).optional(),
  option_type: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const option_modelMinOrderByAggregateInputSchema: z.ZodType<Prisma.option_modelMinOrderByAggregateInput> = z.object({
  option_model_id: z.lazy(() => SortOrderSchema).optional(),
  option_model_name: z.lazy(() => SortOrderSchema).optional(),
  option_type: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const option_modelSumOrderByAggregateInputSchema: z.ZodType<Prisma.option_modelSumOrderByAggregateInput> = z.object({
  option_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SigunguListRelationFilterSchema: z.ZodType<Prisma.SigunguListRelationFilter> = z.object({
  every: z.lazy(() => sigunguWhereInputSchema).optional(),
  some: z.lazy(() => sigunguWhereInputSchema).optional(),
  none: z.lazy(() => sigunguWhereInputSchema).optional()
}).strict();

export const sigunguOrderByRelationAggregateInputSchema: z.ZodType<Prisma.sigunguOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sidoCountOrderByAggregateInputSchema: z.ZodType<Prisma.sidoCountOrderByAggregateInput> = z.object({
  sido_id: z.lazy(() => SortOrderSchema).optional(),
  sido_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sidoAvgOrderByAggregateInputSchema: z.ZodType<Prisma.sidoAvgOrderByAggregateInput> = z.object({
  sido_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sidoMaxOrderByAggregateInputSchema: z.ZodType<Prisma.sidoMaxOrderByAggregateInput> = z.object({
  sido_id: z.lazy(() => SortOrderSchema).optional(),
  sido_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sidoMinOrderByAggregateInputSchema: z.ZodType<Prisma.sidoMinOrderByAggregateInput> = z.object({
  sido_id: z.lazy(() => SortOrderSchema).optional(),
  sido_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sidoSumOrderByAggregateInputSchema: z.ZodType<Prisma.sidoSumOrderByAggregateInput> = z.object({
  sido_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SidoRelationFilterSchema: z.ZodType<Prisma.SidoRelationFilter> = z.object({
  is: z.lazy(() => sidoWhereInputSchema).optional(),
  isNot: z.lazy(() => sidoWhereInputSchema).optional()
}).strict();

export const sigunguCountOrderByAggregateInputSchema: z.ZodType<Prisma.sigunguCountOrderByAggregateInput> = z.object({
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_name: z.lazy(() => SortOrderSchema).optional(),
  sido_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sigunguAvgOrderByAggregateInputSchema: z.ZodType<Prisma.sigunguAvgOrderByAggregateInput> = z.object({
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  sido_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sigunguMaxOrderByAggregateInputSchema: z.ZodType<Prisma.sigunguMaxOrderByAggregateInput> = z.object({
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_name: z.lazy(() => SortOrderSchema).optional(),
  sido_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sigunguMinOrderByAggregateInputSchema: z.ZodType<Prisma.sigunguMinOrderByAggregateInput> = z.object({
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_name: z.lazy(() => SortOrderSchema).optional(),
  sido_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const sigunguSumOrderByAggregateInputSchema: z.ZodType<Prisma.sigunguSumOrderByAggregateInput> = z.object({
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  sido_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumuser_permissionFilterSchema: z.ZodType<Prisma.Enumuser_permissionFilter> = z.object({
  equals: z.lazy(() => user_permissionSchema).optional(),
  in: z.lazy(() => user_permissionSchema).array().optional(),
  notIn: z.lazy(() => user_permissionSchema).array().optional(),
  not: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => NestedEnumuser_permissionFilterSchema) ]).optional(),
}).strict();

export const Device_install_infoListRelationFilterSchema: z.ZodType<Prisma.Device_install_infoListRelationFilter> = z.object({
  every: z.lazy(() => device_install_infoWhereInputSchema).optional(),
  some: z.lazy(() => device_install_infoWhereInputSchema).optional(),
  none: z.lazy(() => device_install_infoWhereInputSchema).optional()
}).strict();

export const User_positionRelationFilterSchema: z.ZodType<Prisma.User_positionRelationFilter> = z.object({
  is: z.lazy(() => user_positionWhereInputSchema).optional(),
  isNot: z.lazy(() => user_positionWhereInputSchema).optional()
}).strict();

export const device_install_infoOrderByRelationAggregateInputSchema: z.ZodType<Prisma.device_install_infoOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userCountOrderByAggregateInputSchema: z.ZodType<Prisma.userCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_name: z.lazy(() => SortOrderSchema).optional(),
  login_id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  mobile_num: z.lazy(() => SortOrderSchema).optional(),
  office_num: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  modified_at: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userAvgOrderByAggregateInputSchema: z.ZodType<Prisma.userAvgOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userMaxOrderByAggregateInputSchema: z.ZodType<Prisma.userMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_name: z.lazy(() => SortOrderSchema).optional(),
  login_id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  mobile_num: z.lazy(() => SortOrderSchema).optional(),
  office_num: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  modified_at: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userMinOrderByAggregateInputSchema: z.ZodType<Prisma.userMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_name: z.lazy(() => SortOrderSchema).optional(),
  login_id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  mobile_num: z.lazy(() => SortOrderSchema).optional(),
  office_num: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  modified_at: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const userSumOrderByAggregateInputSchema: z.ZodType<Prisma.userSumOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumuser_permissionWithAggregatesFilterSchema: z.ZodType<Prisma.Enumuser_permissionWithAggregatesFilter> = z.object({
  equals: z.lazy(() => user_permissionSchema).optional(),
  in: z.lazy(() => user_permissionSchema).array().optional(),
  notIn: z.lazy(() => user_permissionSchema).array().optional(),
  not: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => NestedEnumuser_permissionWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumuser_permissionFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumuser_permissionFilterSchema).optional()
}).strict();

export const user_positionCountOrderByAggregateInputSchema: z.ZodType<Prisma.user_positionCountOrderByAggregateInput> = z.object({
  user_position_id: z.lazy(() => SortOrderSchema).optional(),
  position_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const user_positionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.user_positionAvgOrderByAggregateInput> = z.object({
  user_position_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const user_positionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.user_positionMaxOrderByAggregateInput> = z.object({
  user_position_id: z.lazy(() => SortOrderSchema).optional(),
  position_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const user_positionMinOrderByAggregateInputSchema: z.ZodType<Prisma.user_positionMinOrderByAggregateInput> = z.object({
  user_position_id: z.lazy(() => SortOrderSchema).optional(),
  position_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const user_positionSumOrderByAggregateInputSchema: z.ZodType<Prisma.user_positionSumOrderByAggregateInput> = z.object({
  user_position_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const user_role_assignmentRole_idApprover_idCompoundUniqueInputSchema: z.ZodType<Prisma.user_role_assignmentRole_idApprover_idCompoundUniqueInput> = z.object({
  role_id: z.number(),
  approver_id: z.number()
}).strict();

export const user_role_assignmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.user_role_assignmentCountOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const user_role_assignmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.user_role_assignmentAvgOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const user_role_assignmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.user_role_assignmentMaxOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const user_role_assignmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.user_role_assignmentMinOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const user_role_assignmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.user_role_assignmentSumOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  approver_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const warehouseCountOrderByAggregateInputSchema: z.ZodType<Prisma.warehouseCountOrderByAggregateInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const warehouseAvgOrderByAggregateInputSchema: z.ZodType<Prisma.warehouseAvgOrderByAggregateInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const warehouseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.warehouseMaxOrderByAggregateInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const warehouseMinOrderByAggregateInputSchema: z.ZodType<Prisma.warehouseMinOrderByAggregateInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const warehouseSumOrderByAggregateInputSchema: z.ZodType<Prisma.warehouseSumOrderByAggregateInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deleteneededCountOrderByAggregateInputSchema: z.ZodType<Prisma.deleteneededCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deleteneededAvgOrderByAggregateInputSchema: z.ZodType<Prisma.deleteneededAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deleteneededMaxOrderByAggregateInputSchema: z.ZodType<Prisma.deleteneededMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deleteneededMinOrderByAggregateInputSchema: z.ZodType<Prisma.deleteneededMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const deleteneededSumOrderByAggregateInputSchema: z.ZodType<Prisma.deleteneededSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntFilterSchema: z.ZodType<Prisma.BigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const v_clientCountOrderByAggregateInputSchema: z.ZodType<Prisma.v_clientCountOrderByAggregateInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.lazy(() => SortOrderSchema).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  parent_client_name: z.lazy(() => SortOrderSchema).optional(),
  client_rate: z.lazy(() => SortOrderSchema).optional(),
  rate_detail: z.lazy(() => SortOrderSchema).optional(),
  branch_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_clientAvgOrderByAggregateInputSchema: z.ZodType<Prisma.v_clientAvgOrderByAggregateInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.lazy(() => SortOrderSchema).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  branch_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_clientMaxOrderByAggregateInputSchema: z.ZodType<Prisma.v_clientMaxOrderByAggregateInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.lazy(() => SortOrderSchema).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  parent_client_name: z.lazy(() => SortOrderSchema).optional(),
  client_rate: z.lazy(() => SortOrderSchema).optional(),
  rate_detail: z.lazy(() => SortOrderSchema).optional(),
  branch_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_clientMinOrderByAggregateInputSchema: z.ZodType<Prisma.v_clientMinOrderByAggregateInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.lazy(() => SortOrderSchema).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  parent_client_name: z.lazy(() => SortOrderSchema).optional(),
  client_rate: z.lazy(() => SortOrderSchema).optional(),
  rate_detail: z.lazy(() => SortOrderSchema).optional(),
  branch_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_clientSumOrderByAggregateInputSchema: z.ZodType<Prisma.v_clientSumOrderByAggregateInput> = z.object({
  client_id: z.lazy(() => SortOrderSchema).optional(),
  parent_client_id: z.lazy(() => SortOrderSchema).optional(),
  default_client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  branch_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntWithAggregatesFilterSchema: z.ZodType<Prisma.BigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const v_client_branchCountOrderByAggregateInputSchema: z.ZodType<Prisma.v_client_branchCountOrderByAggregateInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_name: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_mobile_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_office_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_email: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  sigungu_name: z.lazy(() => SortOrderSchema).optional(),
  sido_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_client_branchAvgOrderByAggregateInputSchema: z.ZodType<Prisma.v_client_branchAvgOrderByAggregateInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_client_branchMaxOrderByAggregateInputSchema: z.ZodType<Prisma.v_client_branchMaxOrderByAggregateInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_name: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_mobile_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_office_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_email: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  sigungu_name: z.lazy(() => SortOrderSchema).optional(),
  sido_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_client_branchMinOrderByAggregateInputSchema: z.ZodType<Prisma.v_client_branchMinOrderByAggregateInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_name: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_mobile_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_office_num: z.lazy(() => SortOrderSchema).optional(),
  branch_mgr_email: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional(),
  client_name: z.lazy(() => SortOrderSchema).optional(),
  sigungu_name: z.lazy(() => SortOrderSchema).optional(),
  sido_name: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_client_branchSumOrderByAggregateInputSchema: z.ZodType<Prisma.v_client_branchSumOrderByAggregateInput> = z.object({
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  client_id: z.lazy(() => SortOrderSchema).optional(),
  sigungu_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_rate_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  remote_support: z.lazy(() => SortOrderSchema).optional(),
  push_alert: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_consumable_modelCountOrderByAggregateInputSchema: z.ZodType<Prisma.v_consumable_modelCountOrderByAggregateInput> = z.object({
  compatibility_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  consumable_name: z.lazy(() => SortOrderSchema).optional(),
  consumable_type: z.lazy(() => SortOrderSchema).optional(),
  model_manufacturer: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_consumable_modelAvgOrderByAggregateInputSchema: z.ZodType<Prisma.v_consumable_modelAvgOrderByAggregateInput> = z.object({
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_consumable_modelMaxOrderByAggregateInputSchema: z.ZodType<Prisma.v_consumable_modelMaxOrderByAggregateInput> = z.object({
  compatibility_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  consumable_name: z.lazy(() => SortOrderSchema).optional(),
  consumable_type: z.lazy(() => SortOrderSchema).optional(),
  model_manufacturer: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_consumable_modelMinOrderByAggregateInputSchema: z.ZodType<Prisma.v_consumable_modelMinOrderByAggregateInput> = z.object({
  compatibility_id: z.lazy(() => SortOrderSchema).optional(),
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  consumable_name: z.lazy(() => SortOrderSchema).optional(),
  consumable_type: z.lazy(() => SortOrderSchema).optional(),
  model_manufacturer: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_consumable_modelSumOrderByAggregateInputSchema: z.ZodType<Prisma.v_consumable_modelSumOrderByAggregateInput> = z.object({
  consumable_model_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_deptCountOrderByAggregateInputSchema: z.ZodType<Prisma.v_deptCountOrderByAggregateInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  dept_1_id: z.lazy(() => SortOrderSchema).optional(),
  dept_1: z.lazy(() => SortOrderSchema).optional(),
  dept_2_id: z.lazy(() => SortOrderSchema).optional(),
  dept_2: z.lazy(() => SortOrderSchema).optional(),
  dept_3_id: z.lazy(() => SortOrderSchema).optional(),
  dept_3: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_deptAvgOrderByAggregateInputSchema: z.ZodType<Prisma.v_deptAvgOrderByAggregateInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_deptMaxOrderByAggregateInputSchema: z.ZodType<Prisma.v_deptMaxOrderByAggregateInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  dept_1_id: z.lazy(() => SortOrderSchema).optional(),
  dept_1: z.lazy(() => SortOrderSchema).optional(),
  dept_2_id: z.lazy(() => SortOrderSchema).optional(),
  dept_2: z.lazy(() => SortOrderSchema).optional(),
  dept_3_id: z.lazy(() => SortOrderSchema).optional(),
  dept_3: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_deptMinOrderByAggregateInputSchema: z.ZodType<Prisma.v_deptMinOrderByAggregateInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  dept_1_id: z.lazy(() => SortOrderSchema).optional(),
  dept_1: z.lazy(() => SortOrderSchema).optional(),
  dept_2_id: z.lazy(() => SortOrderSchema).optional(),
  dept_2: z.lazy(() => SortOrderSchema).optional(),
  dept_3_id: z.lazy(() => SortOrderSchema).optional(),
  dept_3: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_deptSumOrderByAggregateInputSchema: z.ZodType<Prisma.v_deptSumOrderByAggregateInput> = z.object({
  dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_device_driverCountOrderByAggregateInputSchema: z.ZodType<Prisma.v_device_driverCountOrderByAggregateInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  driver_manufacturer: z.lazy(() => SortOrderSchema).optional(),
  printer_language: z.lazy(() => SortOrderSchema).optional(),
  install_file_address: z.lazy(() => SortOrderSchema).optional(),
  model_manufacturer: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_device_driverAvgOrderByAggregateInputSchema: z.ZodType<Prisma.v_device_driverAvgOrderByAggregateInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_device_driverMaxOrderByAggregateInputSchema: z.ZodType<Prisma.v_device_driverMaxOrderByAggregateInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  driver_manufacturer: z.lazy(() => SortOrderSchema).optional(),
  printer_language: z.lazy(() => SortOrderSchema).optional(),
  install_file_address: z.lazy(() => SortOrderSchema).optional(),
  model_manufacturer: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_device_driverMinOrderByAggregateInputSchema: z.ZodType<Prisma.v_device_driverMinOrderByAggregateInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  driver_manufacturer: z.lazy(() => SortOrderSchema).optional(),
  printer_language: z.lazy(() => SortOrderSchema).optional(),
  install_file_address: z.lazy(() => SortOrderSchema).optional(),
  model_manufacturer: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_device_driverSumOrderByAggregateInputSchema: z.ZodType<Prisma.v_device_driverSumOrderByAggregateInput> = z.object({
  device_driver_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  color_support: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumv_user_permissionFilterSchema: z.ZodType<Prisma.Enumv_user_permissionFilter> = z.object({
  equals: z.lazy(() => v_user_permissionSchema).optional(),
  in: z.lazy(() => v_user_permissionSchema).array().optional(),
  notIn: z.lazy(() => v_user_permissionSchema).array().optional(),
  not: z.union([ z.lazy(() => v_user_permissionSchema),z.lazy(() => NestedEnumv_user_permissionFilterSchema) ]).optional(),
}).strict();

export const v_userCountOrderByAggregateInputSchema: z.ZodType<Prisma.v_userCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_name: z.lazy(() => SortOrderSchema).optional(),
  login_id: z.lazy(() => SortOrderSchema).optional(),
  mobile_num: z.lazy(() => SortOrderSchema).optional(),
  office_num: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  modified_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  dept_name: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_userAvgOrderByAggregateInputSchema: z.ZodType<Prisma.v_userAvgOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_userMaxOrderByAggregateInputSchema: z.ZodType<Prisma.v_userMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_name: z.lazy(() => SortOrderSchema).optional(),
  login_id: z.lazy(() => SortOrderSchema).optional(),
  mobile_num: z.lazy(() => SortOrderSchema).optional(),
  office_num: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  modified_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  dept_name: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_userMinOrderByAggregateInputSchema: z.ZodType<Prisma.v_userMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_name: z.lazy(() => SortOrderSchema).optional(),
  login_id: z.lazy(() => SortOrderSchema).optional(),
  mobile_num: z.lazy(() => SortOrderSchema).optional(),
  office_num: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  modified_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  dept_name: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_userSumOrderByAggregateInputSchema: z.ZodType<Prisma.v_userSumOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_active: z.lazy(() => SortOrderSchema).optional(),
  dept_id: z.lazy(() => SortOrderSchema).optional(),
  approval_role_id: z.lazy(() => SortOrderSchema).optional(),
  position_id: z.lazy(() => SortOrderSchema).optional(),
  parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumv_user_permissionWithAggregatesFilterSchema: z.ZodType<Prisma.Enumv_user_permissionWithAggregatesFilter> = z.object({
  equals: z.lazy(() => v_user_permissionSchema).optional(),
  in: z.lazy(() => v_user_permissionSchema).array().optional(),
  notIn: z.lazy(() => v_user_permissionSchema).array().optional(),
  not: z.union([ z.lazy(() => v_user_permissionSchema),z.lazy(() => NestedEnumv_user_permissionWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumv_user_permissionFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumv_user_permissionFilterSchema).optional()
}).strict();

export const v_warehouseCountOrderByAggregateInputSchema: z.ZodType<Prisma.v_warehouseCountOrderByAggregateInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_warehouseAvgOrderByAggregateInputSchema: z.ZodType<Prisma.v_warehouseAvgOrderByAggregateInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_warehouseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.v_warehouseMaxOrderByAggregateInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_warehouseMinOrderByAggregateInputSchema: z.ZodType<Prisma.v_warehouseMinOrderByAggregateInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_warehouseSumOrderByAggregateInputSchema: z.ZodType<Prisma.v_warehouseSumOrderByAggregateInput> = z.object({
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_parent_dept_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntNullableFilterSchema: z.ZodType<Prisma.BigIntNullableFilter> = z.object({
  equals: z.bigint().optional().nullable(),
  in: z.bigint().array().optional().nullable(),
  notIn: z.bigint().array().optional().nullable(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const v_deviceCountOrderByAggregateInputSchema: z.ZodType<Prisma.v_deviceCountOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  regi_date: z.lazy(() => SortOrderSchema).optional(),
  mac: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  last_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_name: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  status_name: z.lazy(() => SortOrderSchema).optional(),
  has_fax: z.lazy(() => SortOrderSchema).optional(),
  has_desk: z.lazy(() => SortOrderSchema).optional(),
  has_shelf: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_deviceAvgOrderByAggregateInputSchema: z.ZodType<Prisma.v_deviceAvgOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  last_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  has_fax: z.lazy(() => SortOrderSchema).optional(),
  has_desk: z.lazy(() => SortOrderSchema).optional(),
  has_shelf: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_deviceMaxOrderByAggregateInputSchema: z.ZodType<Prisma.v_deviceMaxOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  regi_date: z.lazy(() => SortOrderSchema).optional(),
  mac: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  last_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_name: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  status_name: z.lazy(() => SortOrderSchema).optional(),
  has_fax: z.lazy(() => SortOrderSchema).optional(),
  has_desk: z.lazy(() => SortOrderSchema).optional(),
  has_shelf: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_deviceMinOrderByAggregateInputSchema: z.ZodType<Prisma.v_deviceMinOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  serial: z.lazy(() => SortOrderSchema).optional(),
  regi_date: z.lazy(() => SortOrderSchema).optional(),
  mac: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  last_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional(),
  model_name: z.lazy(() => SortOrderSchema).optional(),
  manufacturer: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_name: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_name: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_name: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_name: z.lazy(() => SortOrderSchema).optional(),
  status_name: z.lazy(() => SortOrderSchema).optional(),
  has_fax: z.lazy(() => SortOrderSchema).optional(),
  has_desk: z.lazy(() => SortOrderSchema).optional(),
  has_shelf: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const v_deviceSumOrderByAggregateInputSchema: z.ZodType<Prisma.v_deviceSumOrderByAggregateInput> = z.object({
  device_id: z.lazy(() => SortOrderSchema).optional(),
  device_model_id: z.lazy(() => SortOrderSchema).optional(),
  owner_dept_id: z.lazy(() => SortOrderSchema).optional(),
  mgmt_dept_id: z.lazy(() => SortOrderSchema).optional(),
  last_inspection_log_id: z.lazy(() => SortOrderSchema).optional(),
  last_location_log_id: z.lazy(() => SortOrderSchema).optional(),
  status_id: z.lazy(() => SortOrderSchema).optional(),
  location_id: z.lazy(() => SortOrderSchema).optional(),
  warehouse_id: z.lazy(() => SortOrderSchema).optional(),
  client_branch_id: z.lazy(() => SortOrderSchema).optional(),
  has_fax: z.lazy(() => SortOrderSchema).optional(),
  has_desk: z.lazy(() => SortOrderSchema).optional(),
  has_shelf: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BigIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BigIntNullableWithAggregatesFilter> = z.object({
  equals: z.bigint().optional().nullable(),
  in: z.bigint().array().optional().nullable(),
  notIn: z.bigint().array().optional().nullable(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntNullableFilterSchema).optional()
}).strict();

export const approval_roleCreateNestedOneWithoutOther_approval_roleInputSchema: z.ZodType<Prisma.approval_roleCreateNestedOneWithoutOther_approval_roleInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutOther_approval_roleInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutOther_approval_roleInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => approval_roleCreateOrConnectWithoutOther_approval_roleInputSchema).optional(),
  connect: z.lazy(() => approval_roleWhereUniqueInputSchema).optional()
}).strict();

export const approval_roleCreateNestedManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleCreateNestedManyWithoutApproval_roleInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => approval_roleUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => approval_roleCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => approval_roleCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => approval_roleCreateManyApproval_roleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => approval_roleWhereUniqueInputSchema),z.lazy(() => approval_roleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approvalCreateNestedManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalCreateNestedManyWithoutApproval_roleInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyApproval_roleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalCreateNestedManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalCreateNestedManyWithoutApproval_roleInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyApproval_roleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const userCreateNestedManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.userCreateNestedManyWithoutApproval_roleInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutApproval_roleInputSchema),z.lazy(() => userCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => userUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => userCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyApproval_roleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const user_role_assignmentCreateNestedManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentCreateNestedManyWithoutApproval_roleInput> = z.object({
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => user_role_assignmentCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => user_role_assignmentCreateManyApproval_roleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const approval_roleUncheckedCreateNestedManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleUncheckedCreateNestedManyWithoutApproval_roleInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => approval_roleUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => approval_roleCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => approval_roleCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => approval_roleCreateManyApproval_roleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => approval_roleWhereUniqueInputSchema),z.lazy(() => approval_roleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateNestedManyWithoutApproval_roleInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyApproval_roleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedCreateNestedManyWithoutApproval_roleInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyApproval_roleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const userUncheckedCreateNestedManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.userUncheckedCreateNestedManyWithoutApproval_roleInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutApproval_roleInputSchema),z.lazy(() => userCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => userUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => userCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyApproval_roleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const user_role_assignmentUncheckedCreateNestedManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedCreateNestedManyWithoutApproval_roleInput> = z.object({
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => user_role_assignmentCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => user_role_assignmentCreateManyApproval_roleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const approval_roleUpdateOneWithoutOther_approval_roleNestedInputSchema: z.ZodType<Prisma.approval_roleUpdateOneWithoutOther_approval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutOther_approval_roleInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutOther_approval_roleInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => approval_roleCreateOrConnectWithoutOther_approval_roleInputSchema).optional(),
  upsert: z.lazy(() => approval_roleUpsertWithoutOther_approval_roleInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => approval_roleWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => approval_roleWhereInputSchema) ]).optional(),
  connect: z.lazy(() => approval_roleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => approval_roleUpdateToOneWithWhereWithoutOther_approval_roleInputSchema),z.lazy(() => approval_roleUpdateWithoutOther_approval_roleInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutOther_approval_roleInputSchema) ]).optional(),
}).strict();

export const approval_roleUpdateManyWithoutApproval_roleNestedInputSchema: z.ZodType<Prisma.approval_roleUpdateManyWithoutApproval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => approval_roleUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => approval_roleCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => approval_roleCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => approval_roleUpsertWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUpsertWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => approval_roleCreateManyApproval_roleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => approval_roleWhereUniqueInputSchema),z.lazy(() => approval_roleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => approval_roleWhereUniqueInputSchema),z.lazy(() => approval_roleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => approval_roleWhereUniqueInputSchema),z.lazy(() => approval_roleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => approval_roleWhereUniqueInputSchema),z.lazy(() => approval_roleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => approval_roleUpdateWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUpdateWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => approval_roleUpdateManyWithWhereWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUpdateManyWithWhereWithoutApproval_roleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => approval_roleScalarWhereInputSchema),z.lazy(() => approval_roleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUpdateManyWithoutApproval_roleNestedInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithoutApproval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyApproval_roleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutApproval_roleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUpdateManyWithoutApproval_roleNestedInputSchema: z.ZodType<Prisma.inspection_approvalUpdateManyWithoutApproval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyApproval_roleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutApproval_roleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => inspection_approvalScalarWhereInputSchema),z.lazy(() => inspection_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const userUpdateManyWithoutApproval_roleNestedInputSchema: z.ZodType<Prisma.userUpdateManyWithoutApproval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutApproval_roleInputSchema),z.lazy(() => userCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => userUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => userCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => userUpsertWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => userUpsertWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyApproval_roleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => userUpdateWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => userUpdateWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => userUpdateManyWithWhereWithoutApproval_roleInputSchema),z.lazy(() => userUpdateManyWithWhereWithoutApproval_roleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => userScalarWhereInputSchema),z.lazy(() => userScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const user_role_assignmentUpdateManyWithoutApproval_roleNestedInputSchema: z.ZodType<Prisma.user_role_assignmentUpdateManyWithoutApproval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => user_role_assignmentCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => user_role_assignmentUpsertWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUpsertWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => user_role_assignmentCreateManyApproval_roleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => user_role_assignmentUpdateWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUpdateWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => user_role_assignmentUpdateManyWithWhereWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUpdateManyWithWhereWithoutApproval_roleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => user_role_assignmentScalarWhereInputSchema),z.lazy(() => user_role_assignmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const approval_roleUncheckedUpdateManyWithoutApproval_roleNestedInputSchema: z.ZodType<Prisma.approval_roleUncheckedUpdateManyWithoutApproval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => approval_roleUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => approval_roleCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => approval_roleCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => approval_roleUpsertWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUpsertWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => approval_roleCreateManyApproval_roleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => approval_roleWhereUniqueInputSchema),z.lazy(() => approval_roleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => approval_roleWhereUniqueInputSchema),z.lazy(() => approval_roleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => approval_roleWhereUniqueInputSchema),z.lazy(() => approval_roleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => approval_roleWhereUniqueInputSchema),z.lazy(() => approval_roleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => approval_roleUpdateWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUpdateWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => approval_roleUpdateManyWithWhereWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUpdateManyWithWhereWithoutApproval_roleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => approval_roleScalarWhereInputSchema),z.lazy(() => approval_roleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutApproval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyApproval_roleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutApproval_roleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateManyWithoutApproval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyApproval_roleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutApproval_roleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => inspection_approvalScalarWhereInputSchema),z.lazy(() => inspection_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const userUncheckedUpdateManyWithoutApproval_roleNestedInputSchema: z.ZodType<Prisma.userUncheckedUpdateManyWithoutApproval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutApproval_roleInputSchema),z.lazy(() => userCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => userUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => userCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => userUpsertWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => userUpsertWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyApproval_roleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => userUpdateWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => userUpdateWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => userUpdateManyWithWhereWithoutApproval_roleInputSchema),z.lazy(() => userUpdateManyWithWhereWithoutApproval_roleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => userScalarWhereInputSchema),z.lazy(() => userScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const user_role_assignmentUncheckedUpdateManyWithoutApproval_roleNestedInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedUpdateManyWithoutApproval_roleNestedInput> = z.object({
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentCreateWithoutApproval_roleInputSchema).array(),z.lazy(() => user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => user_role_assignmentCreateOrConnectWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentCreateOrConnectWithoutApproval_roleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => user_role_assignmentUpsertWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUpsertWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => user_role_assignmentCreateManyApproval_roleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => user_role_assignmentUpdateWithWhereUniqueWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUpdateWithWhereUniqueWithoutApproval_roleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => user_role_assignmentUpdateManyWithWhereWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUpdateManyWithWhereWithoutApproval_roleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => user_role_assignmentScalarWhereInputSchema),z.lazy(() => user_role_assignmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const call_typeCreateNestedOneWithoutCallInputSchema: z.ZodType<Prisma.call_typeCreateNestedOneWithoutCallInput> = z.object({
  create: z.union([ z.lazy(() => call_typeCreateWithoutCallInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutCallInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => call_typeCreateOrConnectWithoutCallInputSchema).optional(),
  connect: z.lazy(() => call_typeWhereUniqueInputSchema).optional()
}).strict();

export const client_branchCreateNestedOneWithoutCallInputSchema: z.ZodType<Prisma.client_branchCreateNestedOneWithoutCallInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutCallInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutCallInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => client_branchCreateOrConnectWithoutCallInputSchema).optional(),
  connect: z.lazy(() => client_branchWhereUniqueInputSchema).optional()
}).strict();

export const deptCreateNestedOneWithoutCallInputSchema: z.ZodType<Prisma.deptCreateNestedOneWithoutCallInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutCallInputSchema),z.lazy(() => deptUncheckedCreateWithoutCallInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutCallInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional()
}).strict();

export const deviceCreateNestedOneWithoutCallInputSchema: z.ZodType<Prisma.deviceCreateNestedOneWithoutCallInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutCallInputSchema),z.lazy(() => deviceUncheckedCreateWithoutCallInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deviceCreateOrConnectWithoutCallInputSchema).optional(),
  connect: z.lazy(() => deviceWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutCall_call_receiver_idTouserInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutCall_call_receiver_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutCall_call_receiver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutCall_call_receiver_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutCall_call_receiver_idTouserInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutCall_call_assigner_idTouserInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutCall_call_assigner_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutCall_call_assigner_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutCall_call_assigner_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutCall_call_assigner_idTouserInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const device_inspection_logCreateNestedManyWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logCreateNestedManyWithoutCallInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutCallInputSchema),z.lazy(() => device_inspection_logCreateWithoutCallInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutCallInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutCallInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutCallInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutCallInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyCallInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_inspection_logUncheckedCreateNestedManyWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedCreateNestedManyWithoutCallInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutCallInputSchema),z.lazy(() => device_inspection_logCreateWithoutCallInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutCallInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutCallInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutCallInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutCallInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyCallInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const call_typeUpdateOneRequiredWithoutCallNestedInputSchema: z.ZodType<Prisma.call_typeUpdateOneRequiredWithoutCallNestedInput> = z.object({
  create: z.union([ z.lazy(() => call_typeCreateWithoutCallInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutCallInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => call_typeCreateOrConnectWithoutCallInputSchema).optional(),
  upsert: z.lazy(() => call_typeUpsertWithoutCallInputSchema).optional(),
  connect: z.lazy(() => call_typeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => call_typeUpdateToOneWithWhereWithoutCallInputSchema),z.lazy(() => call_typeUpdateWithoutCallInputSchema),z.lazy(() => call_typeUncheckedUpdateWithoutCallInputSchema) ]).optional(),
}).strict();

export const client_branchUpdateOneRequiredWithoutCallNestedInputSchema: z.ZodType<Prisma.client_branchUpdateOneRequiredWithoutCallNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutCallInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutCallInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => client_branchCreateOrConnectWithoutCallInputSchema).optional(),
  upsert: z.lazy(() => client_branchUpsertWithoutCallInputSchema).optional(),
  connect: z.lazy(() => client_branchWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => client_branchUpdateToOneWithWhereWithoutCallInputSchema),z.lazy(() => client_branchUpdateWithoutCallInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutCallInputSchema) ]).optional(),
}).strict();

export const deptUpdateOneWithoutCallNestedInputSchema: z.ZodType<Prisma.deptUpdateOneWithoutCallNestedInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutCallInputSchema),z.lazy(() => deptUncheckedCreateWithoutCallInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutCallInputSchema).optional(),
  upsert: z.lazy(() => deptUpsertWithoutCallInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => deptWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => deptWhereInputSchema) ]).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deptUpdateToOneWithWhereWithoutCallInputSchema),z.lazy(() => deptUpdateWithoutCallInputSchema),z.lazy(() => deptUncheckedUpdateWithoutCallInputSchema) ]).optional(),
}).strict();

export const deviceUpdateOneWithoutCallNestedInputSchema: z.ZodType<Prisma.deviceUpdateOneWithoutCallNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutCallInputSchema),z.lazy(() => deviceUncheckedCreateWithoutCallInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deviceCreateOrConnectWithoutCallInputSchema).optional(),
  upsert: z.lazy(() => deviceUpsertWithoutCallInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => deviceWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => deviceWhereInputSchema) ]).optional(),
  connect: z.lazy(() => deviceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deviceUpdateToOneWithWhereWithoutCallInputSchema),z.lazy(() => deviceUpdateWithoutCallInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutCallInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutCall_call_receiver_idTouserNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutCall_call_receiver_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutCall_call_receiver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutCall_call_receiver_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutCall_call_receiver_idTouserInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutCall_call_receiver_idTouserInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutCall_call_receiver_idTouserInputSchema),z.lazy(() => userUpdateWithoutCall_call_receiver_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutCall_call_receiver_idTouserInputSchema) ]).optional(),
}).strict();

export const userUpdateOneWithoutCall_call_assigner_idTouserNestedInputSchema: z.ZodType<Prisma.userUpdateOneWithoutCall_call_assigner_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutCall_call_assigner_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutCall_call_assigner_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutCall_call_assigner_idTouserInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutCall_call_assigner_idTouserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => userWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => userWhereInputSchema) ]).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutCall_call_assigner_idTouserInputSchema),z.lazy(() => userUpdateWithoutCall_call_assigner_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutCall_call_assigner_idTouserInputSchema) ]).optional(),
}).strict();

export const device_inspection_logUpdateManyWithoutCallNestedInputSchema: z.ZodType<Prisma.device_inspection_logUpdateManyWithoutCallNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutCallInputSchema),z.lazy(() => device_inspection_logCreateWithoutCallInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutCallInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutCallInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutCallInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutCallInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutCallInputSchema),z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutCallInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyCallInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutCallInputSchema),z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutCallInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutCallInputSchema),z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutCallInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_inspection_logScalarWhereInputSchema),z.lazy(() => device_inspection_logScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_inspection_logUncheckedUpdateManyWithoutCallNestedInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateManyWithoutCallNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutCallInputSchema),z.lazy(() => device_inspection_logCreateWithoutCallInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutCallInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutCallInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutCallInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutCallInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutCallInputSchema),z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutCallInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyCallInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutCallInputSchema),z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutCallInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutCallInputSchema),z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutCallInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_inspection_logScalarWhereInputSchema),z.lazy(() => device_inspection_logScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callCreateNestedManyWithoutCall_typeInputSchema: z.ZodType<Prisma.callCreateNestedManyWithoutCall_typeInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutCall_typeInputSchema),z.lazy(() => callCreateWithoutCall_typeInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutCall_typeInputSchema),z.lazy(() => callUncheckedCreateWithoutCall_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutCall_typeInputSchema),z.lazy(() => callCreateOrConnectWithoutCall_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyCall_typeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const call_typeCreateNestedOneWithoutOther_call_typeInputSchema: z.ZodType<Prisma.call_typeCreateNestedOneWithoutOther_call_typeInput> = z.object({
  create: z.union([ z.lazy(() => call_typeCreateWithoutOther_call_typeInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutOther_call_typeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => call_typeCreateOrConnectWithoutOther_call_typeInputSchema).optional(),
  connect: z.lazy(() => call_typeWhereUniqueInputSchema).optional()
}).strict();

export const call_typeCreateNestedManyWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeCreateNestedManyWithoutCall_typeInput> = z.object({
  create: z.union([ z.lazy(() => call_typeCreateWithoutCall_typeInputSchema),z.lazy(() => call_typeCreateWithoutCall_typeInputSchema).array(),z.lazy(() => call_typeUncheckedCreateWithoutCall_typeInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutCall_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => call_typeCreateOrConnectWithoutCall_typeInputSchema),z.lazy(() => call_typeCreateOrConnectWithoutCall_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => call_typeCreateManyCall_typeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => call_typeWhereUniqueInputSchema),z.lazy(() => call_typeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedCreateNestedManyWithoutCall_typeInputSchema: z.ZodType<Prisma.callUncheckedCreateNestedManyWithoutCall_typeInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutCall_typeInputSchema),z.lazy(() => callCreateWithoutCall_typeInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutCall_typeInputSchema),z.lazy(() => callUncheckedCreateWithoutCall_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutCall_typeInputSchema),z.lazy(() => callCreateOrConnectWithoutCall_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyCall_typeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const call_typeUncheckedCreateNestedManyWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeUncheckedCreateNestedManyWithoutCall_typeInput> = z.object({
  create: z.union([ z.lazy(() => call_typeCreateWithoutCall_typeInputSchema),z.lazy(() => call_typeCreateWithoutCall_typeInputSchema).array(),z.lazy(() => call_typeUncheckedCreateWithoutCall_typeInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutCall_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => call_typeCreateOrConnectWithoutCall_typeInputSchema),z.lazy(() => call_typeCreateOrConnectWithoutCall_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => call_typeCreateManyCall_typeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => call_typeWhereUniqueInputSchema),z.lazy(() => call_typeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const callUpdateManyWithoutCall_typeNestedInputSchema: z.ZodType<Prisma.callUpdateManyWithoutCall_typeNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutCall_typeInputSchema),z.lazy(() => callCreateWithoutCall_typeInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutCall_typeInputSchema),z.lazy(() => callUncheckedCreateWithoutCall_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutCall_typeInputSchema),z.lazy(() => callCreateOrConnectWithoutCall_typeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutCall_typeInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutCall_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyCall_typeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutCall_typeInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutCall_typeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutCall_typeInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutCall_typeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const call_typeUpdateOneWithoutOther_call_typeNestedInputSchema: z.ZodType<Prisma.call_typeUpdateOneWithoutOther_call_typeNestedInput> = z.object({
  create: z.union([ z.lazy(() => call_typeCreateWithoutOther_call_typeInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutOther_call_typeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => call_typeCreateOrConnectWithoutOther_call_typeInputSchema).optional(),
  upsert: z.lazy(() => call_typeUpsertWithoutOther_call_typeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => call_typeWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => call_typeWhereInputSchema) ]).optional(),
  connect: z.lazy(() => call_typeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => call_typeUpdateToOneWithWhereWithoutOther_call_typeInputSchema),z.lazy(() => call_typeUpdateWithoutOther_call_typeInputSchema),z.lazy(() => call_typeUncheckedUpdateWithoutOther_call_typeInputSchema) ]).optional(),
}).strict();

export const call_typeUpdateManyWithoutCall_typeNestedInputSchema: z.ZodType<Prisma.call_typeUpdateManyWithoutCall_typeNestedInput> = z.object({
  create: z.union([ z.lazy(() => call_typeCreateWithoutCall_typeInputSchema),z.lazy(() => call_typeCreateWithoutCall_typeInputSchema).array(),z.lazy(() => call_typeUncheckedCreateWithoutCall_typeInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutCall_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => call_typeCreateOrConnectWithoutCall_typeInputSchema),z.lazy(() => call_typeCreateOrConnectWithoutCall_typeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => call_typeUpsertWithWhereUniqueWithoutCall_typeInputSchema),z.lazy(() => call_typeUpsertWithWhereUniqueWithoutCall_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => call_typeCreateManyCall_typeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => call_typeWhereUniqueInputSchema),z.lazy(() => call_typeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => call_typeWhereUniqueInputSchema),z.lazy(() => call_typeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => call_typeWhereUniqueInputSchema),z.lazy(() => call_typeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => call_typeWhereUniqueInputSchema),z.lazy(() => call_typeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => call_typeUpdateWithWhereUniqueWithoutCall_typeInputSchema),z.lazy(() => call_typeUpdateWithWhereUniqueWithoutCall_typeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => call_typeUpdateManyWithWhereWithoutCall_typeInputSchema),z.lazy(() => call_typeUpdateManyWithWhereWithoutCall_typeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => call_typeScalarWhereInputSchema),z.lazy(() => call_typeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedUpdateManyWithoutCall_typeNestedInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutCall_typeNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutCall_typeInputSchema),z.lazy(() => callCreateWithoutCall_typeInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutCall_typeInputSchema),z.lazy(() => callUncheckedCreateWithoutCall_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutCall_typeInputSchema),z.lazy(() => callCreateOrConnectWithoutCall_typeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutCall_typeInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutCall_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyCall_typeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutCall_typeInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutCall_typeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutCall_typeInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutCall_typeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const call_typeUncheckedUpdateManyWithoutCall_typeNestedInputSchema: z.ZodType<Prisma.call_typeUncheckedUpdateManyWithoutCall_typeNestedInput> = z.object({
  create: z.union([ z.lazy(() => call_typeCreateWithoutCall_typeInputSchema),z.lazy(() => call_typeCreateWithoutCall_typeInputSchema).array(),z.lazy(() => call_typeUncheckedCreateWithoutCall_typeInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutCall_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => call_typeCreateOrConnectWithoutCall_typeInputSchema),z.lazy(() => call_typeCreateOrConnectWithoutCall_typeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => call_typeUpsertWithWhereUniqueWithoutCall_typeInputSchema),z.lazy(() => call_typeUpsertWithWhereUniqueWithoutCall_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => call_typeCreateManyCall_typeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => call_typeWhereUniqueInputSchema),z.lazy(() => call_typeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => call_typeWhereUniqueInputSchema),z.lazy(() => call_typeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => call_typeWhereUniqueInputSchema),z.lazy(() => call_typeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => call_typeWhereUniqueInputSchema),z.lazy(() => call_typeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => call_typeUpdateWithWhereUniqueWithoutCall_typeInputSchema),z.lazy(() => call_typeUpdateWithWhereUniqueWithoutCall_typeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => call_typeUpdateManyWithWhereWithoutCall_typeInputSchema),z.lazy(() => call_typeUpdateManyWithWhereWithoutCall_typeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => call_typeScalarWhereInputSchema),z.lazy(() => call_typeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const clientCreateNestedOneWithoutOther_clientInputSchema: z.ZodType<Prisma.clientCreateNestedOneWithoutOther_clientInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutOther_clientInputSchema),z.lazy(() => clientUncheckedCreateWithoutOther_clientInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => clientCreateOrConnectWithoutOther_clientInputSchema).optional(),
  connect: z.lazy(() => clientWhereUniqueInputSchema).optional()
}).strict();

export const clientCreateNestedManyWithoutClientInputSchema: z.ZodType<Prisma.clientCreateNestedManyWithoutClientInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutClientInputSchema),z.lazy(() => clientCreateWithoutClientInputSchema).array(),z.lazy(() => clientUncheckedCreateWithoutClientInputSchema),z.lazy(() => clientUncheckedCreateWithoutClientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => clientCreateOrConnectWithoutClientInputSchema),z.lazy(() => clientCreateOrConnectWithoutClientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => clientCreateManyClientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const client_rateCreateNestedOneWithoutClientInputSchema: z.ZodType<Prisma.client_rateCreateNestedOneWithoutClientInput> = z.object({
  create: z.union([ z.lazy(() => client_rateCreateWithoutClientInputSchema),z.lazy(() => client_rateUncheckedCreateWithoutClientInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => client_rateCreateOrConnectWithoutClientInputSchema).optional(),
  connect: z.lazy(() => client_rateWhereUniqueInputSchema).optional()
}).strict();

export const client_branchCreateNestedManyWithoutClientInputSchema: z.ZodType<Prisma.client_branchCreateNestedManyWithoutClientInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutClientInputSchema),z.lazy(() => client_branchCreateWithoutClientInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutClientInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutClientInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutClientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyClientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const clientUncheckedCreateNestedManyWithoutClientInputSchema: z.ZodType<Prisma.clientUncheckedCreateNestedManyWithoutClientInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutClientInputSchema),z.lazy(() => clientCreateWithoutClientInputSchema).array(),z.lazy(() => clientUncheckedCreateWithoutClientInputSchema),z.lazy(() => clientUncheckedCreateWithoutClientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => clientCreateOrConnectWithoutClientInputSchema),z.lazy(() => clientCreateOrConnectWithoutClientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => clientCreateManyClientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const client_branchUncheckedCreateNestedManyWithoutClientInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateNestedManyWithoutClientInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutClientInputSchema),z.lazy(() => client_branchCreateWithoutClientInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutClientInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutClientInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutClientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyClientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const clientUpdateOneWithoutOther_clientNestedInputSchema: z.ZodType<Prisma.clientUpdateOneWithoutOther_clientNestedInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutOther_clientInputSchema),z.lazy(() => clientUncheckedCreateWithoutOther_clientInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => clientCreateOrConnectWithoutOther_clientInputSchema).optional(),
  upsert: z.lazy(() => clientUpsertWithoutOther_clientInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => clientWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => clientWhereInputSchema) ]).optional(),
  connect: z.lazy(() => clientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => clientUpdateToOneWithWhereWithoutOther_clientInputSchema),z.lazy(() => clientUpdateWithoutOther_clientInputSchema),z.lazy(() => clientUncheckedUpdateWithoutOther_clientInputSchema) ]).optional(),
}).strict();

export const clientUpdateManyWithoutClientNestedInputSchema: z.ZodType<Prisma.clientUpdateManyWithoutClientNestedInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutClientInputSchema),z.lazy(() => clientCreateWithoutClientInputSchema).array(),z.lazy(() => clientUncheckedCreateWithoutClientInputSchema),z.lazy(() => clientUncheckedCreateWithoutClientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => clientCreateOrConnectWithoutClientInputSchema),z.lazy(() => clientCreateOrConnectWithoutClientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => clientUpsertWithWhereUniqueWithoutClientInputSchema),z.lazy(() => clientUpsertWithWhereUniqueWithoutClientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => clientCreateManyClientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => clientUpdateWithWhereUniqueWithoutClientInputSchema),z.lazy(() => clientUpdateWithWhereUniqueWithoutClientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => clientUpdateManyWithWhereWithoutClientInputSchema),z.lazy(() => clientUpdateManyWithWhereWithoutClientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => clientScalarWhereInputSchema),z.lazy(() => clientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const client_rateUpdateOneWithoutClientNestedInputSchema: z.ZodType<Prisma.client_rateUpdateOneWithoutClientNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_rateCreateWithoutClientInputSchema),z.lazy(() => client_rateUncheckedCreateWithoutClientInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => client_rateCreateOrConnectWithoutClientInputSchema).optional(),
  upsert: z.lazy(() => client_rateUpsertWithoutClientInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => client_rateWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => client_rateWhereInputSchema) ]).optional(),
  connect: z.lazy(() => client_rateWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => client_rateUpdateToOneWithWhereWithoutClientInputSchema),z.lazy(() => client_rateUpdateWithoutClientInputSchema),z.lazy(() => client_rateUncheckedUpdateWithoutClientInputSchema) ]).optional(),
}).strict();

export const client_branchUpdateManyWithoutClientNestedInputSchema: z.ZodType<Prisma.client_branchUpdateManyWithoutClientNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutClientInputSchema),z.lazy(() => client_branchCreateWithoutClientInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutClientInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutClientInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutClientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => client_branchUpsertWithWhereUniqueWithoutClientInputSchema),z.lazy(() => client_branchUpsertWithWhereUniqueWithoutClientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyClientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => client_branchUpdateWithWhereUniqueWithoutClientInputSchema),z.lazy(() => client_branchUpdateWithWhereUniqueWithoutClientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => client_branchUpdateManyWithWhereWithoutClientInputSchema),z.lazy(() => client_branchUpdateManyWithWhereWithoutClientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => client_branchScalarWhereInputSchema),z.lazy(() => client_branchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const clientUncheckedUpdateManyWithoutClientNestedInputSchema: z.ZodType<Prisma.clientUncheckedUpdateManyWithoutClientNestedInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutClientInputSchema),z.lazy(() => clientCreateWithoutClientInputSchema).array(),z.lazy(() => clientUncheckedCreateWithoutClientInputSchema),z.lazy(() => clientUncheckedCreateWithoutClientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => clientCreateOrConnectWithoutClientInputSchema),z.lazy(() => clientCreateOrConnectWithoutClientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => clientUpsertWithWhereUniqueWithoutClientInputSchema),z.lazy(() => clientUpsertWithWhereUniqueWithoutClientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => clientCreateManyClientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => clientUpdateWithWhereUniqueWithoutClientInputSchema),z.lazy(() => clientUpdateWithWhereUniqueWithoutClientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => clientUpdateManyWithWhereWithoutClientInputSchema),z.lazy(() => clientUpdateManyWithWhereWithoutClientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => clientScalarWhereInputSchema),z.lazy(() => clientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const client_branchUncheckedUpdateManyWithoutClientNestedInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateManyWithoutClientNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutClientInputSchema),z.lazy(() => client_branchCreateWithoutClientInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutClientInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutClientInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutClientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => client_branchUpsertWithWhereUniqueWithoutClientInputSchema),z.lazy(() => client_branchUpsertWithWhereUniqueWithoutClientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyClientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => client_branchUpdateWithWhereUniqueWithoutClientInputSchema),z.lazy(() => client_branchUpdateWithWhereUniqueWithoutClientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => client_branchUpdateManyWithWhereWithoutClientInputSchema),z.lazy(() => client_branchUpdateManyWithWhereWithoutClientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => client_branchScalarWhereInputSchema),z.lazy(() => client_branchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callCreateNestedManyWithoutClient_branchInputSchema: z.ZodType<Prisma.callCreateNestedManyWithoutClient_branchInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutClient_branchInputSchema),z.lazy(() => callCreateWithoutClient_branchInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutClient_branchInputSchema),z.lazy(() => callUncheckedCreateWithoutClient_branchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutClient_branchInputSchema),z.lazy(() => callCreateOrConnectWithoutClient_branchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyClient_branchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const clientCreateNestedOneWithoutClient_branchInputSchema: z.ZodType<Prisma.clientCreateNestedOneWithoutClient_branchInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutClient_branchInputSchema),z.lazy(() => clientUncheckedCreateWithoutClient_branchInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => clientCreateOrConnectWithoutClient_branchInputSchema).optional(),
  connect: z.lazy(() => clientWhereUniqueInputSchema).optional()
}).strict();

export const client_rateCreateNestedOneWithoutClient_branchInputSchema: z.ZodType<Prisma.client_rateCreateNestedOneWithoutClient_branchInput> = z.object({
  create: z.union([ z.lazy(() => client_rateCreateWithoutClient_branchInputSchema),z.lazy(() => client_rateUncheckedCreateWithoutClient_branchInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => client_rateCreateOrConnectWithoutClient_branchInputSchema).optional(),
  connect: z.lazy(() => client_rateWhereUniqueInputSchema).optional()
}).strict();

export const deptCreateNestedOneWithoutClient_branchInputSchema: z.ZodType<Prisma.deptCreateNestedOneWithoutClient_branchInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutClient_branchInputSchema),z.lazy(() => deptUncheckedCreateWithoutClient_branchInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutClient_branchInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional()
}).strict();

export const sigunguCreateNestedOneWithoutClient_branchInputSchema: z.ZodType<Prisma.sigunguCreateNestedOneWithoutClient_branchInput> = z.object({
  create: z.union([ z.lazy(() => sigunguCreateWithoutClient_branchInputSchema),z.lazy(() => sigunguUncheckedCreateWithoutClient_branchInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sigunguCreateOrConnectWithoutClient_branchInputSchema).optional(),
  connect: z.lazy(() => sigunguWhereUniqueInputSchema).optional()
}).strict();

export const locationCreateNestedManyWithoutClient_branchInputSchema: z.ZodType<Prisma.locationCreateNestedManyWithoutClient_branchInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutClient_branchInputSchema),z.lazy(() => locationCreateWithoutClient_branchInputSchema).array(),z.lazy(() => locationUncheckedCreateWithoutClient_branchInputSchema),z.lazy(() => locationUncheckedCreateWithoutClient_branchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => locationCreateOrConnectWithoutClient_branchInputSchema),z.lazy(() => locationCreateOrConnectWithoutClient_branchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => locationCreateManyClient_branchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedCreateNestedManyWithoutClient_branchInputSchema: z.ZodType<Prisma.callUncheckedCreateNestedManyWithoutClient_branchInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutClient_branchInputSchema),z.lazy(() => callCreateWithoutClient_branchInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutClient_branchInputSchema),z.lazy(() => callUncheckedCreateWithoutClient_branchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutClient_branchInputSchema),z.lazy(() => callCreateOrConnectWithoutClient_branchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyClient_branchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const locationUncheckedCreateNestedManyWithoutClient_branchInputSchema: z.ZodType<Prisma.locationUncheckedCreateNestedManyWithoutClient_branchInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutClient_branchInputSchema),z.lazy(() => locationCreateWithoutClient_branchInputSchema).array(),z.lazy(() => locationUncheckedCreateWithoutClient_branchInputSchema),z.lazy(() => locationUncheckedCreateWithoutClient_branchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => locationCreateOrConnectWithoutClient_branchInputSchema),z.lazy(() => locationCreateOrConnectWithoutClient_branchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => locationCreateManyClient_branchInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const callUpdateManyWithoutClient_branchNestedInputSchema: z.ZodType<Prisma.callUpdateManyWithoutClient_branchNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutClient_branchInputSchema),z.lazy(() => callCreateWithoutClient_branchInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutClient_branchInputSchema),z.lazy(() => callUncheckedCreateWithoutClient_branchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutClient_branchInputSchema),z.lazy(() => callCreateOrConnectWithoutClient_branchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutClient_branchInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutClient_branchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyClient_branchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutClient_branchInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutClient_branchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutClient_branchInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutClient_branchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const clientUpdateOneRequiredWithoutClient_branchNestedInputSchema: z.ZodType<Prisma.clientUpdateOneRequiredWithoutClient_branchNestedInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutClient_branchInputSchema),z.lazy(() => clientUncheckedCreateWithoutClient_branchInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => clientCreateOrConnectWithoutClient_branchInputSchema).optional(),
  upsert: z.lazy(() => clientUpsertWithoutClient_branchInputSchema).optional(),
  connect: z.lazy(() => clientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => clientUpdateToOneWithWhereWithoutClient_branchInputSchema),z.lazy(() => clientUpdateWithoutClient_branchInputSchema),z.lazy(() => clientUncheckedUpdateWithoutClient_branchInputSchema) ]).optional(),
}).strict();

export const client_rateUpdateOneRequiredWithoutClient_branchNestedInputSchema: z.ZodType<Prisma.client_rateUpdateOneRequiredWithoutClient_branchNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_rateCreateWithoutClient_branchInputSchema),z.lazy(() => client_rateUncheckedCreateWithoutClient_branchInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => client_rateCreateOrConnectWithoutClient_branchInputSchema).optional(),
  upsert: z.lazy(() => client_rateUpsertWithoutClient_branchInputSchema).optional(),
  connect: z.lazy(() => client_rateWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => client_rateUpdateToOneWithWhereWithoutClient_branchInputSchema),z.lazy(() => client_rateUpdateWithoutClient_branchInputSchema),z.lazy(() => client_rateUncheckedUpdateWithoutClient_branchInputSchema) ]).optional(),
}).strict();

export const deptUpdateOneRequiredWithoutClient_branchNestedInputSchema: z.ZodType<Prisma.deptUpdateOneRequiredWithoutClient_branchNestedInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutClient_branchInputSchema),z.lazy(() => deptUncheckedCreateWithoutClient_branchInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutClient_branchInputSchema).optional(),
  upsert: z.lazy(() => deptUpsertWithoutClient_branchInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deptUpdateToOneWithWhereWithoutClient_branchInputSchema),z.lazy(() => deptUpdateWithoutClient_branchInputSchema),z.lazy(() => deptUncheckedUpdateWithoutClient_branchInputSchema) ]).optional(),
}).strict();

export const sigunguUpdateOneRequiredWithoutClient_branchNestedInputSchema: z.ZodType<Prisma.sigunguUpdateOneRequiredWithoutClient_branchNestedInput> = z.object({
  create: z.union([ z.lazy(() => sigunguCreateWithoutClient_branchInputSchema),z.lazy(() => sigunguUncheckedCreateWithoutClient_branchInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sigunguCreateOrConnectWithoutClient_branchInputSchema).optional(),
  upsert: z.lazy(() => sigunguUpsertWithoutClient_branchInputSchema).optional(),
  connect: z.lazy(() => sigunguWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => sigunguUpdateToOneWithWhereWithoutClient_branchInputSchema),z.lazy(() => sigunguUpdateWithoutClient_branchInputSchema),z.lazy(() => sigunguUncheckedUpdateWithoutClient_branchInputSchema) ]).optional(),
}).strict();

export const locationUpdateManyWithoutClient_branchNestedInputSchema: z.ZodType<Prisma.locationUpdateManyWithoutClient_branchNestedInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutClient_branchInputSchema),z.lazy(() => locationCreateWithoutClient_branchInputSchema).array(),z.lazy(() => locationUncheckedCreateWithoutClient_branchInputSchema),z.lazy(() => locationUncheckedCreateWithoutClient_branchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => locationCreateOrConnectWithoutClient_branchInputSchema),z.lazy(() => locationCreateOrConnectWithoutClient_branchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => locationUpsertWithWhereUniqueWithoutClient_branchInputSchema),z.lazy(() => locationUpsertWithWhereUniqueWithoutClient_branchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => locationCreateManyClient_branchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => locationUpdateWithWhereUniqueWithoutClient_branchInputSchema),z.lazy(() => locationUpdateWithWhereUniqueWithoutClient_branchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => locationUpdateManyWithWhereWithoutClient_branchInputSchema),z.lazy(() => locationUpdateManyWithWhereWithoutClient_branchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => locationScalarWhereInputSchema),z.lazy(() => locationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedUpdateManyWithoutClient_branchNestedInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutClient_branchNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutClient_branchInputSchema),z.lazy(() => callCreateWithoutClient_branchInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutClient_branchInputSchema),z.lazy(() => callUncheckedCreateWithoutClient_branchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutClient_branchInputSchema),z.lazy(() => callCreateOrConnectWithoutClient_branchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutClient_branchInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutClient_branchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyClient_branchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutClient_branchInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutClient_branchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutClient_branchInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutClient_branchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const locationUncheckedUpdateManyWithoutClient_branchNestedInputSchema: z.ZodType<Prisma.locationUncheckedUpdateManyWithoutClient_branchNestedInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutClient_branchInputSchema),z.lazy(() => locationCreateWithoutClient_branchInputSchema).array(),z.lazy(() => locationUncheckedCreateWithoutClient_branchInputSchema),z.lazy(() => locationUncheckedCreateWithoutClient_branchInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => locationCreateOrConnectWithoutClient_branchInputSchema),z.lazy(() => locationCreateOrConnectWithoutClient_branchInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => locationUpsertWithWhereUniqueWithoutClient_branchInputSchema),z.lazy(() => locationUpsertWithWhereUniqueWithoutClient_branchInputSchema).array() ]).optional(),
  createMany: z.lazy(() => locationCreateManyClient_branchInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => locationUpdateWithWhereUniqueWithoutClient_branchInputSchema),z.lazy(() => locationUpdateWithWhereUniqueWithoutClient_branchInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => locationUpdateManyWithWhereWithoutClient_branchInputSchema),z.lazy(() => locationUpdateManyWithWhereWithoutClient_branchInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => locationScalarWhereInputSchema),z.lazy(() => locationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const clientCreateNestedManyWithoutClient_rateInputSchema: z.ZodType<Prisma.clientCreateNestedManyWithoutClient_rateInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutClient_rateInputSchema),z.lazy(() => clientCreateWithoutClient_rateInputSchema).array(),z.lazy(() => clientUncheckedCreateWithoutClient_rateInputSchema),z.lazy(() => clientUncheckedCreateWithoutClient_rateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => clientCreateOrConnectWithoutClient_rateInputSchema),z.lazy(() => clientCreateOrConnectWithoutClient_rateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => clientCreateManyClient_rateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const client_branchCreateNestedManyWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchCreateNestedManyWithoutClient_rateInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutClient_rateInputSchema),z.lazy(() => client_branchCreateWithoutClient_rateInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutClient_rateInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClient_rateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutClient_rateInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutClient_rateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyClient_rateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const clientUncheckedCreateNestedManyWithoutClient_rateInputSchema: z.ZodType<Prisma.clientUncheckedCreateNestedManyWithoutClient_rateInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutClient_rateInputSchema),z.lazy(() => clientCreateWithoutClient_rateInputSchema).array(),z.lazy(() => clientUncheckedCreateWithoutClient_rateInputSchema),z.lazy(() => clientUncheckedCreateWithoutClient_rateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => clientCreateOrConnectWithoutClient_rateInputSchema),z.lazy(() => clientCreateOrConnectWithoutClient_rateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => clientCreateManyClient_rateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const client_branchUncheckedCreateNestedManyWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateNestedManyWithoutClient_rateInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutClient_rateInputSchema),z.lazy(() => client_branchCreateWithoutClient_rateInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutClient_rateInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClient_rateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutClient_rateInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutClient_rateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyClient_rateInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const clientUpdateManyWithoutClient_rateNestedInputSchema: z.ZodType<Prisma.clientUpdateManyWithoutClient_rateNestedInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutClient_rateInputSchema),z.lazy(() => clientCreateWithoutClient_rateInputSchema).array(),z.lazy(() => clientUncheckedCreateWithoutClient_rateInputSchema),z.lazy(() => clientUncheckedCreateWithoutClient_rateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => clientCreateOrConnectWithoutClient_rateInputSchema),z.lazy(() => clientCreateOrConnectWithoutClient_rateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => clientUpsertWithWhereUniqueWithoutClient_rateInputSchema),z.lazy(() => clientUpsertWithWhereUniqueWithoutClient_rateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => clientCreateManyClient_rateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => clientUpdateWithWhereUniqueWithoutClient_rateInputSchema),z.lazy(() => clientUpdateWithWhereUniqueWithoutClient_rateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => clientUpdateManyWithWhereWithoutClient_rateInputSchema),z.lazy(() => clientUpdateManyWithWhereWithoutClient_rateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => clientScalarWhereInputSchema),z.lazy(() => clientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const client_branchUpdateManyWithoutClient_rateNestedInputSchema: z.ZodType<Prisma.client_branchUpdateManyWithoutClient_rateNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutClient_rateInputSchema),z.lazy(() => client_branchCreateWithoutClient_rateInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutClient_rateInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClient_rateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutClient_rateInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutClient_rateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => client_branchUpsertWithWhereUniqueWithoutClient_rateInputSchema),z.lazy(() => client_branchUpsertWithWhereUniqueWithoutClient_rateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyClient_rateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => client_branchUpdateWithWhereUniqueWithoutClient_rateInputSchema),z.lazy(() => client_branchUpdateWithWhereUniqueWithoutClient_rateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => client_branchUpdateManyWithWhereWithoutClient_rateInputSchema),z.lazy(() => client_branchUpdateManyWithWhereWithoutClient_rateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => client_branchScalarWhereInputSchema),z.lazy(() => client_branchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const clientUncheckedUpdateManyWithoutClient_rateNestedInputSchema: z.ZodType<Prisma.clientUncheckedUpdateManyWithoutClient_rateNestedInput> = z.object({
  create: z.union([ z.lazy(() => clientCreateWithoutClient_rateInputSchema),z.lazy(() => clientCreateWithoutClient_rateInputSchema).array(),z.lazy(() => clientUncheckedCreateWithoutClient_rateInputSchema),z.lazy(() => clientUncheckedCreateWithoutClient_rateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => clientCreateOrConnectWithoutClient_rateInputSchema),z.lazy(() => clientCreateOrConnectWithoutClient_rateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => clientUpsertWithWhereUniqueWithoutClient_rateInputSchema),z.lazy(() => clientUpsertWithWhereUniqueWithoutClient_rateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => clientCreateManyClient_rateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => clientWhereUniqueInputSchema),z.lazy(() => clientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => clientUpdateWithWhereUniqueWithoutClient_rateInputSchema),z.lazy(() => clientUpdateWithWhereUniqueWithoutClient_rateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => clientUpdateManyWithWhereWithoutClient_rateInputSchema),z.lazy(() => clientUpdateManyWithWhereWithoutClient_rateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => clientScalarWhereInputSchema),z.lazy(() => clientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const client_branchUncheckedUpdateManyWithoutClient_rateNestedInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateManyWithoutClient_rateNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutClient_rateInputSchema),z.lazy(() => client_branchCreateWithoutClient_rateInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutClient_rateInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClient_rateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutClient_rateInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutClient_rateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => client_branchUpsertWithWhereUniqueWithoutClient_rateInputSchema),z.lazy(() => client_branchUpsertWithWhereUniqueWithoutClient_rateInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyClient_rateInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => client_branchUpdateWithWhereUniqueWithoutClient_rateInputSchema),z.lazy(() => client_branchUpdateWithWhereUniqueWithoutClient_rateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => client_branchUpdateManyWithWhereWithoutClient_rateInputSchema),z.lazy(() => client_branchUpdateManyWithWhereWithoutClient_rateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => client_branchScalarWhereInputSchema),z.lazy(() => client_branchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_consumable_compatibilityCreateNestedManyWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateNestedManyWithoutConsumable_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema).array(),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutConsumable_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_consumable_compatibilityCreateManyConsumable_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_consumable_compatibilityUncheckedCreateNestedManyWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedCreateNestedManyWithoutConsumable_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema).array(),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutConsumable_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_consumable_compatibilityCreateManyConsumable_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_consumable_compatibilityUpdateManyWithoutConsumable_modelNestedInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateManyWithoutConsumable_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema).array(),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutConsumable_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_consumable_compatibilityUpsertWithWhereUniqueWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpsertWithWhereUniqueWithoutConsumable_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_consumable_compatibilityCreateManyConsumable_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_consumable_compatibilityUpdateWithWhereUniqueWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpdateWithWhereUniqueWithoutConsumable_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_consumable_compatibilityUpdateManyWithWhereWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpdateManyWithWhereWithoutConsumable_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema),z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_consumable_compatibilityUncheckedUpdateManyWithoutConsumable_modelNestedInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedUpdateManyWithoutConsumable_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema).array(),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutConsumable_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_consumable_compatibilityUpsertWithWhereUniqueWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpsertWithWhereUniqueWithoutConsumable_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_consumable_compatibilityCreateManyConsumable_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_consumable_compatibilityUpdateWithWhereUniqueWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpdateWithWhereUniqueWithoutConsumable_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_consumable_compatibilityUpdateManyWithWhereWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpdateManyWithWhereWithoutConsumable_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema),z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callCreateNestedManyWithoutDeptInputSchema: z.ZodType<Prisma.callCreateNestedManyWithoutDeptInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutDeptInputSchema),z.lazy(() => callCreateWithoutDeptInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutDeptInputSchema),z.lazy(() => callUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutDeptInputSchema),z.lazy(() => callCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyDeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const client_branchCreateNestedManyWithoutDeptInputSchema: z.ZodType<Prisma.client_branchCreateNestedManyWithoutDeptInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutDeptInputSchema),z.lazy(() => client_branchCreateWithoutDeptInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutDeptInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutDeptInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyDeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deptCreateNestedOneWithoutOther_deptInputSchema: z.ZodType<Prisma.deptCreateNestedOneWithoutOther_deptInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutOther_deptInputSchema),z.lazy(() => deptUncheckedCreateWithoutOther_deptInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutOther_deptInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional()
}).strict();

export const deptCreateNestedManyWithoutDeptInputSchema: z.ZodType<Prisma.deptCreateNestedManyWithoutDeptInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutDeptInputSchema),z.lazy(() => deptCreateWithoutDeptInputSchema).array(),z.lazy(() => deptUncheckedCreateWithoutDeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deptCreateOrConnectWithoutDeptInputSchema),z.lazy(() => deptCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deptCreateManyDeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deptWhereUniqueInputSchema),z.lazy(() => deptWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceCreateNestedManyWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDept_device_owner_dept_idTodeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDept_device_mgmt_dept_idTodeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const userCreateNestedManyWithoutDeptInputSchema: z.ZodType<Prisma.userCreateNestedManyWithoutDeptInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDeptInputSchema),z.lazy(() => userCreateWithoutDeptInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutDeptInputSchema),z.lazy(() => userUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutDeptInputSchema),z.lazy(() => userCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyDeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const warehouseCreateNestedManyWithoutDeptInputSchema: z.ZodType<Prisma.warehouseCreateNestedManyWithoutDeptInput> = z.object({
  create: z.union([ z.lazy(() => warehouseCreateWithoutDeptInputSchema),z.lazy(() => warehouseCreateWithoutDeptInputSchema).array(),z.lazy(() => warehouseUncheckedCreateWithoutDeptInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => warehouseCreateOrConnectWithoutDeptInputSchema),z.lazy(() => warehouseCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => warehouseCreateManyDeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => warehouseWhereUniqueInputSchema),z.lazy(() => warehouseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedCreateNestedManyWithoutDeptInputSchema: z.ZodType<Prisma.callUncheckedCreateNestedManyWithoutDeptInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutDeptInputSchema),z.lazy(() => callCreateWithoutDeptInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutDeptInputSchema),z.lazy(() => callUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutDeptInputSchema),z.lazy(() => callCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyDeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const client_branchUncheckedCreateNestedManyWithoutDeptInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateNestedManyWithoutDeptInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutDeptInputSchema),z.lazy(() => client_branchCreateWithoutDeptInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutDeptInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutDeptInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyDeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deptUncheckedCreateNestedManyWithoutDeptInputSchema: z.ZodType<Prisma.deptUncheckedCreateNestedManyWithoutDeptInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutDeptInputSchema),z.lazy(() => deptCreateWithoutDeptInputSchema).array(),z.lazy(() => deptUncheckedCreateWithoutDeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deptCreateOrConnectWithoutDeptInputSchema),z.lazy(() => deptCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deptCreateManyDeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deptWhereUniqueInputSchema),z.lazy(() => deptWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceUncheckedCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUncheckedCreateNestedManyWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDept_device_owner_dept_idTodeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceUncheckedCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUncheckedCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDept_device_mgmt_dept_idTodeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const userUncheckedCreateNestedManyWithoutDeptInputSchema: z.ZodType<Prisma.userUncheckedCreateNestedManyWithoutDeptInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDeptInputSchema),z.lazy(() => userCreateWithoutDeptInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutDeptInputSchema),z.lazy(() => userUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutDeptInputSchema),z.lazy(() => userCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyDeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const warehouseUncheckedCreateNestedManyWithoutDeptInputSchema: z.ZodType<Prisma.warehouseUncheckedCreateNestedManyWithoutDeptInput> = z.object({
  create: z.union([ z.lazy(() => warehouseCreateWithoutDeptInputSchema),z.lazy(() => warehouseCreateWithoutDeptInputSchema).array(),z.lazy(() => warehouseUncheckedCreateWithoutDeptInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => warehouseCreateOrConnectWithoutDeptInputSchema),z.lazy(() => warehouseCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => warehouseCreateManyDeptInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => warehouseWhereUniqueInputSchema),z.lazy(() => warehouseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const callUpdateManyWithoutDeptNestedInputSchema: z.ZodType<Prisma.callUpdateManyWithoutDeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutDeptInputSchema),z.lazy(() => callCreateWithoutDeptInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutDeptInputSchema),z.lazy(() => callUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutDeptInputSchema),z.lazy(() => callCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyDeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutDeptInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutDeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const client_branchUpdateManyWithoutDeptNestedInputSchema: z.ZodType<Prisma.client_branchUpdateManyWithoutDeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutDeptInputSchema),z.lazy(() => client_branchCreateWithoutDeptInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutDeptInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutDeptInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => client_branchUpsertWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => client_branchUpsertWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyDeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => client_branchUpdateWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => client_branchUpdateWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => client_branchUpdateManyWithWhereWithoutDeptInputSchema),z.lazy(() => client_branchUpdateManyWithWhereWithoutDeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => client_branchScalarWhereInputSchema),z.lazy(() => client_branchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deptUpdateOneWithoutOther_deptNestedInputSchema: z.ZodType<Prisma.deptUpdateOneWithoutOther_deptNestedInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutOther_deptInputSchema),z.lazy(() => deptUncheckedCreateWithoutOther_deptInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutOther_deptInputSchema).optional(),
  upsert: z.lazy(() => deptUpsertWithoutOther_deptInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => deptWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => deptWhereInputSchema) ]).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deptUpdateToOneWithWhereWithoutOther_deptInputSchema),z.lazy(() => deptUpdateWithoutOther_deptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutOther_deptInputSchema) ]).optional(),
}).strict();

export const deptUpdateManyWithoutDeptNestedInputSchema: z.ZodType<Prisma.deptUpdateManyWithoutDeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutDeptInputSchema),z.lazy(() => deptCreateWithoutDeptInputSchema).array(),z.lazy(() => deptUncheckedCreateWithoutDeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deptCreateOrConnectWithoutDeptInputSchema),z.lazy(() => deptCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deptUpsertWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => deptUpsertWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deptCreateManyDeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deptWhereUniqueInputSchema),z.lazy(() => deptWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deptWhereUniqueInputSchema),z.lazy(() => deptWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deptWhereUniqueInputSchema),z.lazy(() => deptWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deptWhereUniqueInputSchema),z.lazy(() => deptWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deptUpdateWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => deptUpdateWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deptUpdateManyWithWhereWithoutDeptInputSchema),z.lazy(() => deptUpdateManyWithWhereWithoutDeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deptScalarWhereInputSchema),z.lazy(() => deptScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema: z.ZodType<Prisma.deviceUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDept_device_owner_dept_idTodeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema: z.ZodType<Prisma.deviceUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDept_device_mgmt_dept_idTodeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const userUpdateManyWithoutDeptNestedInputSchema: z.ZodType<Prisma.userUpdateManyWithoutDeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDeptInputSchema),z.lazy(() => userCreateWithoutDeptInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutDeptInputSchema),z.lazy(() => userUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutDeptInputSchema),z.lazy(() => userCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => userUpsertWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => userUpsertWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyDeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => userUpdateWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => userUpdateWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => userUpdateManyWithWhereWithoutDeptInputSchema),z.lazy(() => userUpdateManyWithWhereWithoutDeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => userScalarWhereInputSchema),z.lazy(() => userScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const warehouseUpdateManyWithoutDeptNestedInputSchema: z.ZodType<Prisma.warehouseUpdateManyWithoutDeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => warehouseCreateWithoutDeptInputSchema),z.lazy(() => warehouseCreateWithoutDeptInputSchema).array(),z.lazy(() => warehouseUncheckedCreateWithoutDeptInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => warehouseCreateOrConnectWithoutDeptInputSchema),z.lazy(() => warehouseCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => warehouseUpsertWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => warehouseUpsertWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => warehouseCreateManyDeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => warehouseWhereUniqueInputSchema),z.lazy(() => warehouseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => warehouseWhereUniqueInputSchema),z.lazy(() => warehouseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => warehouseWhereUniqueInputSchema),z.lazy(() => warehouseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => warehouseWhereUniqueInputSchema),z.lazy(() => warehouseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => warehouseUpdateWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => warehouseUpdateWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => warehouseUpdateManyWithWhereWithoutDeptInputSchema),z.lazy(() => warehouseUpdateManyWithWhereWithoutDeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => warehouseScalarWhereInputSchema),z.lazy(() => warehouseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedUpdateManyWithoutDeptNestedInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutDeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutDeptInputSchema),z.lazy(() => callCreateWithoutDeptInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutDeptInputSchema),z.lazy(() => callUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutDeptInputSchema),z.lazy(() => callCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyDeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutDeptInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutDeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const client_branchUncheckedUpdateManyWithoutDeptNestedInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateManyWithoutDeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutDeptInputSchema),z.lazy(() => client_branchCreateWithoutDeptInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutDeptInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutDeptInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => client_branchUpsertWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => client_branchUpsertWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManyDeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => client_branchUpdateWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => client_branchUpdateWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => client_branchUpdateManyWithWhereWithoutDeptInputSchema),z.lazy(() => client_branchUpdateManyWithWhereWithoutDeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => client_branchScalarWhereInputSchema),z.lazy(() => client_branchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deptUncheckedUpdateManyWithoutDeptNestedInputSchema: z.ZodType<Prisma.deptUncheckedUpdateManyWithoutDeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutDeptInputSchema),z.lazy(() => deptCreateWithoutDeptInputSchema).array(),z.lazy(() => deptUncheckedCreateWithoutDeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deptCreateOrConnectWithoutDeptInputSchema),z.lazy(() => deptCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deptUpsertWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => deptUpsertWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deptCreateManyDeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deptWhereUniqueInputSchema),z.lazy(() => deptWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deptWhereUniqueInputSchema),z.lazy(() => deptWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deptWhereUniqueInputSchema),z.lazy(() => deptWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deptWhereUniqueInputSchema),z.lazy(() => deptWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deptUpdateWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => deptUpdateWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deptUpdateManyWithWhereWithoutDeptInputSchema),z.lazy(() => deptUpdateManyWithWhereWithoutDeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deptScalarWhereInputSchema),z.lazy(() => deptScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDept_device_owner_dept_idTodeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDept_device_owner_dept_idTodeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDept_device_mgmt_dept_idTodeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDept_device_mgmt_dept_idTodeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const userUncheckedUpdateManyWithoutDeptNestedInputSchema: z.ZodType<Prisma.userUncheckedUpdateManyWithoutDeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDeptInputSchema),z.lazy(() => userCreateWithoutDeptInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutDeptInputSchema),z.lazy(() => userUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutDeptInputSchema),z.lazy(() => userCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => userUpsertWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => userUpsertWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyDeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => userUpdateWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => userUpdateWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => userUpdateManyWithWhereWithoutDeptInputSchema),z.lazy(() => userUpdateManyWithWhereWithoutDeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => userScalarWhereInputSchema),z.lazy(() => userScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const warehouseUncheckedUpdateManyWithoutDeptNestedInputSchema: z.ZodType<Prisma.warehouseUncheckedUpdateManyWithoutDeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => warehouseCreateWithoutDeptInputSchema),z.lazy(() => warehouseCreateWithoutDeptInputSchema).array(),z.lazy(() => warehouseUncheckedCreateWithoutDeptInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutDeptInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => warehouseCreateOrConnectWithoutDeptInputSchema),z.lazy(() => warehouseCreateOrConnectWithoutDeptInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => warehouseUpsertWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => warehouseUpsertWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  createMany: z.lazy(() => warehouseCreateManyDeptInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => warehouseWhereUniqueInputSchema),z.lazy(() => warehouseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => warehouseWhereUniqueInputSchema),z.lazy(() => warehouseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => warehouseWhereUniqueInputSchema),z.lazy(() => warehouseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => warehouseWhereUniqueInputSchema),z.lazy(() => warehouseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => warehouseUpdateWithWhereUniqueWithoutDeptInputSchema),z.lazy(() => warehouseUpdateWithWhereUniqueWithoutDeptInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => warehouseUpdateManyWithWhereWithoutDeptInputSchema),z.lazy(() => warehouseUpdateManyWithWhereWithoutDeptInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => warehouseScalarWhereInputSchema),z.lazy(() => warehouseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callCreateNestedManyWithoutDeviceInputSchema: z.ZodType<Prisma.callCreateNestedManyWithoutDeviceInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutDeviceInputSchema),z.lazy(() => callCreateWithoutDeviceInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutDeviceInputSchema),z.lazy(() => callUncheckedCreateWithoutDeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutDeviceInputSchema),z.lazy(() => callCreateOrConnectWithoutDeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyDeviceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutDevice_device_owner_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDevice_device_owner_dept_idTodeptInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutDevice_device_owner_dept_idTodeptInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional()
}).strict();

export const deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutDevice_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDevice_device_mgmt_dept_idTodeptInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutDevice_device_mgmt_dept_idTodeptInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional()
}).strict();

export const device_statusCreateNestedOneWithoutDeviceInputSchema: z.ZodType<Prisma.device_statusCreateNestedOneWithoutDeviceInput> = z.object({
  create: z.union([ z.lazy(() => device_statusCreateWithoutDeviceInputSchema),z.lazy(() => device_statusUncheckedCreateWithoutDeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_statusCreateOrConnectWithoutDeviceInputSchema).optional(),
  connect: z.lazy(() => device_statusWhereUniqueInputSchema).optional()
}).strict();

export const device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInput> = z.object({
  create: z.union([ z.lazy(() => device_location_logCreateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_location_logCreateOrConnectWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  connect: z.lazy(() => device_location_logWhereUniqueInputSchema).optional()
}).strict();

export const device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_inspection_logCreateOrConnectWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  connect: z.lazy(() => device_inspection_logWhereUniqueInputSchema).optional()
}).strict();

export const device_modelCreateNestedOneWithoutDeviceInputSchema: z.ZodType<Prisma.device_modelCreateNestedOneWithoutDeviceInput> = z.object({
  create: z.union([ z.lazy(() => device_modelCreateWithoutDeviceInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_modelCreateOrConnectWithoutDeviceInputSchema).optional(),
  connect: z.lazy(() => device_modelWhereUniqueInputSchema).optional()
}).strict();

export const device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyDevice_device_inspection_log_device_idTodeviceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_install_infoCreateNestedOneWithoutDeviceInputSchema: z.ZodType<Prisma.device_install_infoCreateNestedOneWithoutDeviceInput> = z.object({
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutDeviceInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutDeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_install_infoCreateOrConnectWithoutDeviceInputSchema).optional(),
  connect: z.lazy(() => device_install_infoWhereUniqueInputSchema).optional()
}).strict();

export const device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  create: z.union([ z.lazy(() => device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema).array(),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_location_logCreateOrConnectWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logCreateOrConnectWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_location_logCreateManyDevice_device_location_log_device_idTodeviceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_optionCreateNestedManyWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionCreateNestedManyWithoutDeviceInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutDeviceInputSchema),z.lazy(() => device_optionCreateWithoutDeviceInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutDeviceInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutDeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutDeviceInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutDeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyDeviceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedCreateNestedManyWithoutDeviceInputSchema: z.ZodType<Prisma.callUncheckedCreateNestedManyWithoutDeviceInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutDeviceInputSchema),z.lazy(() => callCreateWithoutDeviceInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutDeviceInputSchema),z.lazy(() => callUncheckedCreateWithoutDeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutDeviceInputSchema),z.lazy(() => callCreateOrConnectWithoutDeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyDeviceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyDevice_device_inspection_log_device_idTodeviceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema: z.ZodType<Prisma.device_install_infoUncheckedCreateNestedOneWithoutDeviceInput> = z.object({
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutDeviceInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutDeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_install_infoCreateOrConnectWithoutDeviceInputSchema).optional(),
  connect: z.lazy(() => device_install_infoWhereUniqueInputSchema).optional()
}).strict();

export const device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  create: z.union([ z.lazy(() => device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema).array(),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_location_logCreateOrConnectWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logCreateOrConnectWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_location_logCreateManyDevice_device_location_log_device_idTodeviceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionUncheckedCreateNestedManyWithoutDeviceInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutDeviceInputSchema),z.lazy(() => device_optionCreateWithoutDeviceInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutDeviceInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutDeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutDeviceInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutDeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyDeviceInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const callUpdateManyWithoutDeviceNestedInputSchema: z.ZodType<Prisma.callUpdateManyWithoutDeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutDeviceInputSchema),z.lazy(() => callCreateWithoutDeviceInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutDeviceInputSchema),z.lazy(() => callUncheckedCreateWithoutDeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutDeviceInputSchema),z.lazy(() => callCreateOrConnectWithoutDeviceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutDeviceInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutDeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyDeviceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutDeviceInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutDeviceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutDeviceInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutDeviceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema: z.ZodType<Prisma.deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutDevice_device_owner_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDevice_device_owner_dept_idTodeptInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutDevice_device_owner_dept_idTodeptInputSchema).optional(),
  upsert: z.lazy(() => deptUpsertWithoutDevice_device_owner_dept_idTodeptInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deptUpdateToOneWithWhereWithoutDevice_device_owner_dept_idTodeptInputSchema),z.lazy(() => deptUpdateWithoutDevice_device_owner_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutDevice_device_owner_dept_idTodeptInputSchema) ]).optional(),
}).strict();

export const deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema: z.ZodType<Prisma.deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutDevice_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDevice_device_mgmt_dept_idTodeptInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutDevice_device_mgmt_dept_idTodeptInputSchema).optional(),
  upsert: z.lazy(() => deptUpsertWithoutDevice_device_mgmt_dept_idTodeptInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deptUpdateToOneWithWhereWithoutDevice_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deptUpdateWithoutDevice_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutDevice_device_mgmt_dept_idTodeptInputSchema) ]).optional(),
}).strict();

export const device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema: z.ZodType<Prisma.device_statusUpdateOneRequiredWithoutDeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_statusCreateWithoutDeviceInputSchema),z.lazy(() => device_statusUncheckedCreateWithoutDeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_statusCreateOrConnectWithoutDeviceInputSchema).optional(),
  upsert: z.lazy(() => device_statusUpsertWithoutDeviceInputSchema).optional(),
  connect: z.lazy(() => device_statusWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_statusUpdateToOneWithWhereWithoutDeviceInputSchema),z.lazy(() => device_statusUpdateWithoutDeviceInputSchema),z.lazy(() => device_statusUncheckedUpdateWithoutDeviceInputSchema) ]).optional(),
}).strict();

export const device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema: z.ZodType<Prisma.device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_location_logCreateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_location_logCreateOrConnectWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  upsert: z.lazy(() => device_location_logUpsertWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => device_location_logWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => device_location_logWhereInputSchema) ]).optional(),
  connect: z.lazy(() => device_location_logWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_location_logUpdateToOneWithWhereWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => device_location_logUpdateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => device_location_logUncheckedUpdateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema) ]).optional(),
}).strict();

export const device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema: z.ZodType<Prisma.device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_inspection_logCreateOrConnectWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  upsert: z.lazy(() => device_inspection_logUpsertWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => device_inspection_logWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => device_inspection_logWhereInputSchema) ]).optional(),
  connect: z.lazy(() => device_inspection_logWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_inspection_logUpdateToOneWithWhereWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => device_inspection_logUpdateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]).optional(),
}).strict();

export const device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema: z.ZodType<Prisma.device_modelUpdateOneRequiredWithoutDeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_modelCreateWithoutDeviceInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_modelCreateOrConnectWithoutDeviceInputSchema).optional(),
  upsert: z.lazy(() => device_modelUpsertWithoutDeviceInputSchema).optional(),
  connect: z.lazy(() => device_modelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_modelUpdateToOneWithWhereWithoutDeviceInputSchema),z.lazy(() => device_modelUpdateWithoutDeviceInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDeviceInputSchema) ]).optional(),
}).strict();

export const device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema: z.ZodType<Prisma.device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyDevice_device_inspection_log_device_idTodeviceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_inspection_logScalarWhereInputSchema),z.lazy(() => device_inspection_logScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_install_infoUpdateOneWithoutDeviceNestedInputSchema: z.ZodType<Prisma.device_install_infoUpdateOneWithoutDeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutDeviceInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutDeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_install_infoCreateOrConnectWithoutDeviceInputSchema).optional(),
  upsert: z.lazy(() => device_install_infoUpsertWithoutDeviceInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => device_install_infoWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => device_install_infoWhereInputSchema) ]).optional(),
  connect: z.lazy(() => device_install_infoWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_install_infoUpdateToOneWithWhereWithoutDeviceInputSchema),z.lazy(() => device_install_infoUpdateWithoutDeviceInputSchema),z.lazy(() => device_install_infoUncheckedUpdateWithoutDeviceInputSchema) ]).optional(),
}).strict();

export const device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema: z.ZodType<Prisma.device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema).array(),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_location_logCreateOrConnectWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logCreateOrConnectWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_location_logUpsertWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUpsertWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_location_logCreateManyDevice_device_location_log_device_idTodeviceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_location_logUpdateWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUpdateWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_location_logUpdateManyWithWhereWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUpdateManyWithWhereWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_location_logScalarWhereInputSchema),z.lazy(() => device_location_logScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_optionUpdateManyWithoutDeviceNestedInputSchema: z.ZodType<Prisma.device_optionUpdateManyWithoutDeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutDeviceInputSchema),z.lazy(() => device_optionCreateWithoutDeviceInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutDeviceInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutDeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutDeviceInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutDeviceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_optionUpsertWithWhereUniqueWithoutDeviceInputSchema),z.lazy(() => device_optionUpsertWithWhereUniqueWithoutDeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyDeviceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_optionUpdateWithWhereUniqueWithoutDeviceInputSchema),z.lazy(() => device_optionUpdateWithWhereUniqueWithoutDeviceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_optionUpdateManyWithWhereWithoutDeviceInputSchema),z.lazy(() => device_optionUpdateManyWithWhereWithoutDeviceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_optionScalarWhereInputSchema),z.lazy(() => device_optionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedUpdateManyWithoutDeviceNestedInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutDeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutDeviceInputSchema),z.lazy(() => callCreateWithoutDeviceInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutDeviceInputSchema),z.lazy(() => callUncheckedCreateWithoutDeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutDeviceInputSchema),z.lazy(() => callCreateOrConnectWithoutDeviceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutDeviceInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutDeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyDeviceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutDeviceInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutDeviceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutDeviceInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutDeviceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyDevice_device_inspection_log_device_idTodeviceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_inspection_logScalarWhereInputSchema),z.lazy(() => device_inspection_logScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema: z.ZodType<Prisma.device_install_infoUncheckedUpdateOneWithoutDeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutDeviceInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutDeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_install_infoCreateOrConnectWithoutDeviceInputSchema).optional(),
  upsert: z.lazy(() => device_install_infoUpsertWithoutDeviceInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => device_install_infoWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => device_install_infoWhereInputSchema) ]).optional(),
  connect: z.lazy(() => device_install_infoWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_install_infoUpdateToOneWithWhereWithoutDeviceInputSchema),z.lazy(() => device_install_infoUpdateWithoutDeviceInputSchema),z.lazy(() => device_install_infoUncheckedUpdateWithoutDeviceInputSchema) ]).optional(),
}).strict();

export const device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema: z.ZodType<Prisma.device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema).array(),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_location_logCreateOrConnectWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logCreateOrConnectWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_location_logUpsertWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUpsertWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_location_logCreateManyDevice_device_location_log_device_idTodeviceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_location_logUpdateWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUpdateWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_location_logUpdateManyWithWhereWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUpdateManyWithWhereWithoutDevice_device_location_log_device_idTodeviceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_location_logScalarWhereInputSchema),z.lazy(() => device_location_logScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateManyWithoutDeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutDeviceInputSchema),z.lazy(() => device_optionCreateWithoutDeviceInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutDeviceInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutDeviceInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutDeviceInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutDeviceInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_optionUpsertWithWhereUniqueWithoutDeviceInputSchema),z.lazy(() => device_optionUpsertWithWhereUniqueWithoutDeviceInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyDeviceInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_optionUpdateWithWhereUniqueWithoutDeviceInputSchema),z.lazy(() => device_optionUpdateWithWhereUniqueWithoutDeviceInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_optionUpdateManyWithWhereWithoutDeviceInputSchema),z.lazy(() => device_optionUpdateManyWithWhereWithoutDeviceInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_optionScalarWhereInputSchema),z.lazy(() => device_optionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const approval_roleCreateNestedOneWithoutDevice_approvalInputSchema: z.ZodType<Prisma.approval_roleCreateNestedOneWithoutDevice_approvalInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutDevice_approvalInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutDevice_approvalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => approval_roleCreateOrConnectWithoutDevice_approvalInputSchema).optional(),
  connect: z.lazy(() => approval_roleWhereUniqueInputSchema).optional()
}).strict();

export const device_approvalCreateNestedOneWithoutOther_device_approvalInputSchema: z.ZodType<Prisma.device_approvalCreateNestedOneWithoutOther_device_approvalInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutOther_device_approvalInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutOther_device_approvalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_approvalCreateOrConnectWithoutOther_device_approvalInputSchema).optional(),
  connect: z.lazy(() => device_approvalWhereUniqueInputSchema).optional()
}).strict();

export const device_approvalCreateNestedManyWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalCreateNestedManyWithoutDevice_approvalInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalCreateWithoutDevice_approvalInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approvalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approvalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyDevice_approvalInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approval_typeCreateNestedOneWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approval_typeCreateNestedOneWithoutDevice_approvalInput> = z.object({
  create: z.union([ z.lazy(() => device_approval_typeCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approval_typeUncheckedCreateWithoutDevice_approvalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_approval_typeCreateOrConnectWithoutDevice_approvalInputSchema).optional(),
  connect: z.lazy(() => device_approval_typeWhereUniqueInputSchema).optional()
}).strict();

export const locationCreateNestedOneWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.locationCreateNestedOneWithoutDevice_approval_device_approval_origin_location_idTolocationInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => locationCreateOrConnectWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  connect: z.lazy(() => locationWhereUniqueInputSchema).optional()
}).strict();

export const locationCreateNestedOneWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.locationCreateNestedOneWithoutDevice_approval_device_approval_destination_location_idTolocationInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => locationCreateOrConnectWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  connect: z.lazy(() => locationWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutDevice_approval_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutDevice_approval_device_approval_requester_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDevice_approval_device_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_approval_device_approval_requester_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutDevice_approval_device_approval_requester_idTouserInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutDevice_approval_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutDevice_approval_device_approval_approver_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDevice_approval_device_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_approval_device_approval_approver_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const device_approvalUncheckedCreateNestedManyWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateNestedManyWithoutDevice_approvalInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalCreateWithoutDevice_approvalInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approvalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approvalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyDevice_approvalInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const approval_roleUpdateOneRequiredWithoutDevice_approvalNestedInputSchema: z.ZodType<Prisma.approval_roleUpdateOneRequiredWithoutDevice_approvalNestedInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutDevice_approvalInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutDevice_approvalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => approval_roleCreateOrConnectWithoutDevice_approvalInputSchema).optional(),
  upsert: z.lazy(() => approval_roleUpsertWithoutDevice_approvalInputSchema).optional(),
  connect: z.lazy(() => approval_roleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => approval_roleUpdateToOneWithWhereWithoutDevice_approvalInputSchema),z.lazy(() => approval_roleUpdateWithoutDevice_approvalInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutDevice_approvalInputSchema) ]).optional(),
}).strict();

export const device_approvalUpdateOneWithoutOther_device_approvalNestedInputSchema: z.ZodType<Prisma.device_approvalUpdateOneWithoutOther_device_approvalNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutOther_device_approvalInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutOther_device_approvalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_approvalCreateOrConnectWithoutOther_device_approvalInputSchema).optional(),
  upsert: z.lazy(() => device_approvalUpsertWithoutOther_device_approvalInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => device_approvalWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => device_approvalWhereInputSchema) ]).optional(),
  connect: z.lazy(() => device_approvalWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateToOneWithWhereWithoutOther_device_approvalInputSchema),z.lazy(() => device_approvalUpdateWithoutOther_device_approvalInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutOther_device_approvalInputSchema) ]).optional(),
}).strict();

export const device_approvalUpdateManyWithoutDevice_approvalNestedInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithoutDevice_approvalNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalCreateWithoutDevice_approvalInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approvalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approvalInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutDevice_approvalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyDevice_approvalInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutDevice_approvalInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutDevice_approvalInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approval_typeUpdateOneRequiredWithoutDevice_approvalNestedInputSchema: z.ZodType<Prisma.device_approval_typeUpdateOneRequiredWithoutDevice_approvalNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approval_typeCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approval_typeUncheckedCreateWithoutDevice_approvalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_approval_typeCreateOrConnectWithoutDevice_approvalInputSchema).optional(),
  upsert: z.lazy(() => device_approval_typeUpsertWithoutDevice_approvalInputSchema).optional(),
  connect: z.lazy(() => device_approval_typeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_approval_typeUpdateToOneWithWhereWithoutDevice_approvalInputSchema),z.lazy(() => device_approval_typeUpdateWithoutDevice_approvalInputSchema),z.lazy(() => device_approval_typeUncheckedUpdateWithoutDevice_approvalInputSchema) ]).optional(),
}).strict();

export const locationUpdateOneWithoutDevice_approval_device_approval_origin_location_idTolocationNestedInputSchema: z.ZodType<Prisma.locationUpdateOneWithoutDevice_approval_device_approval_origin_location_idTolocationNestedInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => locationCreateOrConnectWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  upsert: z.lazy(() => locationUpsertWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => locationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => locationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => locationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => locationUpdateToOneWithWhereWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => locationUpdateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => locationUncheckedUpdateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema) ]).optional(),
}).strict();

export const locationUpdateOneWithoutDevice_approval_device_approval_destination_location_idTolocationNestedInputSchema: z.ZodType<Prisma.locationUpdateOneWithoutDevice_approval_device_approval_destination_location_idTolocationNestedInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => locationCreateOrConnectWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  upsert: z.lazy(() => locationUpsertWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => locationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => locationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => locationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => locationUpdateToOneWithWhereWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => locationUpdateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => locationUncheckedUpdateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutDevice_approval_device_approval_requester_idTouserNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutDevice_approval_device_approval_requester_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDevice_approval_device_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_approval_device_approval_requester_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutDevice_approval_device_approval_requester_idTouserInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutDevice_approval_device_approval_requester_idTouserInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutDevice_approval_device_approval_requester_idTouserInputSchema),z.lazy(() => userUpdateWithoutDevice_approval_device_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_approval_device_approval_requester_idTouserInputSchema) ]).optional(),
}).strict();

export const userUpdateOneWithoutDevice_approval_device_approval_approver_idTouserNestedInputSchema: z.ZodType<Prisma.userUpdateOneWithoutDevice_approval_device_approval_approver_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDevice_approval_device_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_approval_device_approval_approver_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => userWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => userWhereInputSchema) ]).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutDevice_approval_device_approval_approver_idTouserInputSchema),z.lazy(() => userUpdateWithoutDevice_approval_device_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_approval_device_approval_approver_idTouserInputSchema) ]).optional(),
}).strict();

export const device_approvalUncheckedUpdateManyWithoutDevice_approvalNestedInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutDevice_approvalNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalCreateWithoutDevice_approvalInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approvalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approvalInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutDevice_approvalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyDevice_approvalInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutDevice_approvalInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutDevice_approvalInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approvalCreateNestedManyWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalCreateNestedManyWithoutDevice_approval_typeInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalCreateWithoutDevice_approval_typeInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyDevice_approval_typeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUncheckedCreateNestedManyWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateNestedManyWithoutDevice_approval_typeInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalCreateWithoutDevice_approval_typeInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyDevice_approval_typeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUpdateManyWithoutDevice_approval_typeNestedInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithoutDevice_approval_typeNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalCreateWithoutDevice_approval_typeInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyDevice_approval_typeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUncheckedUpdateManyWithoutDevice_approval_typeNestedInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutDevice_approval_typeNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalCreateWithoutDevice_approval_typeInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyDevice_approval_typeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutDevice_approval_typeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const consumable_modelCreateNestedOneWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.consumable_modelCreateNestedOneWithoutDevice_consumable_compatibilityInput> = z.object({
  create: z.union([ z.lazy(() => consumable_modelCreateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => consumable_modelUncheckedCreateWithoutDevice_consumable_compatibilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => consumable_modelCreateOrConnectWithoutDevice_consumable_compatibilityInputSchema).optional(),
  connect: z.lazy(() => consumable_modelWhereUniqueInputSchema).optional()
}).strict();

export const device_modelCreateNestedOneWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.device_modelCreateNestedOneWithoutDevice_consumable_compatibilityInput> = z.object({
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_consumable_compatibilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_modelCreateOrConnectWithoutDevice_consumable_compatibilityInputSchema).optional(),
  connect: z.lazy(() => device_modelWhereUniqueInputSchema).optional()
}).strict();

export const consumable_modelUpdateOneRequiredWithoutDevice_consumable_compatibilityNestedInputSchema: z.ZodType<Prisma.consumable_modelUpdateOneRequiredWithoutDevice_consumable_compatibilityNestedInput> = z.object({
  create: z.union([ z.lazy(() => consumable_modelCreateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => consumable_modelUncheckedCreateWithoutDevice_consumable_compatibilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => consumable_modelCreateOrConnectWithoutDevice_consumable_compatibilityInputSchema).optional(),
  upsert: z.lazy(() => consumable_modelUpsertWithoutDevice_consumable_compatibilityInputSchema).optional(),
  connect: z.lazy(() => consumable_modelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => consumable_modelUpdateToOneWithWhereWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => consumable_modelUpdateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => consumable_modelUncheckedUpdateWithoutDevice_consumable_compatibilityInputSchema) ]).optional(),
}).strict();

export const device_modelUpdateOneRequiredWithoutDevice_consumable_compatibilityNestedInputSchema: z.ZodType<Prisma.device_modelUpdateOneRequiredWithoutDevice_consumable_compatibilityNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_consumable_compatibilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_modelCreateOrConnectWithoutDevice_consumable_compatibilityInputSchema).optional(),
  upsert: z.lazy(() => device_modelUpsertWithoutDevice_consumable_compatibilityInputSchema).optional(),
  connect: z.lazy(() => device_modelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_modelUpdateToOneWithWhereWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => device_modelUpdateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDevice_consumable_compatibilityInputSchema) ]).optional(),
}).strict();

export const device_modelCreateNestedOneWithoutDevice_driverInputSchema: z.ZodType<Prisma.device_modelCreateNestedOneWithoutDevice_driverInput> = z.object({
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_driverInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_driverInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_modelCreateOrConnectWithoutDevice_driverInputSchema).optional(),
  connect: z.lazy(() => device_modelWhereUniqueInputSchema).optional()
}).strict();

export const device_modelUpdateOneRequiredWithoutDevice_driverNestedInputSchema: z.ZodType<Prisma.device_modelUpdateOneRequiredWithoutDevice_driverNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_driverInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_driverInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_modelCreateOrConnectWithoutDevice_driverInputSchema).optional(),
  upsert: z.lazy(() => device_modelUpsertWithoutDevice_driverInputSchema).optional(),
  connect: z.lazy(() => device_modelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_modelUpdateToOneWithWhereWithoutDevice_driverInputSchema),z.lazy(() => device_modelUpdateWithoutDevice_driverInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDevice_driverInputSchema) ]).optional(),
}).strict();

export const deviceCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceCreateNestedOneWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceCreateNestedOneWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deviceCreateOrConnectWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema).optional(),
  connect: z.lazy(() => deviceWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutDevice_inspection_logInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_inspection_logInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutDevice_inspection_logInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const callCreateNestedOneWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.callCreateNestedOneWithoutDevice_inspection_logInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => callUncheckedCreateWithoutDevice_inspection_logInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => callCreateOrConnectWithoutDevice_inspection_logInputSchema).optional(),
  connect: z.lazy(() => callWhereUniqueInputSchema).optional()
}).strict();

export const inspection_approvalCreateNestedManyWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalCreateNestedManyWithoutDevice_inspection_logInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalCreateWithoutDevice_inspection_logInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyDevice_inspection_logInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceUncheckedCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceUncheckedCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUncheckedCreateNestedManyWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedCreateNestedManyWithoutDevice_inspection_logInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalCreateWithoutDevice_inspection_logInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyDevice_inspection_logInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => device_inspection_log_statusSchema).optional().nullable()
}).strict();

export const deviceUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema: z.ZodType<Prisma.deviceUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceUpdateOneRequiredWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceNestedInputSchema: z.ZodType<Prisma.deviceUpdateOneRequiredWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deviceCreateOrConnectWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema).optional(),
  upsert: z.lazy(() => deviceUpsertWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema).optional(),
  connect: z.lazy(() => deviceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deviceUpdateToOneWithWhereWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => deviceUpdateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutDevice_inspection_logNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutDevice_inspection_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_inspection_logInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutDevice_inspection_logInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutDevice_inspection_logInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutDevice_inspection_logInputSchema),z.lazy(() => userUpdateWithoutDevice_inspection_logInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_inspection_logInputSchema) ]).optional(),
}).strict();

export const callUpdateOneWithoutDevice_inspection_logNestedInputSchema: z.ZodType<Prisma.callUpdateOneWithoutDevice_inspection_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => callUncheckedCreateWithoutDevice_inspection_logInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => callCreateOrConnectWithoutDevice_inspection_logInputSchema).optional(),
  upsert: z.lazy(() => callUpsertWithoutDevice_inspection_logInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => callWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => callWhereInputSchema) ]).optional(),
  connect: z.lazy(() => callWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => callUpdateToOneWithWhereWithoutDevice_inspection_logInputSchema),z.lazy(() => callUpdateWithoutDevice_inspection_logInputSchema),z.lazy(() => callUncheckedUpdateWithoutDevice_inspection_logInputSchema) ]).optional(),
}).strict();

export const inspection_approvalUpdateManyWithoutDevice_inspection_logNestedInputSchema: z.ZodType<Prisma.inspection_approvalUpdateManyWithoutDevice_inspection_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalCreateWithoutDevice_inspection_logInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyDevice_inspection_logInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => inspection_approvalScalarWhereInputSchema),z.lazy(() => inspection_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceUncheckedUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUncheckedUpdateManyWithoutDevice_inspection_logNestedInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateManyWithoutDevice_inspection_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalCreateWithoutDevice_inspection_logInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyDevice_inspection_logInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutDevice_inspection_logInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => inspection_approvalScalarWhereInputSchema),z.lazy(() => inspection_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceCreateNestedOneWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.deviceCreateNestedOneWithoutDevice_install_infoInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_install_infoInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_install_infoInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deviceCreateOrConnectWithoutDevice_install_infoInputSchema).optional(),
  connect: z.lazy(() => deviceWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutDevice_install_infoInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDevice_install_infoInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_install_infoInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutDevice_install_infoInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const deviceUpdateOneRequiredWithoutDevice_install_infoNestedInputSchema: z.ZodType<Prisma.deviceUpdateOneRequiredWithoutDevice_install_infoNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_install_infoInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_install_infoInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deviceCreateOrConnectWithoutDevice_install_infoInputSchema).optional(),
  upsert: z.lazy(() => deviceUpsertWithoutDevice_install_infoInputSchema).optional(),
  connect: z.lazy(() => deviceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deviceUpdateToOneWithWhereWithoutDevice_install_infoInputSchema),z.lazy(() => deviceUpdateWithoutDevice_install_infoInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_install_infoInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutDevice_install_infoNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutDevice_install_infoNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutDevice_install_infoInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_install_infoInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutDevice_install_infoInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutDevice_install_infoInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutDevice_install_infoInputSchema),z.lazy(() => userUpdateWithoutDevice_install_infoInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_install_infoInputSchema) ]).optional(),
}).strict();

export const deviceCreateNestedManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceCreateNestedManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_location_log_device_last_location_log_idTodevice_location_logInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceCreateNestedOneWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceCreateNestedOneWithoutDevice_location_log_device_location_log_device_idTodeviceInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deviceCreateOrConnectWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema).optional(),
  connect: z.lazy(() => deviceWhereUniqueInputSchema).optional()
}).strict();

export const locationCreateNestedOneWithoutDevice_location_logInputSchema: z.ZodType<Prisma.locationCreateNestedOneWithoutDevice_location_logInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_location_logInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_location_logInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => locationCreateOrConnectWithoutDevice_location_logInputSchema).optional(),
  connect: z.lazy(() => locationWhereUniqueInputSchema).optional()
}).strict();

export const deviceUncheckedCreateNestedManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceUncheckedCreateNestedManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_location_log_device_last_location_log_idTodevice_location_logInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logNestedInputSchema: z.ZodType<Prisma.deviceUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_location_log_device_last_location_log_idTodevice_location_logInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceUpdateOneRequiredWithoutDevice_location_log_device_location_log_device_idTodeviceNestedInputSchema: z.ZodType<Prisma.deviceUpdateOneRequiredWithoutDevice_location_log_device_location_log_device_idTodeviceNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deviceCreateOrConnectWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema).optional(),
  upsert: z.lazy(() => deviceUpsertWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema).optional(),
  connect: z.lazy(() => deviceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deviceUpdateToOneWithWhereWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema),z.lazy(() => deviceUpdateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema) ]).optional(),
}).strict();

export const locationUpdateOneRequiredWithoutDevice_location_logNestedInputSchema: z.ZodType<Prisma.locationUpdateOneRequiredWithoutDevice_location_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_location_logInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_location_logInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => locationCreateOrConnectWithoutDevice_location_logInputSchema).optional(),
  upsert: z.lazy(() => locationUpsertWithoutDevice_location_logInputSchema).optional(),
  connect: z.lazy(() => locationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => locationUpdateToOneWithWhereWithoutDevice_location_logInputSchema),z.lazy(() => locationUpdateWithoutDevice_location_logInputSchema),z.lazy(() => locationUncheckedUpdateWithoutDevice_location_logInputSchema) ]).optional(),
}).strict();

export const deviceUncheckedUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logNestedInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_location_log_device_last_location_log_idTodevice_location_logInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceCreateNestedManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceCreateNestedManyWithoutDevice_modelInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_modelInputSchema),z.lazy(() => deviceCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_consumable_compatibilityCreateNestedManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateNestedManyWithoutDevice_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_consumable_compatibilityCreateManyDevice_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_driverCreateNestedManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverCreateNestedManyWithoutDevice_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_driverCreateWithoutDevice_modelInputSchema),z.lazy(() => device_driverCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_driverUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_driverUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_driverCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_driverCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_driverCreateManyDevice_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_driverWhereUniqueInputSchema),z.lazy(() => device_driverWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_option_compatibilityCreateNestedManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityCreateNestedManyWithoutDevice_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_option_compatibilityCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_option_compatibilityCreateManyDevice_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceUncheckedCreateNestedManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceUncheckedCreateNestedManyWithoutDevice_modelInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_modelInputSchema),z.lazy(() => deviceCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_consumable_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_consumable_compatibilityCreateManyDevice_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_driverUncheckedCreateNestedManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverUncheckedCreateNestedManyWithoutDevice_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_driverCreateWithoutDevice_modelInputSchema),z.lazy(() => device_driverCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_driverUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_driverUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_driverCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_driverCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_driverCreateManyDevice_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_driverWhereUniqueInputSchema),z.lazy(() => device_driverWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_option_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_option_compatibilityCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_option_compatibilityCreateManyDevice_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceUpdateManyWithoutDevice_modelNestedInputSchema: z.ZodType<Prisma.deviceUpdateManyWithoutDevice_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_modelInputSchema),z.lazy(() => deviceCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_modelInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_consumable_compatibilityUpdateManyWithoutDevice_modelNestedInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateManyWithoutDevice_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_consumable_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_consumable_compatibilityCreateManyDevice_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_consumable_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_consumable_compatibilityUpdateManyWithWhereWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpdateManyWithWhereWithoutDevice_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema),z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_driverUpdateManyWithoutDevice_modelNestedInputSchema: z.ZodType<Prisma.device_driverUpdateManyWithoutDevice_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_driverCreateWithoutDevice_modelInputSchema),z.lazy(() => device_driverCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_driverUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_driverUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_driverCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_driverCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_driverUpsertWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_driverUpsertWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_driverCreateManyDevice_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_driverWhereUniqueInputSchema),z.lazy(() => device_driverWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_driverWhereUniqueInputSchema),z.lazy(() => device_driverWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_driverWhereUniqueInputSchema),z.lazy(() => device_driverWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_driverWhereUniqueInputSchema),z.lazy(() => device_driverWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_driverUpdateWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_driverUpdateWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_driverUpdateManyWithWhereWithoutDevice_modelInputSchema),z.lazy(() => device_driverUpdateManyWithWhereWithoutDevice_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_driverScalarWhereInputSchema),z.lazy(() => device_driverScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_option_compatibilityUpdateManyWithoutDevice_modelNestedInputSchema: z.ZodType<Prisma.device_option_compatibilityUpdateManyWithoutDevice_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_option_compatibilityCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_option_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_option_compatibilityCreateManyDevice_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_option_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_option_compatibilityUpdateManyWithWhereWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUpdateManyWithWhereWithoutDevice_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_option_compatibilityScalarWhereInputSchema),z.lazy(() => device_option_compatibilityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceUncheckedUpdateManyWithoutDevice_modelNestedInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDevice_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_modelInputSchema),z.lazy(() => deviceCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_modelInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_consumable_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_consumable_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_consumable_compatibilityCreateManyDevice_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_consumable_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_consumable_compatibilityUpdateManyWithWhereWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUpdateManyWithWhereWithoutDevice_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema),z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_driverUncheckedUpdateManyWithoutDevice_modelNestedInputSchema: z.ZodType<Prisma.device_driverUncheckedUpdateManyWithoutDevice_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_driverCreateWithoutDevice_modelInputSchema),z.lazy(() => device_driverCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_driverUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_driverUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_driverCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_driverCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_driverUpsertWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_driverUpsertWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_driverCreateManyDevice_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_driverWhereUniqueInputSchema),z.lazy(() => device_driverWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_driverWhereUniqueInputSchema),z.lazy(() => device_driverWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_driverWhereUniqueInputSchema),z.lazy(() => device_driverWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_driverWhereUniqueInputSchema),z.lazy(() => device_driverWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_driverUpdateWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_driverUpdateWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_driverUpdateManyWithWhereWithoutDevice_modelInputSchema),z.lazy(() => device_driverUpdateManyWithWhereWithoutDevice_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_driverScalarWhereInputSchema),z.lazy(() => device_driverScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_option_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityCreateWithoutDevice_modelInputSchema).array(),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_option_compatibilityCreateOrConnectWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityCreateOrConnectWithoutDevice_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_option_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_option_compatibilityCreateManyDevice_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_option_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_option_compatibilityUpdateManyWithWhereWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUpdateManyWithWhereWithoutDevice_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_option_compatibilityScalarWhereInputSchema),z.lazy(() => device_option_compatibilityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceCreateNestedOneWithoutDevice_optionInputSchema: z.ZodType<Prisma.deviceCreateNestedOneWithoutDevice_optionInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_optionInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_optionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deviceCreateOrConnectWithoutDevice_optionInputSchema).optional(),
  connect: z.lazy(() => deviceWhereUniqueInputSchema).optional()
}).strict();

export const option_modelCreateNestedOneWithoutDevice_optionInputSchema: z.ZodType<Prisma.option_modelCreateNestedOneWithoutDevice_optionInput> = z.object({
  create: z.union([ z.lazy(() => option_modelCreateWithoutDevice_optionInputSchema),z.lazy(() => option_modelUncheckedCreateWithoutDevice_optionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => option_modelCreateOrConnectWithoutDevice_optionInputSchema).optional(),
  connect: z.lazy(() => option_modelWhereUniqueInputSchema).optional()
}).strict();

export const warehouseCreateNestedOneWithoutDevice_optionInputSchema: z.ZodType<Prisma.warehouseCreateNestedOneWithoutDevice_optionInput> = z.object({
  create: z.union([ z.lazy(() => warehouseCreateWithoutDevice_optionInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutDevice_optionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => warehouseCreateOrConnectWithoutDevice_optionInputSchema).optional(),
  connect: z.lazy(() => warehouseWhereUniqueInputSchema).optional()
}).strict();

export const Enumdevice_option_location_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumdevice_option_location_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => device_option_location_typeSchema).optional()
}).strict();

export const deviceUpdateOneWithoutDevice_optionNestedInputSchema: z.ZodType<Prisma.deviceUpdateOneWithoutDevice_optionNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_optionInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_optionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deviceCreateOrConnectWithoutDevice_optionInputSchema).optional(),
  upsert: z.lazy(() => deviceUpsertWithoutDevice_optionInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => deviceWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => deviceWhereInputSchema) ]).optional(),
  connect: z.lazy(() => deviceWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deviceUpdateToOneWithWhereWithoutDevice_optionInputSchema),z.lazy(() => deviceUpdateWithoutDevice_optionInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_optionInputSchema) ]).optional(),
}).strict();

export const option_modelUpdateOneRequiredWithoutDevice_optionNestedInputSchema: z.ZodType<Prisma.option_modelUpdateOneRequiredWithoutDevice_optionNestedInput> = z.object({
  create: z.union([ z.lazy(() => option_modelCreateWithoutDevice_optionInputSchema),z.lazy(() => option_modelUncheckedCreateWithoutDevice_optionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => option_modelCreateOrConnectWithoutDevice_optionInputSchema).optional(),
  upsert: z.lazy(() => option_modelUpsertWithoutDevice_optionInputSchema).optional(),
  connect: z.lazy(() => option_modelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => option_modelUpdateToOneWithWhereWithoutDevice_optionInputSchema),z.lazy(() => option_modelUpdateWithoutDevice_optionInputSchema),z.lazy(() => option_modelUncheckedUpdateWithoutDevice_optionInputSchema) ]).optional(),
}).strict();

export const warehouseUpdateOneWithoutDevice_optionNestedInputSchema: z.ZodType<Prisma.warehouseUpdateOneWithoutDevice_optionNestedInput> = z.object({
  create: z.union([ z.lazy(() => warehouseCreateWithoutDevice_optionInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutDevice_optionInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => warehouseCreateOrConnectWithoutDevice_optionInputSchema).optional(),
  upsert: z.lazy(() => warehouseUpsertWithoutDevice_optionInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => warehouseWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => warehouseWhereInputSchema) ]).optional(),
  connect: z.lazy(() => warehouseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => warehouseUpdateToOneWithWhereWithoutDevice_optionInputSchema),z.lazy(() => warehouseUpdateWithoutDevice_optionInputSchema),z.lazy(() => warehouseUncheckedUpdateWithoutDevice_optionInputSchema) ]).optional(),
}).strict();

export const device_modelCreateNestedOneWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.device_modelCreateNestedOneWithoutDevice_option_compatibilityInput> = z.object({
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_option_compatibilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_modelCreateOrConnectWithoutDevice_option_compatibilityInputSchema).optional(),
  connect: z.lazy(() => device_modelWhereUniqueInputSchema).optional()
}).strict();

export const option_modelCreateNestedOneWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.option_modelCreateNestedOneWithoutDevice_option_compatibilityInput> = z.object({
  create: z.union([ z.lazy(() => option_modelCreateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => option_modelUncheckedCreateWithoutDevice_option_compatibilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => option_modelCreateOrConnectWithoutDevice_option_compatibilityInputSchema).optional(),
  connect: z.lazy(() => option_modelWhereUniqueInputSchema).optional()
}).strict();

export const device_modelUpdateOneRequiredWithoutDevice_option_compatibilityNestedInputSchema: z.ZodType<Prisma.device_modelUpdateOneRequiredWithoutDevice_option_compatibilityNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_option_compatibilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_modelCreateOrConnectWithoutDevice_option_compatibilityInputSchema).optional(),
  upsert: z.lazy(() => device_modelUpsertWithoutDevice_option_compatibilityInputSchema).optional(),
  connect: z.lazy(() => device_modelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_modelUpdateToOneWithWhereWithoutDevice_option_compatibilityInputSchema),z.lazy(() => device_modelUpdateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDevice_option_compatibilityInputSchema) ]).optional(),
}).strict();

export const option_modelUpdateOneRequiredWithoutDevice_option_compatibilityNestedInputSchema: z.ZodType<Prisma.option_modelUpdateOneRequiredWithoutDevice_option_compatibilityNestedInput> = z.object({
  create: z.union([ z.lazy(() => option_modelCreateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => option_modelUncheckedCreateWithoutDevice_option_compatibilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => option_modelCreateOrConnectWithoutDevice_option_compatibilityInputSchema).optional(),
  upsert: z.lazy(() => option_modelUpsertWithoutDevice_option_compatibilityInputSchema).optional(),
  connect: z.lazy(() => option_modelWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => option_modelUpdateToOneWithWhereWithoutDevice_option_compatibilityInputSchema),z.lazy(() => option_modelUpdateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => option_modelUncheckedUpdateWithoutDevice_option_compatibilityInputSchema) ]).optional(),
}).strict();

export const deviceCreateNestedManyWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceCreateNestedManyWithoutDevice_statusInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_statusInputSchema),z.lazy(() => deviceCreateWithoutDevice_statusInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_statusInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_statusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_statusInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_statusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_statusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceUncheckedCreateNestedManyWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceUncheckedCreateNestedManyWithoutDevice_statusInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_statusInputSchema),z.lazy(() => deviceCreateWithoutDevice_statusInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_statusInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_statusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_statusInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_statusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_statusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deviceUpdateManyWithoutDevice_statusNestedInputSchema: z.ZodType<Prisma.deviceUpdateManyWithoutDevice_statusNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_statusInputSchema),z.lazy(() => deviceCreateWithoutDevice_statusInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_statusInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_statusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_statusInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_statusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_statusInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_statusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_statusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_statusInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_statusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_statusInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_statusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deviceUncheckedUpdateManyWithoutDevice_statusNestedInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDevice_statusNestedInput> = z.object({
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_statusInputSchema),z.lazy(() => deviceCreateWithoutDevice_statusInputSchema).array(),z.lazy(() => deviceUncheckedCreateWithoutDevice_statusInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_statusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => deviceCreateOrConnectWithoutDevice_statusInputSchema),z.lazy(() => deviceCreateOrConnectWithoutDevice_statusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_statusInputSchema),z.lazy(() => deviceUpsertWithWhereUniqueWithoutDevice_statusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => deviceCreateManyDevice_statusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => deviceWhereUniqueInputSchema),z.lazy(() => deviceWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_statusInputSchema),z.lazy(() => deviceUpdateWithWhereUniqueWithoutDevice_statusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_statusInputSchema),z.lazy(() => deviceUpdateManyWithWhereWithoutDevice_statusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const approval_roleCreateNestedOneWithoutInspection_approvalInputSchema: z.ZodType<Prisma.approval_roleCreateNestedOneWithoutInspection_approvalInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutInspection_approvalInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutInspection_approvalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => approval_roleCreateOrConnectWithoutInspection_approvalInputSchema).optional(),
  connect: z.lazy(() => approval_roleWhereUniqueInputSchema).optional()
}).strict();

export const device_inspection_logCreateNestedOneWithoutInspection_approvalInputSchema: z.ZodType<Prisma.device_inspection_logCreateNestedOneWithoutInspection_approvalInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutInspection_approvalInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutInspection_approvalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_inspection_logCreateOrConnectWithoutInspection_approvalInputSchema).optional(),
  connect: z.lazy(() => device_inspection_logWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutInspection_approval_inspection_approval_approver_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutInspection_approval_inspection_approval_requester_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const approval_roleUpdateOneWithoutInspection_approvalNestedInputSchema: z.ZodType<Prisma.approval_roleUpdateOneWithoutInspection_approvalNestedInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutInspection_approvalInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutInspection_approvalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => approval_roleCreateOrConnectWithoutInspection_approvalInputSchema).optional(),
  upsert: z.lazy(() => approval_roleUpsertWithoutInspection_approvalInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => approval_roleWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => approval_roleWhereInputSchema) ]).optional(),
  connect: z.lazy(() => approval_roleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => approval_roleUpdateToOneWithWhereWithoutInspection_approvalInputSchema),z.lazy(() => approval_roleUpdateWithoutInspection_approvalInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutInspection_approvalInputSchema) ]).optional(),
}).strict();

export const device_inspection_logUpdateOneRequiredWithoutInspection_approvalNestedInputSchema: z.ZodType<Prisma.device_inspection_logUpdateOneRequiredWithoutInspection_approvalNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutInspection_approvalInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutInspection_approvalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => device_inspection_logCreateOrConnectWithoutInspection_approvalInputSchema).optional(),
  upsert: z.lazy(() => device_inspection_logUpsertWithoutInspection_approvalInputSchema).optional(),
  connect: z.lazy(() => device_inspection_logWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => device_inspection_logUpdateToOneWithWhereWithoutInspection_approvalInputSchema),z.lazy(() => device_inspection_logUpdateWithoutInspection_approvalInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutInspection_approvalInputSchema) ]).optional(),
}).strict();

export const userUpdateOneWithoutInspection_approval_inspection_approval_approver_idTouserNestedInputSchema: z.ZodType<Prisma.userUpdateOneWithoutInspection_approval_inspection_approval_approver_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => userWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => userWhereInputSchema) ]).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema),z.lazy(() => userUpdateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutInspection_approval_inspection_approval_requester_idTouserNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutInspection_approval_inspection_approval_requester_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema),z.lazy(() => userUpdateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema) ]).optional(),
}).strict();

export const device_approvalCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyLocation_device_approval_origin_location_idTolocationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approvalCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyLocation_device_approval_destination_location_idTolocationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_location_logCreateNestedManyWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logCreateNestedManyWithoutLocationInput> = z.object({
  create: z.union([ z.lazy(() => device_location_logCreateWithoutLocationInputSchema),z.lazy(() => device_location_logCreateWithoutLocationInputSchema).array(),z.lazy(() => device_location_logUncheckedCreateWithoutLocationInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutLocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_location_logCreateOrConnectWithoutLocationInputSchema),z.lazy(() => device_location_logCreateOrConnectWithoutLocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_location_logCreateManyLocationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const client_branchCreateNestedOneWithoutLocationInputSchema: z.ZodType<Prisma.client_branchCreateNestedOneWithoutLocationInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutLocationInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutLocationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => client_branchCreateOrConnectWithoutLocationInputSchema).optional(),
  connect: z.lazy(() => client_branchWhereUniqueInputSchema).optional()
}).strict();

export const warehouseCreateNestedOneWithoutLocationInputSchema: z.ZodType<Prisma.warehouseCreateNestedOneWithoutLocationInput> = z.object({
  create: z.union([ z.lazy(() => warehouseCreateWithoutLocationInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutLocationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => warehouseCreateOrConnectWithoutLocationInputSchema).optional(),
  connect: z.lazy(() => warehouseWhereUniqueInputSchema).optional()
}).strict();

export const device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyLocation_device_approval_origin_location_idTolocationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyLocation_device_approval_destination_location_idTolocationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_location_logUncheckedCreateNestedManyWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logUncheckedCreateNestedManyWithoutLocationInput> = z.object({
  create: z.union([ z.lazy(() => device_location_logCreateWithoutLocationInputSchema),z.lazy(() => device_location_logCreateWithoutLocationInputSchema).array(),z.lazy(() => device_location_logUncheckedCreateWithoutLocationInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutLocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_location_logCreateOrConnectWithoutLocationInputSchema),z.lazy(() => device_location_logCreateOrConnectWithoutLocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_location_logCreateManyLocationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumlocation_location_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumlocation_location_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => location_location_typeSchema).optional()
}).strict();

export const device_approvalUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyLocation_device_approval_origin_location_idTolocationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyLocation_device_approval_destination_location_idTolocationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_location_logUpdateManyWithoutLocationNestedInputSchema: z.ZodType<Prisma.device_location_logUpdateManyWithoutLocationNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_location_logCreateWithoutLocationInputSchema),z.lazy(() => device_location_logCreateWithoutLocationInputSchema).array(),z.lazy(() => device_location_logUncheckedCreateWithoutLocationInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutLocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_location_logCreateOrConnectWithoutLocationInputSchema),z.lazy(() => device_location_logCreateOrConnectWithoutLocationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_location_logUpsertWithWhereUniqueWithoutLocationInputSchema),z.lazy(() => device_location_logUpsertWithWhereUniqueWithoutLocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_location_logCreateManyLocationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_location_logUpdateWithWhereUniqueWithoutLocationInputSchema),z.lazy(() => device_location_logUpdateWithWhereUniqueWithoutLocationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_location_logUpdateManyWithWhereWithoutLocationInputSchema),z.lazy(() => device_location_logUpdateManyWithWhereWithoutLocationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_location_logScalarWhereInputSchema),z.lazy(() => device_location_logScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const client_branchUpdateOneWithoutLocationNestedInputSchema: z.ZodType<Prisma.client_branchUpdateOneWithoutLocationNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutLocationInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutLocationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => client_branchCreateOrConnectWithoutLocationInputSchema).optional(),
  upsert: z.lazy(() => client_branchUpsertWithoutLocationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => client_branchWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => client_branchWhereInputSchema) ]).optional(),
  connect: z.lazy(() => client_branchWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => client_branchUpdateToOneWithWhereWithoutLocationInputSchema),z.lazy(() => client_branchUpdateWithoutLocationInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutLocationInputSchema) ]).optional(),
}).strict();

export const warehouseUpdateOneWithoutLocationNestedInputSchema: z.ZodType<Prisma.warehouseUpdateOneWithoutLocationNestedInput> = z.object({
  create: z.union([ z.lazy(() => warehouseCreateWithoutLocationInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutLocationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => warehouseCreateOrConnectWithoutLocationInputSchema).optional(),
  upsert: z.lazy(() => warehouseUpsertWithoutLocationInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => warehouseWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => warehouseWhereInputSchema) ]).optional(),
  connect: z.lazy(() => warehouseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => warehouseUpdateToOneWithWhereWithoutLocationInputSchema),z.lazy(() => warehouseUpdateWithoutLocationInputSchema),z.lazy(() => warehouseUncheckedUpdateWithoutLocationInputSchema) ]).optional(),
}).strict();

export const device_approvalUncheckedUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyLocation_device_approval_origin_location_idTolocationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutLocation_device_approval_origin_location_idTolocationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUncheckedUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyLocation_device_approval_destination_location_idTolocationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutLocation_device_approval_destination_location_idTolocationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_location_logUncheckedUpdateManyWithoutLocationNestedInputSchema: z.ZodType<Prisma.device_location_logUncheckedUpdateManyWithoutLocationNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_location_logCreateWithoutLocationInputSchema),z.lazy(() => device_location_logCreateWithoutLocationInputSchema).array(),z.lazy(() => device_location_logUncheckedCreateWithoutLocationInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutLocationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_location_logCreateOrConnectWithoutLocationInputSchema),z.lazy(() => device_location_logCreateOrConnectWithoutLocationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_location_logUpsertWithWhereUniqueWithoutLocationInputSchema),z.lazy(() => device_location_logUpsertWithWhereUniqueWithoutLocationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_location_logCreateManyLocationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_location_logWhereUniqueInputSchema),z.lazy(() => device_location_logWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_location_logUpdateWithWhereUniqueWithoutLocationInputSchema),z.lazy(() => device_location_logUpdateWithWhereUniqueWithoutLocationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_location_logUpdateManyWithWhereWithoutLocationInputSchema),z.lazy(() => device_location_logUpdateManyWithWhereWithoutLocationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_location_logScalarWhereInputSchema),z.lazy(() => device_location_logScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_optionCreateNestedManyWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionCreateNestedManyWithoutOption_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutOption_modelInputSchema),z.lazy(() => device_optionCreateWithoutOption_modelInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutOption_modelInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutOption_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutOption_modelInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutOption_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyOption_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_option_compatibilityCreateNestedManyWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityCreateNestedManyWithoutOption_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityCreateWithoutOption_modelInputSchema).array(),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_option_compatibilityCreateOrConnectWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityCreateOrConnectWithoutOption_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_option_compatibilityCreateManyOption_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_optionUncheckedCreateNestedManyWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionUncheckedCreateNestedManyWithoutOption_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutOption_modelInputSchema),z.lazy(() => device_optionCreateWithoutOption_modelInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutOption_modelInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutOption_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutOption_modelInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutOption_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyOption_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_option_compatibilityUncheckedCreateNestedManyWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedCreateNestedManyWithoutOption_modelInput> = z.object({
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityCreateWithoutOption_modelInputSchema).array(),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_option_compatibilityCreateOrConnectWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityCreateOrConnectWithoutOption_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_option_compatibilityCreateManyOption_modelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_optionUpdateManyWithoutOption_modelNestedInputSchema: z.ZodType<Prisma.device_optionUpdateManyWithoutOption_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutOption_modelInputSchema),z.lazy(() => device_optionCreateWithoutOption_modelInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutOption_modelInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutOption_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutOption_modelInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutOption_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_optionUpsertWithWhereUniqueWithoutOption_modelInputSchema),z.lazy(() => device_optionUpsertWithWhereUniqueWithoutOption_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyOption_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_optionUpdateWithWhereUniqueWithoutOption_modelInputSchema),z.lazy(() => device_optionUpdateWithWhereUniqueWithoutOption_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_optionUpdateManyWithWhereWithoutOption_modelInputSchema),z.lazy(() => device_optionUpdateManyWithWhereWithoutOption_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_optionScalarWhereInputSchema),z.lazy(() => device_optionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_option_compatibilityUpdateManyWithoutOption_modelNestedInputSchema: z.ZodType<Prisma.device_option_compatibilityUpdateManyWithoutOption_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityCreateWithoutOption_modelInputSchema).array(),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_option_compatibilityCreateOrConnectWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityCreateOrConnectWithoutOption_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_option_compatibilityUpsertWithWhereUniqueWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUpsertWithWhereUniqueWithoutOption_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_option_compatibilityCreateManyOption_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_option_compatibilityUpdateWithWhereUniqueWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUpdateWithWhereUniqueWithoutOption_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_option_compatibilityUpdateManyWithWhereWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUpdateManyWithWhereWithoutOption_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_option_compatibilityScalarWhereInputSchema),z.lazy(() => device_option_compatibilityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_optionUncheckedUpdateManyWithoutOption_modelNestedInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateManyWithoutOption_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutOption_modelInputSchema),z.lazy(() => device_optionCreateWithoutOption_modelInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutOption_modelInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutOption_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutOption_modelInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutOption_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_optionUpsertWithWhereUniqueWithoutOption_modelInputSchema),z.lazy(() => device_optionUpsertWithWhereUniqueWithoutOption_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyOption_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_optionUpdateWithWhereUniqueWithoutOption_modelInputSchema),z.lazy(() => device_optionUpdateWithWhereUniqueWithoutOption_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_optionUpdateManyWithWhereWithoutOption_modelInputSchema),z.lazy(() => device_optionUpdateManyWithWhereWithoutOption_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_optionScalarWhereInputSchema),z.lazy(() => device_optionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_option_compatibilityUncheckedUpdateManyWithoutOption_modelNestedInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedUpdateManyWithoutOption_modelNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityCreateWithoutOption_modelInputSchema).array(),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_option_compatibilityCreateOrConnectWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityCreateOrConnectWithoutOption_modelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_option_compatibilityUpsertWithWhereUniqueWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUpsertWithWhereUniqueWithoutOption_modelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_option_compatibilityCreateManyOption_modelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),z.lazy(() => device_option_compatibilityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_option_compatibilityUpdateWithWhereUniqueWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUpdateWithWhereUniqueWithoutOption_modelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_option_compatibilityUpdateManyWithWhereWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUpdateManyWithWhereWithoutOption_modelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_option_compatibilityScalarWhereInputSchema),z.lazy(() => device_option_compatibilityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sigunguCreateNestedManyWithoutSidoInputSchema: z.ZodType<Prisma.sigunguCreateNestedManyWithoutSidoInput> = z.object({
  create: z.union([ z.lazy(() => sigunguCreateWithoutSidoInputSchema),z.lazy(() => sigunguCreateWithoutSidoInputSchema).array(),z.lazy(() => sigunguUncheckedCreateWithoutSidoInputSchema),z.lazy(() => sigunguUncheckedCreateWithoutSidoInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sigunguCreateOrConnectWithoutSidoInputSchema),z.lazy(() => sigunguCreateOrConnectWithoutSidoInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sigunguCreateManySidoInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => sigunguWhereUniqueInputSchema),z.lazy(() => sigunguWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const sigunguUncheckedCreateNestedManyWithoutSidoInputSchema: z.ZodType<Prisma.sigunguUncheckedCreateNestedManyWithoutSidoInput> = z.object({
  create: z.union([ z.lazy(() => sigunguCreateWithoutSidoInputSchema),z.lazy(() => sigunguCreateWithoutSidoInputSchema).array(),z.lazy(() => sigunguUncheckedCreateWithoutSidoInputSchema),z.lazy(() => sigunguUncheckedCreateWithoutSidoInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sigunguCreateOrConnectWithoutSidoInputSchema),z.lazy(() => sigunguCreateOrConnectWithoutSidoInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sigunguCreateManySidoInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => sigunguWhereUniqueInputSchema),z.lazy(() => sigunguWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const sigunguUpdateManyWithoutSidoNestedInputSchema: z.ZodType<Prisma.sigunguUpdateManyWithoutSidoNestedInput> = z.object({
  create: z.union([ z.lazy(() => sigunguCreateWithoutSidoInputSchema),z.lazy(() => sigunguCreateWithoutSidoInputSchema).array(),z.lazy(() => sigunguUncheckedCreateWithoutSidoInputSchema),z.lazy(() => sigunguUncheckedCreateWithoutSidoInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sigunguCreateOrConnectWithoutSidoInputSchema),z.lazy(() => sigunguCreateOrConnectWithoutSidoInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => sigunguUpsertWithWhereUniqueWithoutSidoInputSchema),z.lazy(() => sigunguUpsertWithWhereUniqueWithoutSidoInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sigunguCreateManySidoInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => sigunguWhereUniqueInputSchema),z.lazy(() => sigunguWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => sigunguWhereUniqueInputSchema),z.lazy(() => sigunguWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => sigunguWhereUniqueInputSchema),z.lazy(() => sigunguWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => sigunguWhereUniqueInputSchema),z.lazy(() => sigunguWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => sigunguUpdateWithWhereUniqueWithoutSidoInputSchema),z.lazy(() => sigunguUpdateWithWhereUniqueWithoutSidoInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => sigunguUpdateManyWithWhereWithoutSidoInputSchema),z.lazy(() => sigunguUpdateManyWithWhereWithoutSidoInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => sigunguScalarWhereInputSchema),z.lazy(() => sigunguScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sigunguUncheckedUpdateManyWithoutSidoNestedInputSchema: z.ZodType<Prisma.sigunguUncheckedUpdateManyWithoutSidoNestedInput> = z.object({
  create: z.union([ z.lazy(() => sigunguCreateWithoutSidoInputSchema),z.lazy(() => sigunguCreateWithoutSidoInputSchema).array(),z.lazy(() => sigunguUncheckedCreateWithoutSidoInputSchema),z.lazy(() => sigunguUncheckedCreateWithoutSidoInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => sigunguCreateOrConnectWithoutSidoInputSchema),z.lazy(() => sigunguCreateOrConnectWithoutSidoInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => sigunguUpsertWithWhereUniqueWithoutSidoInputSchema),z.lazy(() => sigunguUpsertWithWhereUniqueWithoutSidoInputSchema).array() ]).optional(),
  createMany: z.lazy(() => sigunguCreateManySidoInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => sigunguWhereUniqueInputSchema),z.lazy(() => sigunguWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => sigunguWhereUniqueInputSchema),z.lazy(() => sigunguWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => sigunguWhereUniqueInputSchema),z.lazy(() => sigunguWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => sigunguWhereUniqueInputSchema),z.lazy(() => sigunguWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => sigunguUpdateWithWhereUniqueWithoutSidoInputSchema),z.lazy(() => sigunguUpdateWithWhereUniqueWithoutSidoInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => sigunguUpdateManyWithWhereWithoutSidoInputSchema),z.lazy(() => sigunguUpdateManyWithWhereWithoutSidoInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => sigunguScalarWhereInputSchema),z.lazy(() => sigunguScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const client_branchCreateNestedManyWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchCreateNestedManyWithoutSigunguInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutSigunguInputSchema),z.lazy(() => client_branchCreateWithoutSigunguInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutSigunguInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutSigunguInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutSigunguInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutSigunguInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManySigunguInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const sidoCreateNestedOneWithoutSigunguInputSchema: z.ZodType<Prisma.sidoCreateNestedOneWithoutSigunguInput> = z.object({
  create: z.union([ z.lazy(() => sidoCreateWithoutSigunguInputSchema),z.lazy(() => sidoUncheckedCreateWithoutSigunguInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sidoCreateOrConnectWithoutSigunguInputSchema).optional(),
  connect: z.lazy(() => sidoWhereUniqueInputSchema).optional()
}).strict();

export const client_branchUncheckedCreateNestedManyWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateNestedManyWithoutSigunguInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutSigunguInputSchema),z.lazy(() => client_branchCreateWithoutSigunguInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutSigunguInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutSigunguInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutSigunguInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutSigunguInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManySigunguInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const client_branchUpdateManyWithoutSigunguNestedInputSchema: z.ZodType<Prisma.client_branchUpdateManyWithoutSigunguNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutSigunguInputSchema),z.lazy(() => client_branchCreateWithoutSigunguInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutSigunguInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutSigunguInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutSigunguInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutSigunguInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => client_branchUpsertWithWhereUniqueWithoutSigunguInputSchema),z.lazy(() => client_branchUpsertWithWhereUniqueWithoutSigunguInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManySigunguInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => client_branchUpdateWithWhereUniqueWithoutSigunguInputSchema),z.lazy(() => client_branchUpdateWithWhereUniqueWithoutSigunguInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => client_branchUpdateManyWithWhereWithoutSigunguInputSchema),z.lazy(() => client_branchUpdateManyWithWhereWithoutSigunguInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => client_branchScalarWhereInputSchema),z.lazy(() => client_branchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const sidoUpdateOneRequiredWithoutSigunguNestedInputSchema: z.ZodType<Prisma.sidoUpdateOneRequiredWithoutSigunguNestedInput> = z.object({
  create: z.union([ z.lazy(() => sidoCreateWithoutSigunguInputSchema),z.lazy(() => sidoUncheckedCreateWithoutSigunguInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => sidoCreateOrConnectWithoutSigunguInputSchema).optional(),
  upsert: z.lazy(() => sidoUpsertWithoutSigunguInputSchema).optional(),
  connect: z.lazy(() => sidoWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => sidoUpdateToOneWithWhereWithoutSigunguInputSchema),z.lazy(() => sidoUpdateWithoutSigunguInputSchema),z.lazy(() => sidoUncheckedUpdateWithoutSigunguInputSchema) ]).optional(),
}).strict();

export const client_branchUncheckedUpdateManyWithoutSigunguNestedInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateManyWithoutSigunguNestedInput> = z.object({
  create: z.union([ z.lazy(() => client_branchCreateWithoutSigunguInputSchema),z.lazy(() => client_branchCreateWithoutSigunguInputSchema).array(),z.lazy(() => client_branchUncheckedCreateWithoutSigunguInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutSigunguInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => client_branchCreateOrConnectWithoutSigunguInputSchema),z.lazy(() => client_branchCreateOrConnectWithoutSigunguInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => client_branchUpsertWithWhereUniqueWithoutSigunguInputSchema),z.lazy(() => client_branchUpsertWithWhereUniqueWithoutSigunguInputSchema).array() ]).optional(),
  createMany: z.lazy(() => client_branchCreateManySigunguInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => client_branchWhereUniqueInputSchema),z.lazy(() => client_branchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => client_branchUpdateWithWhereUniqueWithoutSigunguInputSchema),z.lazy(() => client_branchUpdateWithWhereUniqueWithoutSigunguInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => client_branchUpdateManyWithWhereWithoutSigunguInputSchema),z.lazy(() => client_branchUpdateManyWithWhereWithoutSigunguInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => client_branchScalarWhereInputSchema),z.lazy(() => client_branchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callCreateNestedManyWithoutUser_call_receiver_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callCreateWithoutUser_call_receiver_idTouserInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callCreateOrConnectWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyUser_call_receiver_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callCreateNestedManyWithoutUser_call_assigner_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callCreateWithoutUser_call_assigner_idTouserInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callCreateOrConnectWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyUser_call_assigner_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyUser_device_approval_requester_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyUser_device_approval_approver_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_inspection_logCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutUserInputSchema),z.lazy(() => device_inspection_logCreateWithoutUserInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutUserInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutUserInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_install_infoCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutUserInputSchema),z.lazy(() => device_install_infoCreateWithoutUserInputSchema).array(),z.lazy(() => device_install_infoUncheckedCreateWithoutUserInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_install_infoCreateOrConnectWithoutUserInputSchema),z.lazy(() => device_install_infoCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_install_infoCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_install_infoWhereUniqueInputSchema),z.lazy(() => device_install_infoWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_approver_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_requester_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const approval_roleCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.approval_roleCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutUserInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => approval_roleCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => approval_roleWhereUniqueInputSchema).optional()
}).strict();

export const deptCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.deptCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutUserInputSchema),z.lazy(() => deptUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional()
}).strict();

export const user_positionCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.user_positionCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => user_positionCreateWithoutUserInputSchema),z.lazy(() => user_positionUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => user_positionCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => user_positionWhereUniqueInputSchema).optional()
}).strict();

export const user_role_assignmentCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutUserInputSchema),z.lazy(() => user_role_assignmentCreateWithoutUserInputSchema).array(),z.lazy(() => user_role_assignmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => user_role_assignmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => user_role_assignmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => user_role_assignmentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callCreateWithoutUser_call_receiver_idTouserInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callCreateOrConnectWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyUser_call_receiver_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callCreateWithoutUser_call_assigner_idTouserInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callCreateOrConnectWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyUser_call_assigner_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyUser_device_approval_requester_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyUser_device_approval_approver_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutUserInputSchema),z.lazy(() => device_inspection_logCreateWithoutUserInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutUserInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutUserInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutUserInputSchema),z.lazy(() => device_install_infoCreateWithoutUserInputSchema).array(),z.lazy(() => device_install_infoUncheckedCreateWithoutUserInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_install_infoCreateOrConnectWithoutUserInputSchema),z.lazy(() => device_install_infoCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_install_infoCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_install_infoWhereUniqueInputSchema),z.lazy(() => device_install_infoWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_approver_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_requester_idTouserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutUserInputSchema),z.lazy(() => user_role_assignmentCreateWithoutUserInputSchema).array(),z.lazy(() => user_role_assignmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => user_role_assignmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => user_role_assignmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => user_role_assignmentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumuser_permissionFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumuser_permissionFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => user_permissionSchema).optional()
}).strict();

export const callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema: z.ZodType<Prisma.callUpdateManyWithoutUser_call_receiver_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callCreateWithoutUser_call_receiver_idTouserInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callCreateOrConnectWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyUser_call_receiver_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema: z.ZodType<Prisma.callUpdateManyWithoutUser_call_assigner_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callCreateWithoutUser_call_assigner_idTouserInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callCreateOrConnectWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyUser_call_assigner_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyUser_device_approval_requester_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyUser_device_approval_approver_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_inspection_logUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.device_inspection_logUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutUserInputSchema),z.lazy(() => device_inspection_logCreateWithoutUserInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutUserInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutUserInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_inspection_logScalarWhereInputSchema),z.lazy(() => device_inspection_logScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_install_infoUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.device_install_infoUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutUserInputSchema),z.lazy(() => device_install_infoCreateWithoutUserInputSchema).array(),z.lazy(() => device_install_infoUncheckedCreateWithoutUserInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_install_infoCreateOrConnectWithoutUserInputSchema),z.lazy(() => device_install_infoCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_install_infoUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => device_install_infoUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_install_infoCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_install_infoWhereUniqueInputSchema),z.lazy(() => device_install_infoWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_install_infoWhereUniqueInputSchema),z.lazy(() => device_install_infoWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_install_infoWhereUniqueInputSchema),z.lazy(() => device_install_infoWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_install_infoWhereUniqueInputSchema),z.lazy(() => device_install_infoWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_install_infoUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => device_install_infoUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_install_infoUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => device_install_infoUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_install_infoScalarWhereInputSchema),z.lazy(() => device_install_infoScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema: z.ZodType<Prisma.inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_approver_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => inspection_approvalScalarWhereInputSchema),z.lazy(() => inspection_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema: z.ZodType<Prisma.inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_requester_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => inspection_approvalScalarWhereInputSchema),z.lazy(() => inspection_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const approval_roleUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.approval_roleUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutUserInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => approval_roleCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => approval_roleUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => approval_roleWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => approval_roleWhereInputSchema) ]).optional(),
  connect: z.lazy(() => approval_roleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => approval_roleUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => approval_roleUpdateWithoutUserInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const deptUpdateOneRequiredWithoutUserNestedInputSchema: z.ZodType<Prisma.deptUpdateOneRequiredWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutUserInputSchema),z.lazy(() => deptUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => deptUpsertWithoutUserInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deptUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => deptUpdateWithoutUserInputSchema),z.lazy(() => deptUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const user_positionUpdateOneRequiredWithoutUserNestedInputSchema: z.ZodType<Prisma.user_positionUpdateOneRequiredWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => user_positionCreateWithoutUserInputSchema),z.lazy(() => user_positionUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => user_positionCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => user_positionUpsertWithoutUserInputSchema).optional(),
  connect: z.lazy(() => user_positionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => user_positionUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => user_positionUpdateWithoutUserInputSchema),z.lazy(() => user_positionUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const user_role_assignmentUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.user_role_assignmentUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutUserInputSchema),z.lazy(() => user_role_assignmentCreateWithoutUserInputSchema).array(),z.lazy(() => user_role_assignmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => user_role_assignmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => user_role_assignmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => user_role_assignmentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => user_role_assignmentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => user_role_assignmentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => user_role_assignmentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => user_role_assignmentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => user_role_assignmentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => user_role_assignmentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => user_role_assignmentScalarWhereInputSchema),z.lazy(() => user_role_assignmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callCreateWithoutUser_call_receiver_idTouserInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callCreateOrConnectWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyUser_call_receiver_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutUser_call_receiver_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callCreateWithoutUser_call_assigner_idTouserInputSchema).array(),z.lazy(() => callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => callCreateOrConnectWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callCreateOrConnectWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => callUpsertWithWhereUniqueWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUpsertWithWhereUniqueWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => callCreateManyUser_call_assigner_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => callWhereUniqueInputSchema),z.lazy(() => callWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => callUpdateWithWhereUniqueWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUpdateWithWhereUniqueWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => callUpdateManyWithWhereWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUpdateManyWithWhereWithoutUser_call_assigner_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyUser_device_approval_requester_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutUser_device_approval_requester_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema).array(),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalCreateOrConnectWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_approvalCreateManyUser_device_approval_approver_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_approvalWhereUniqueInputSchema),z.lazy(() => device_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_approvalUpdateManyWithWhereWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUpdateManyWithWhereWithoutUser_device_approval_approver_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutUserInputSchema),z.lazy(() => device_inspection_logCreateWithoutUserInputSchema).array(),z.lazy(() => device_inspection_logUncheckedCreateWithoutUserInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_inspection_logCreateOrConnectWithoutUserInputSchema),z.lazy(() => device_inspection_logCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => device_inspection_logUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_inspection_logCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_inspection_logWhereUniqueInputSchema),z.lazy(() => device_inspection_logWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => device_inspection_logUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => device_inspection_logUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_inspection_logScalarWhereInputSchema),z.lazy(() => device_inspection_logScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.device_install_infoUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutUserInputSchema),z.lazy(() => device_install_infoCreateWithoutUserInputSchema).array(),z.lazy(() => device_install_infoUncheckedCreateWithoutUserInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_install_infoCreateOrConnectWithoutUserInputSchema),z.lazy(() => device_install_infoCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_install_infoUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => device_install_infoUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_install_infoCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_install_infoWhereUniqueInputSchema),z.lazy(() => device_install_infoWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_install_infoWhereUniqueInputSchema),z.lazy(() => device_install_infoWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_install_infoWhereUniqueInputSchema),z.lazy(() => device_install_infoWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_install_infoWhereUniqueInputSchema),z.lazy(() => device_install_infoWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_install_infoUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => device_install_infoUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_install_infoUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => device_install_infoUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_install_infoScalarWhereInputSchema),z.lazy(() => device_install_infoScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_approver_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_approver_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => inspection_approvalScalarWhereInputSchema),z.lazy(() => inspection_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInput> = z.object({
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema).array(),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalCreateOrConnectWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_requester_idTouserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => inspection_approvalWhereUniqueInputSchema),z.lazy(() => inspection_approvalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_requester_idTouserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => inspection_approvalScalarWhereInputSchema),z.lazy(() => inspection_approvalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutUserInputSchema),z.lazy(() => user_role_assignmentCreateWithoutUserInputSchema).array(),z.lazy(() => user_role_assignmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => user_role_assignmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => user_role_assignmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => user_role_assignmentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => user_role_assignmentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => user_role_assignmentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => user_role_assignmentWhereUniqueInputSchema),z.lazy(() => user_role_assignmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => user_role_assignmentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => user_role_assignmentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => user_role_assignmentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => user_role_assignmentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => user_role_assignmentScalarWhereInputSchema),z.lazy(() => user_role_assignmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const userCreateNestedManyWithoutUser_positionInputSchema: z.ZodType<Prisma.userCreateNestedManyWithoutUser_positionInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutUser_positionInputSchema),z.lazy(() => userCreateWithoutUser_positionInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutUser_positionInputSchema),z.lazy(() => userUncheckedCreateWithoutUser_positionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutUser_positionInputSchema),z.lazy(() => userCreateOrConnectWithoutUser_positionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyUser_positionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const userUncheckedCreateNestedManyWithoutUser_positionInputSchema: z.ZodType<Prisma.userUncheckedCreateNestedManyWithoutUser_positionInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutUser_positionInputSchema),z.lazy(() => userCreateWithoutUser_positionInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutUser_positionInputSchema),z.lazy(() => userUncheckedCreateWithoutUser_positionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutUser_positionInputSchema),z.lazy(() => userCreateOrConnectWithoutUser_positionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyUser_positionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const userUpdateManyWithoutUser_positionNestedInputSchema: z.ZodType<Prisma.userUpdateManyWithoutUser_positionNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutUser_positionInputSchema),z.lazy(() => userCreateWithoutUser_positionInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutUser_positionInputSchema),z.lazy(() => userUncheckedCreateWithoutUser_positionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutUser_positionInputSchema),z.lazy(() => userCreateOrConnectWithoutUser_positionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => userUpsertWithWhereUniqueWithoutUser_positionInputSchema),z.lazy(() => userUpsertWithWhereUniqueWithoutUser_positionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyUser_positionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => userUpdateWithWhereUniqueWithoutUser_positionInputSchema),z.lazy(() => userUpdateWithWhereUniqueWithoutUser_positionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => userUpdateManyWithWhereWithoutUser_positionInputSchema),z.lazy(() => userUpdateManyWithWhereWithoutUser_positionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => userScalarWhereInputSchema),z.lazy(() => userScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const userUncheckedUpdateManyWithoutUser_positionNestedInputSchema: z.ZodType<Prisma.userUncheckedUpdateManyWithoutUser_positionNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutUser_positionInputSchema),z.lazy(() => userCreateWithoutUser_positionInputSchema).array(),z.lazy(() => userUncheckedCreateWithoutUser_positionInputSchema),z.lazy(() => userUncheckedCreateWithoutUser_positionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => userCreateOrConnectWithoutUser_positionInputSchema),z.lazy(() => userCreateOrConnectWithoutUser_positionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => userUpsertWithWhereUniqueWithoutUser_positionInputSchema),z.lazy(() => userUpsertWithWhereUniqueWithoutUser_positionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => userCreateManyUser_positionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => userWhereUniqueInputSchema),z.lazy(() => userWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => userUpdateWithWhereUniqueWithoutUser_positionInputSchema),z.lazy(() => userUpdateWithWhereUniqueWithoutUser_positionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => userUpdateManyWithWhereWithoutUser_positionInputSchema),z.lazy(() => userUpdateManyWithWhereWithoutUser_positionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => userScalarWhereInputSchema),z.lazy(() => userScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const approval_roleCreateNestedOneWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.approval_roleCreateNestedOneWithoutUser_role_assignmentInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutUser_role_assignmentInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutUser_role_assignmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => approval_roleCreateOrConnectWithoutUser_role_assignmentInputSchema).optional(),
  connect: z.lazy(() => approval_roleWhereUniqueInputSchema).optional()
}).strict();

export const userCreateNestedOneWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.userCreateNestedOneWithoutUser_role_assignmentInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutUser_role_assignmentInputSchema),z.lazy(() => userUncheckedCreateWithoutUser_role_assignmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutUser_role_assignmentInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional()
}).strict();

export const approval_roleUpdateOneRequiredWithoutUser_role_assignmentNestedInputSchema: z.ZodType<Prisma.approval_roleUpdateOneRequiredWithoutUser_role_assignmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => approval_roleCreateWithoutUser_role_assignmentInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutUser_role_assignmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => approval_roleCreateOrConnectWithoutUser_role_assignmentInputSchema).optional(),
  upsert: z.lazy(() => approval_roleUpsertWithoutUser_role_assignmentInputSchema).optional(),
  connect: z.lazy(() => approval_roleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => approval_roleUpdateToOneWithWhereWithoutUser_role_assignmentInputSchema),z.lazy(() => approval_roleUpdateWithoutUser_role_assignmentInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutUser_role_assignmentInputSchema) ]).optional(),
}).strict();

export const userUpdateOneRequiredWithoutUser_role_assignmentNestedInputSchema: z.ZodType<Prisma.userUpdateOneRequiredWithoutUser_role_assignmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => userCreateWithoutUser_role_assignmentInputSchema),z.lazy(() => userUncheckedCreateWithoutUser_role_assignmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => userCreateOrConnectWithoutUser_role_assignmentInputSchema).optional(),
  upsert: z.lazy(() => userUpsertWithoutUser_role_assignmentInputSchema).optional(),
  connect: z.lazy(() => userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => userUpdateToOneWithWhereWithoutUser_role_assignmentInputSchema),z.lazy(() => userUpdateWithoutUser_role_assignmentInputSchema),z.lazy(() => userUncheckedUpdateWithoutUser_role_assignmentInputSchema) ]).optional(),
}).strict();

export const device_optionCreateNestedManyWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionCreateNestedManyWithoutWarehouseInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutWarehouseInputSchema),z.lazy(() => device_optionCreateWithoutWarehouseInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutWarehouseInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutWarehouseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutWarehouseInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutWarehouseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyWarehouseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const locationCreateNestedManyWithoutWarehouseInputSchema: z.ZodType<Prisma.locationCreateNestedManyWithoutWarehouseInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutWarehouseInputSchema),z.lazy(() => locationCreateWithoutWarehouseInputSchema).array(),z.lazy(() => locationUncheckedCreateWithoutWarehouseInputSchema),z.lazy(() => locationUncheckedCreateWithoutWarehouseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => locationCreateOrConnectWithoutWarehouseInputSchema),z.lazy(() => locationCreateOrConnectWithoutWarehouseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => locationCreateManyWarehouseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const deptCreateNestedOneWithoutWarehouseInputSchema: z.ZodType<Prisma.deptCreateNestedOneWithoutWarehouseInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutWarehouseInputSchema),z.lazy(() => deptUncheckedCreateWithoutWarehouseInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutWarehouseInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional()
}).strict();

export const device_optionUncheckedCreateNestedManyWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionUncheckedCreateNestedManyWithoutWarehouseInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutWarehouseInputSchema),z.lazy(() => device_optionCreateWithoutWarehouseInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutWarehouseInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutWarehouseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutWarehouseInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutWarehouseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyWarehouseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const locationUncheckedCreateNestedManyWithoutWarehouseInputSchema: z.ZodType<Prisma.locationUncheckedCreateNestedManyWithoutWarehouseInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutWarehouseInputSchema),z.lazy(() => locationCreateWithoutWarehouseInputSchema).array(),z.lazy(() => locationUncheckedCreateWithoutWarehouseInputSchema),z.lazy(() => locationUncheckedCreateWithoutWarehouseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => locationCreateOrConnectWithoutWarehouseInputSchema),z.lazy(() => locationCreateOrConnectWithoutWarehouseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => locationCreateManyWarehouseInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const device_optionUpdateManyWithoutWarehouseNestedInputSchema: z.ZodType<Prisma.device_optionUpdateManyWithoutWarehouseNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutWarehouseInputSchema),z.lazy(() => device_optionCreateWithoutWarehouseInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutWarehouseInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutWarehouseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutWarehouseInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutWarehouseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_optionUpsertWithWhereUniqueWithoutWarehouseInputSchema),z.lazy(() => device_optionUpsertWithWhereUniqueWithoutWarehouseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyWarehouseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_optionUpdateWithWhereUniqueWithoutWarehouseInputSchema),z.lazy(() => device_optionUpdateWithWhereUniqueWithoutWarehouseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_optionUpdateManyWithWhereWithoutWarehouseInputSchema),z.lazy(() => device_optionUpdateManyWithWhereWithoutWarehouseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_optionScalarWhereInputSchema),z.lazy(() => device_optionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const locationUpdateManyWithoutWarehouseNestedInputSchema: z.ZodType<Prisma.locationUpdateManyWithoutWarehouseNestedInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutWarehouseInputSchema),z.lazy(() => locationCreateWithoutWarehouseInputSchema).array(),z.lazy(() => locationUncheckedCreateWithoutWarehouseInputSchema),z.lazy(() => locationUncheckedCreateWithoutWarehouseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => locationCreateOrConnectWithoutWarehouseInputSchema),z.lazy(() => locationCreateOrConnectWithoutWarehouseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => locationUpsertWithWhereUniqueWithoutWarehouseInputSchema),z.lazy(() => locationUpsertWithWhereUniqueWithoutWarehouseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => locationCreateManyWarehouseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => locationUpdateWithWhereUniqueWithoutWarehouseInputSchema),z.lazy(() => locationUpdateWithWhereUniqueWithoutWarehouseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => locationUpdateManyWithWhereWithoutWarehouseInputSchema),z.lazy(() => locationUpdateManyWithWhereWithoutWarehouseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => locationScalarWhereInputSchema),z.lazy(() => locationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const deptUpdateOneRequiredWithoutWarehouseNestedInputSchema: z.ZodType<Prisma.deptUpdateOneRequiredWithoutWarehouseNestedInput> = z.object({
  create: z.union([ z.lazy(() => deptCreateWithoutWarehouseInputSchema),z.lazy(() => deptUncheckedCreateWithoutWarehouseInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => deptCreateOrConnectWithoutWarehouseInputSchema).optional(),
  upsert: z.lazy(() => deptUpsertWithoutWarehouseInputSchema).optional(),
  connect: z.lazy(() => deptWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => deptUpdateToOneWithWhereWithoutWarehouseInputSchema),z.lazy(() => deptUpdateWithoutWarehouseInputSchema),z.lazy(() => deptUncheckedUpdateWithoutWarehouseInputSchema) ]).optional(),
}).strict();

export const device_optionUncheckedUpdateManyWithoutWarehouseNestedInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateManyWithoutWarehouseNestedInput> = z.object({
  create: z.union([ z.lazy(() => device_optionCreateWithoutWarehouseInputSchema),z.lazy(() => device_optionCreateWithoutWarehouseInputSchema).array(),z.lazy(() => device_optionUncheckedCreateWithoutWarehouseInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutWarehouseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => device_optionCreateOrConnectWithoutWarehouseInputSchema),z.lazy(() => device_optionCreateOrConnectWithoutWarehouseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => device_optionUpsertWithWhereUniqueWithoutWarehouseInputSchema),z.lazy(() => device_optionUpsertWithWhereUniqueWithoutWarehouseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => device_optionCreateManyWarehouseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => device_optionWhereUniqueInputSchema),z.lazy(() => device_optionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => device_optionUpdateWithWhereUniqueWithoutWarehouseInputSchema),z.lazy(() => device_optionUpdateWithWhereUniqueWithoutWarehouseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => device_optionUpdateManyWithWhereWithoutWarehouseInputSchema),z.lazy(() => device_optionUpdateManyWithWhereWithoutWarehouseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => device_optionScalarWhereInputSchema),z.lazy(() => device_optionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const locationUncheckedUpdateManyWithoutWarehouseNestedInputSchema: z.ZodType<Prisma.locationUncheckedUpdateManyWithoutWarehouseNestedInput> = z.object({
  create: z.union([ z.lazy(() => locationCreateWithoutWarehouseInputSchema),z.lazy(() => locationCreateWithoutWarehouseInputSchema).array(),z.lazy(() => locationUncheckedCreateWithoutWarehouseInputSchema),z.lazy(() => locationUncheckedCreateWithoutWarehouseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => locationCreateOrConnectWithoutWarehouseInputSchema),z.lazy(() => locationCreateOrConnectWithoutWarehouseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => locationUpsertWithWhereUniqueWithoutWarehouseInputSchema),z.lazy(() => locationUpsertWithWhereUniqueWithoutWarehouseInputSchema).array() ]).optional(),
  createMany: z.lazy(() => locationCreateManyWarehouseInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => locationWhereUniqueInputSchema),z.lazy(() => locationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => locationUpdateWithWhereUniqueWithoutWarehouseInputSchema),z.lazy(() => locationUpdateWithWhereUniqueWithoutWarehouseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => locationUpdateManyWithWhereWithoutWarehouseInputSchema),z.lazy(() => locationUpdateManyWithWhereWithoutWarehouseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => locationScalarWhereInputSchema),z.lazy(() => locationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BigIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BigIntFieldUpdateOperationsInput> = z.object({
  set: z.bigint().optional(),
  increment: z.bigint().optional(),
  decrement: z.bigint().optional(),
  multiply: z.bigint().optional(),
  divide: z.bigint().optional()
}).strict();

export const Enumv_user_permissionFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumv_user_permissionFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => v_user_permissionSchema).optional()
}).strict();

export const NullableBigIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBigIntFieldUpdateOperationsInput> = z.object({
  set: z.bigint().optional().nullable(),
  increment: z.bigint().optional(),
  decrement: z.bigint().optional(),
  multiply: z.bigint().optional(),
  divide: z.bigint().optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedEnumdevice_inspection_log_statusNullableFilterSchema: z.ZodType<Prisma.NestedEnumdevice_inspection_log_statusNullableFilter> = z.object({
  equals: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  in: z.lazy(() => device_inspection_log_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => device_inspection_log_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NestedEnumdevice_inspection_log_statusNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumdevice_inspection_log_statusNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumdevice_inspection_log_statusNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  in: z.lazy(() => device_inspection_log_statusSchema).array().optional().nullable(),
  notIn: z.lazy(() => device_inspection_log_statusSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NestedEnumdevice_inspection_log_statusNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumdevice_inspection_log_statusNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumdevice_inspection_log_statusNullableFilterSchema).optional()
}).strict();

export const NestedEnumdevice_option_location_typeFilterSchema: z.ZodType<Prisma.NestedEnumdevice_option_location_typeFilter> = z.object({
  equals: z.lazy(() => device_option_location_typeSchema).optional(),
  in: z.lazy(() => device_option_location_typeSchema).array().optional(),
  notIn: z.lazy(() => device_option_location_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => NestedEnumdevice_option_location_typeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumdevice_option_location_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumdevice_option_location_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => device_option_location_typeSchema).optional(),
  in: z.lazy(() => device_option_location_typeSchema).array().optional(),
  notIn: z.lazy(() => device_option_location_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => NestedEnumdevice_option_location_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumdevice_option_location_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumdevice_option_location_typeFilterSchema).optional()
}).strict();

export const NestedEnumlocation_location_typeFilterSchema: z.ZodType<Prisma.NestedEnumlocation_location_typeFilter> = z.object({
  equals: z.lazy(() => location_location_typeSchema).optional(),
  in: z.lazy(() => location_location_typeSchema).array().optional(),
  notIn: z.lazy(() => location_location_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => NestedEnumlocation_location_typeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumlocation_location_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumlocation_location_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => location_location_typeSchema).optional(),
  in: z.lazy(() => location_location_typeSchema).array().optional(),
  notIn: z.lazy(() => location_location_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => NestedEnumlocation_location_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumlocation_location_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumlocation_location_typeFilterSchema).optional()
}).strict();

export const NestedEnumuser_permissionFilterSchema: z.ZodType<Prisma.NestedEnumuser_permissionFilter> = z.object({
  equals: z.lazy(() => user_permissionSchema).optional(),
  in: z.lazy(() => user_permissionSchema).array().optional(),
  notIn: z.lazy(() => user_permissionSchema).array().optional(),
  not: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => NestedEnumuser_permissionFilterSchema) ]).optional(),
}).strict();

export const NestedEnumuser_permissionWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumuser_permissionWithAggregatesFilter> = z.object({
  equals: z.lazy(() => user_permissionSchema).optional(),
  in: z.lazy(() => user_permissionSchema).array().optional(),
  notIn: z.lazy(() => user_permissionSchema).array().optional(),
  not: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => NestedEnumuser_permissionWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumuser_permissionFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumuser_permissionFilterSchema).optional()
}).strict();

export const NestedBigIntFilterSchema: z.ZodType<Prisma.NestedBigIntFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntFilterSchema) ]).optional(),
}).strict();

export const NestedBigIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBigIntWithAggregatesFilter> = z.object({
  equals: z.bigint().optional(),
  in: z.bigint().array().optional(),
  notIn: z.bigint().array().optional(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntFilterSchema).optional()
}).strict();

export const NestedEnumv_user_permissionFilterSchema: z.ZodType<Prisma.NestedEnumv_user_permissionFilter> = z.object({
  equals: z.lazy(() => v_user_permissionSchema).optional(),
  in: z.lazy(() => v_user_permissionSchema).array().optional(),
  notIn: z.lazy(() => v_user_permissionSchema).array().optional(),
  not: z.union([ z.lazy(() => v_user_permissionSchema),z.lazy(() => NestedEnumv_user_permissionFilterSchema) ]).optional(),
}).strict();

export const NestedEnumv_user_permissionWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumv_user_permissionWithAggregatesFilter> = z.object({
  equals: z.lazy(() => v_user_permissionSchema).optional(),
  in: z.lazy(() => v_user_permissionSchema).array().optional(),
  notIn: z.lazy(() => v_user_permissionSchema).array().optional(),
  not: z.union([ z.lazy(() => v_user_permissionSchema),z.lazy(() => NestedEnumv_user_permissionWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumv_user_permissionFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumv_user_permissionFilterSchema).optional()
}).strict();

export const NestedBigIntNullableFilterSchema: z.ZodType<Prisma.NestedBigIntNullableFilter> = z.object({
  equals: z.bigint().optional().nullable(),
  in: z.bigint().array().optional().nullable(),
  notIn: z.bigint().array().optional().nullable(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBigIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBigIntNullableWithAggregatesFilter> = z.object({
  equals: z.bigint().optional().nullable(),
  in: z.bigint().array().optional().nullable(),
  notIn: z.bigint().array().optional().nullable(),
  lt: z.bigint().optional(),
  lte: z.bigint().optional(),
  gt: z.bigint().optional(),
  gte: z.bigint().optional(),
  not: z.union([ z.bigint(),z.lazy(() => NestedBigIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBigIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBigIntNullableFilterSchema).optional()
}).strict();

export const approval_roleCreateWithoutOther_approval_roleInputSchema: z.ZodType<Prisma.approval_roleCreateWithoutOther_approval_roleInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutOther_approval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleUncheckedCreateWithoutOther_approval_roleInputSchema: z.ZodType<Prisma.approval_roleUncheckedCreateWithoutOther_approval_roleInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  upper_role_id: z.coerce.number().nullable().optional().nullable(),
  device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleCreateOrConnectWithoutOther_approval_roleInputSchema: z.ZodType<Prisma.approval_roleCreateOrConnectWithoutOther_approval_roleInput> = z.object({
  where: z.lazy(() => approval_roleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutOther_approval_roleInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutOther_approval_roleInputSchema) ]),
}).strict();

export const approval_roleCreateWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleCreateWithoutApproval_roleInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  other_approval_role: z.lazy(() => approval_roleCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleUncheckedCreateWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleUncheckedCreateWithoutApproval_roleInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  other_approval_role: z.lazy(() => approval_roleUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleCreateOrConnectWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleCreateOrConnectWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => approval_roleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutApproval_roleInputSchema) ]),
}).strict();

export const approval_roleCreateManyApproval_roleInputEnvelopeSchema: z.ZodType<Prisma.approval_roleCreateManyApproval_roleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => approval_roleCreateManyApproval_roleInputSchema),z.lazy(() => approval_roleCreateManyApproval_roleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_approvalCreateWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalCreateWithoutApproval_roleInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  device_approval: z.lazy(() => device_approvalCreateNestedOneWithoutOther_device_approvalInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutDevice_approvalInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeCreateNestedOneWithoutDevice_approvalInputSchema),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_requester_idTouserInputSchema),
  user_device_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional()
}).strict();

export const device_approvalUncheckedCreateWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateWithoutApproval_roleInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutDevice_approvalInputSchema).optional()
}).strict();

export const device_approvalCreateOrConnectWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalCreateOrConnectWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutApproval_roleInputSchema) ]),
}).strict();

export const device_approvalCreateManyApproval_roleInputEnvelopeSchema: z.ZodType<Prisma.device_approvalCreateManyApproval_roleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_approvalCreateManyApproval_roleInputSchema),z.lazy(() => device_approvalCreateManyApproval_roleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const inspection_approvalCreateWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalCreateWithoutApproval_roleInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutInspection_approvalInputSchema),
  user_inspection_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema).optional(),
  user_inspection_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema)
}).strict();

export const inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedCreateWithoutApproval_roleInput> = z.object({
  approval_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  device_inspection_log_id: z.coerce.number(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const inspection_approvalCreateOrConnectWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalCreateOrConnectWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema) ]),
}).strict();

export const inspection_approvalCreateManyApproval_roleInputEnvelopeSchema: z.ZodType<Prisma.inspection_approvalCreateManyApproval_roleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => inspection_approvalCreateManyApproval_roleInputSchema),z.lazy(() => inspection_approvalCreateManyApproval_roleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const userCreateWithoutApproval_roleInputSchema: z.ZodType<Prisma.userCreateWithoutApproval_roleInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutApproval_roleInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutApproval_roleInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutApproval_roleInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutApproval_roleInputSchema),z.lazy(() => userUncheckedCreateWithoutApproval_roleInputSchema) ]),
}).strict();

export const userCreateManyApproval_roleInputEnvelopeSchema: z.ZodType<Prisma.userCreateManyApproval_roleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => userCreateManyApproval_roleInputSchema),z.lazy(() => userCreateManyApproval_roleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const user_role_assignmentCreateWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentCreateWithoutApproval_roleInput> = z.object({
  user: z.lazy(() => userCreateNestedOneWithoutUser_role_assignmentInputSchema)
}).strict();

export const user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedCreateWithoutApproval_roleInput> = z.object({
  approver_id: z.coerce.number()
}).strict();

export const user_role_assignmentCreateOrConnectWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentCreateOrConnectWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => user_role_assignmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema) ]),
}).strict();

export const user_role_assignmentCreateManyApproval_roleInputEnvelopeSchema: z.ZodType<Prisma.user_role_assignmentCreateManyApproval_roleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => user_role_assignmentCreateManyApproval_roleInputSchema),z.lazy(() => user_role_assignmentCreateManyApproval_roleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const approval_roleUpsertWithoutOther_approval_roleInputSchema: z.ZodType<Prisma.approval_roleUpsertWithoutOther_approval_roleInput> = z.object({
  update: z.union([ z.lazy(() => approval_roleUpdateWithoutOther_approval_roleInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutOther_approval_roleInputSchema) ]),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutOther_approval_roleInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutOther_approval_roleInputSchema) ]),
  where: z.lazy(() => approval_roleWhereInputSchema).optional()
}).strict();

export const approval_roleUpdateToOneWithWhereWithoutOther_approval_roleInputSchema: z.ZodType<Prisma.approval_roleUpdateToOneWithWhereWithoutOther_approval_roleInput> = z.object({
  where: z.lazy(() => approval_roleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => approval_roleUpdateWithoutOther_approval_roleInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutOther_approval_roleInputSchema) ]),
}).strict();

export const approval_roleUpdateWithoutOther_approval_roleInputSchema: z.ZodType<Prisma.approval_roleUpdateWithoutOther_approval_roleInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutOther_approval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const approval_roleUncheckedUpdateWithoutOther_approval_roleInputSchema: z.ZodType<Prisma.approval_roleUncheckedUpdateWithoutOther_approval_roleInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  upper_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const approval_roleUpsertWithWhereUniqueWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleUpsertWithWhereUniqueWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => approval_roleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => approval_roleUpdateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutApproval_roleInputSchema) ]),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutApproval_roleInputSchema) ]),
}).strict();

export const approval_roleUpdateWithWhereUniqueWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleUpdateWithWhereUniqueWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => approval_roleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => approval_roleUpdateWithoutApproval_roleInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutApproval_roleInputSchema) ]),
}).strict();

export const approval_roleUpdateManyWithWhereWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleUpdateManyWithWhereWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => approval_roleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => approval_roleUpdateManyMutationInputSchema),z.lazy(() => approval_roleUncheckedUpdateManyWithoutApproval_roleInputSchema) ]),
}).strict();

export const approval_roleScalarWhereInputSchema: z.ZodType<Prisma.approval_roleScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => approval_roleScalarWhereInputSchema),z.lazy(() => approval_roleScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => approval_roleScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => approval_roleScalarWhereInputSchema),z.lazy(() => approval_roleScalarWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  role_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  upper_role_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const device_approvalUpsertWithWhereUniqueWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalUpsertWithWhereUniqueWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_approvalUpdateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutApproval_roleInputSchema) ]),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutApproval_roleInputSchema) ]),
}).strict();

export const device_approvalUpdateWithWhereUniqueWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalUpdateWithWhereUniqueWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateWithoutApproval_roleInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutApproval_roleInputSchema) ]),
}).strict();

export const device_approvalUpdateManyWithWhereWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithWhereWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => device_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateManyMutationInputSchema),z.lazy(() => device_approvalUncheckedUpdateManyWithoutApproval_roleInputSchema) ]),
}).strict();

export const device_approvalScalarWhereInputSchema: z.ZodType<Prisma.device_approvalScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_approvalScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_approvalScalarWhereInputSchema),z.lazy(() => device_approvalScalarWhereInputSchema).array() ]).optional(),
  approval_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approval_type_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sub_approval_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  requester_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  request_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  approver_role_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  origin_location_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  destination_location_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approver_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approve_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_approved: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const inspection_approvalUpsertWithWhereUniqueWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalUpsertWithWhereUniqueWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateWithoutApproval_roleInputSchema) ]),
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutApproval_roleInputSchema) ]),
}).strict();

export const inspection_approvalUpdateWithWhereUniqueWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalUpdateWithWhereUniqueWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => inspection_approvalUpdateWithoutApproval_roleInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateWithoutApproval_roleInputSchema) ]),
}).strict();

export const inspection_approvalUpdateManyWithWhereWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalUpdateManyWithWhereWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => inspection_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => inspection_approvalUpdateManyMutationInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutApproval_roleInputSchema) ]),
}).strict();

export const inspection_approvalScalarWhereInputSchema: z.ZodType<Prisma.inspection_approvalScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => inspection_approvalScalarWhereInputSchema),z.lazy(() => inspection_approvalScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => inspection_approvalScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => inspection_approvalScalarWhereInputSchema),z.lazy(() => inspection_approvalScalarWhereInputSchema).array() ]).optional(),
  approval_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  requester_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  request_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  approver_role_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  device_inspection_log_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approver_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approved_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  is_approved: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const userUpsertWithWhereUniqueWithoutApproval_roleInputSchema: z.ZodType<Prisma.userUpsertWithWhereUniqueWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => userUpdateWithoutApproval_roleInputSchema),z.lazy(() => userUncheckedUpdateWithoutApproval_roleInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutApproval_roleInputSchema),z.lazy(() => userUncheckedCreateWithoutApproval_roleInputSchema) ]),
}).strict();

export const userUpdateWithWhereUniqueWithoutApproval_roleInputSchema: z.ZodType<Prisma.userUpdateWithWhereUniqueWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => userUpdateWithoutApproval_roleInputSchema),z.lazy(() => userUncheckedUpdateWithoutApproval_roleInputSchema) ]),
}).strict();

export const userUpdateManyWithWhereWithoutApproval_roleInputSchema: z.ZodType<Prisma.userUpdateManyWithWhereWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => userScalarWhereInputSchema),
  data: z.union([ z.lazy(() => userUpdateManyMutationInputSchema),z.lazy(() => userUncheckedUpdateManyWithoutApproval_roleInputSchema) ]),
}).strict();

export const userScalarWhereInputSchema: z.ZodType<Prisma.userScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => userScalarWhereInputSchema),z.lazy(() => userScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => userScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => userScalarWhereInputSchema),z.lazy(() => userScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  user_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  login_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mobile_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  office_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  modified_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approval_role_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  position_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  permission: z.union([ z.lazy(() => Enumuser_permissionFilterSchema),z.lazy(() => user_permissionSchema) ]).optional(),
}).strict();

export const user_role_assignmentUpsertWithWhereUniqueWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentUpsertWithWhereUniqueWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => user_role_assignmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => user_role_assignmentUpdateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUncheckedUpdateWithoutApproval_roleInputSchema) ]),
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutApproval_roleInputSchema) ]),
}).strict();

export const user_role_assignmentUpdateWithWhereUniqueWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentUpdateWithWhereUniqueWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => user_role_assignmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => user_role_assignmentUpdateWithoutApproval_roleInputSchema),z.lazy(() => user_role_assignmentUncheckedUpdateWithoutApproval_roleInputSchema) ]),
}).strict();

export const user_role_assignmentUpdateManyWithWhereWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentUpdateManyWithWhereWithoutApproval_roleInput> = z.object({
  where: z.lazy(() => user_role_assignmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => user_role_assignmentUpdateManyMutationInputSchema),z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutApproval_roleInputSchema) ]),
}).strict();

export const user_role_assignmentScalarWhereInputSchema: z.ZodType<Prisma.user_role_assignmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => user_role_assignmentScalarWhereInputSchema),z.lazy(() => user_role_assignmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => user_role_assignmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => user_role_assignmentScalarWhereInputSchema),z.lazy(() => user_role_assignmentScalarWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approver_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const call_typeCreateWithoutCallInputSchema: z.ZodType<Prisma.call_typeCreateWithoutCallInput> = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50),
  call_type: z.lazy(() => call_typeCreateNestedOneWithoutOther_call_typeInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeCreateNestedManyWithoutCall_typeInputSchema).optional()
}).strict();

export const call_typeUncheckedCreateWithoutCallInputSchema: z.ZodType<Prisma.call_typeUncheckedCreateWithoutCallInput> = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50),
  parent_call_type_id: z.coerce.number().nullable().optional().nullable(),
  other_call_type: z.lazy(() => call_typeUncheckedCreateNestedManyWithoutCall_typeInputSchema).optional()
}).strict();

export const call_typeCreateOrConnectWithoutCallInputSchema: z.ZodType<Prisma.call_typeCreateOrConnectWithoutCallInput> = z.object({
  where: z.lazy(() => call_typeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => call_typeCreateWithoutCallInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutCallInputSchema) ]),
}).strict();

export const client_branchCreateWithoutCallInputSchema: z.ZodType<Prisma.client_branchCreateWithoutCallInput> = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  client: z.lazy(() => clientCreateNestedOneWithoutClient_branchInputSchema),
  client_rate: z.lazy(() => client_rateCreateNestedOneWithoutClient_branchInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutClient_branchInputSchema),
  sigungu: z.lazy(() => sigunguCreateNestedOneWithoutClient_branchInputSchema),
  location: z.lazy(() => locationCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchUncheckedCreateWithoutCallInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateWithoutCallInput> = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  location: z.lazy(() => locationUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchCreateOrConnectWithoutCallInputSchema: z.ZodType<Prisma.client_branchCreateOrConnectWithoutCallInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => client_branchCreateWithoutCallInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutCallInputSchema) ]),
}).strict();

export const deptCreateWithoutCallInputSchema: z.ZodType<Prisma.deptCreateWithoutCallInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutDeptInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutOther_deptInputSchema).optional(),
  other_dept: z.lazy(() => deptCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptUncheckedCreateWithoutCallInputSchema: z.ZodType<Prisma.deptUncheckedCreateWithoutCallInput> = z.object({
  dept_id: z.coerce.number(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable(),
  dept_name: z.string().max(100),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptCreateOrConnectWithoutCallInputSchema: z.ZodType<Prisma.deptCreateOrConnectWithoutCallInput> = z.object({
  where: z.lazy(() => deptWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deptCreateWithoutCallInputSchema),z.lazy(() => deptUncheckedCreateWithoutCallInputSchema) ]),
}).strict();

export const deviceCreateWithoutCallInputSchema: z.ZodType<Prisma.deviceCreateWithoutCallInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutCallInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutCallInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutCallInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutCallInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutCallInputSchema),z.lazy(() => deviceUncheckedCreateWithoutCallInputSchema) ]),
}).strict();

export const userCreateWithoutCall_call_receiver_idTouserInputSchema: z.ZodType<Prisma.userCreateWithoutCall_call_receiver_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutCall_call_receiver_idTouserInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutCall_call_receiver_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutCall_call_receiver_idTouserInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutCall_call_receiver_idTouserInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutCall_call_receiver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutCall_call_receiver_idTouserInputSchema) ]),
}).strict();

export const userCreateWithoutCall_call_assigner_idTouserInputSchema: z.ZodType<Prisma.userCreateWithoutCall_call_assigner_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutCall_call_assigner_idTouserInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutCall_call_assigner_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutCall_call_assigner_idTouserInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutCall_call_assigner_idTouserInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutCall_call_assigner_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutCall_call_assigner_idTouserInputSchema) ]),
}).strict();

export const device_inspection_logCreateWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logCreateWithoutCallInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceCreateNestedOneWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),
  user: z.lazy(() => userCreateNestedOneWithoutDevice_inspection_logInputSchema),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedCreateWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedCreateWithoutCallInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  inspector_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logCreateOrConnectWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logCreateOrConnectWithoutCallInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutCallInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutCallInputSchema) ]),
}).strict();

export const device_inspection_logCreateManyCallInputEnvelopeSchema: z.ZodType<Prisma.device_inspection_logCreateManyCallInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_inspection_logCreateManyCallInputSchema),z.lazy(() => device_inspection_logCreateManyCallInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const call_typeUpsertWithoutCallInputSchema: z.ZodType<Prisma.call_typeUpsertWithoutCallInput> = z.object({
  update: z.union([ z.lazy(() => call_typeUpdateWithoutCallInputSchema),z.lazy(() => call_typeUncheckedUpdateWithoutCallInputSchema) ]),
  create: z.union([ z.lazy(() => call_typeCreateWithoutCallInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutCallInputSchema) ]),
  where: z.lazy(() => call_typeWhereInputSchema).optional()
}).strict();

export const call_typeUpdateToOneWithWhereWithoutCallInputSchema: z.ZodType<Prisma.call_typeUpdateToOneWithWhereWithoutCallInput> = z.object({
  where: z.lazy(() => call_typeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => call_typeUpdateWithoutCallInputSchema),z.lazy(() => call_typeUncheckedUpdateWithoutCallInputSchema) ]),
}).strict();

export const call_typeUpdateWithoutCallInputSchema: z.ZodType<Prisma.call_typeUpdateWithoutCallInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call_type: z.lazy(() => call_typeUpdateOneWithoutOther_call_typeNestedInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeUpdateManyWithoutCall_typeNestedInputSchema).optional()
}).strict();

export const call_typeUncheckedUpdateWithoutCallInputSchema: z.ZodType<Prisma.call_typeUncheckedUpdateWithoutCallInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parent_call_type_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_call_type: z.lazy(() => call_typeUncheckedUpdateManyWithoutCall_typeNestedInputSchema).optional()
}).strict();

export const client_branchUpsertWithoutCallInputSchema: z.ZodType<Prisma.client_branchUpsertWithoutCallInput> = z.object({
  update: z.union([ z.lazy(() => client_branchUpdateWithoutCallInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutCallInputSchema) ]),
  create: z.union([ z.lazy(() => client_branchCreateWithoutCallInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutCallInputSchema) ]),
  where: z.lazy(() => client_branchWhereInputSchema).optional()
}).strict();

export const client_branchUpdateToOneWithWhereWithoutCallInputSchema: z.ZodType<Prisma.client_branchUpdateToOneWithWhereWithoutCallInput> = z.object({
  where: z.lazy(() => client_branchWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => client_branchUpdateWithoutCallInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutCallInputSchema) ]),
}).strict();

export const client_branchUpdateWithoutCallInputSchema: z.ZodType<Prisma.client_branchUpdateWithoutCallInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.lazy(() => clientUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  client_rate: z.lazy(() => client_rateUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  sigungu: z.lazy(() => sigunguUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateWithoutCallInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateWithoutCallInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.lazy(() => locationUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const deptUpsertWithoutCallInputSchema: z.ZodType<Prisma.deptUpsertWithoutCallInput> = z.object({
  update: z.union([ z.lazy(() => deptUpdateWithoutCallInputSchema),z.lazy(() => deptUncheckedUpdateWithoutCallInputSchema) ]),
  create: z.union([ z.lazy(() => deptCreateWithoutCallInputSchema),z.lazy(() => deptUncheckedCreateWithoutCallInputSchema) ]),
  where: z.lazy(() => deptWhereInputSchema).optional()
}).strict();

export const deptUpdateToOneWithWhereWithoutCallInputSchema: z.ZodType<Prisma.deptUpdateToOneWithWhereWithoutCallInput> = z.object({
  where: z.lazy(() => deptWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deptUpdateWithoutCallInputSchema),z.lazy(() => deptUncheckedUpdateWithoutCallInputSchema) ]),
}).strict();

export const deptUpdateWithoutCallInputSchema: z.ZodType<Prisma.deptUpdateWithoutCallInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutDeptNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutOther_deptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUncheckedUpdateWithoutCallInputSchema: z.ZodType<Prisma.deptUncheckedUpdateWithoutCallInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deviceUpsertWithoutCallInputSchema: z.ZodType<Prisma.deviceUpsertWithoutCallInput> = z.object({
  update: z.union([ z.lazy(() => deviceUpdateWithoutCallInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutCallInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutCallInputSchema),z.lazy(() => deviceUncheckedCreateWithoutCallInputSchema) ]),
  where: z.lazy(() => deviceWhereInputSchema).optional()
}).strict();

export const deviceUpdateToOneWithWhereWithoutCallInputSchema: z.ZodType<Prisma.deviceUpdateToOneWithWhereWithoutCallInput> = z.object({
  where: z.lazy(() => deviceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deviceUpdateWithoutCallInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutCallInputSchema) ]),
}).strict();

export const deviceUpdateWithoutCallInputSchema: z.ZodType<Prisma.deviceUpdateWithoutCallInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutCallInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutCallInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutCall_call_receiver_idTouserInputSchema: z.ZodType<Prisma.userUpsertWithoutCall_call_receiver_idTouserInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutCall_call_receiver_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutCall_call_receiver_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutCall_call_receiver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutCall_call_receiver_idTouserInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutCall_call_receiver_idTouserInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutCall_call_receiver_idTouserInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutCall_call_receiver_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutCall_call_receiver_idTouserInputSchema) ]),
}).strict();

export const userUpdateWithoutCall_call_receiver_idTouserInputSchema: z.ZodType<Prisma.userUpdateWithoutCall_call_receiver_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutCall_call_receiver_idTouserInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutCall_call_receiver_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutCall_call_assigner_idTouserInputSchema: z.ZodType<Prisma.userUpsertWithoutCall_call_assigner_idTouserInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutCall_call_assigner_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutCall_call_assigner_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutCall_call_assigner_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutCall_call_assigner_idTouserInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutCall_call_assigner_idTouserInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutCall_call_assigner_idTouserInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutCall_call_assigner_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutCall_call_assigner_idTouserInputSchema) ]),
}).strict();

export const userUpdateWithoutCall_call_assigner_idTouserInputSchema: z.ZodType<Prisma.userUpdateWithoutCall_call_assigner_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutCall_call_assigner_idTouserInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutCall_call_assigner_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const device_inspection_logUpsertWithWhereUniqueWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logUpsertWithWhereUniqueWithoutCallInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithoutCallInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutCallInputSchema) ]),
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutCallInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutCallInputSchema) ]),
}).strict();

export const device_inspection_logUpdateWithWhereUniqueWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logUpdateWithWhereUniqueWithoutCallInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_inspection_logUpdateWithoutCallInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutCallInputSchema) ]),
}).strict();

export const device_inspection_logUpdateManyWithWhereWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logUpdateManyWithWhereWithoutCallInput> = z.object({
  where: z.lazy(() => device_inspection_logScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_inspection_logUpdateManyMutationInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutCallInputSchema) ]),
}).strict();

export const device_inspection_logScalarWhereInputSchema: z.ZodType<Prisma.device_inspection_logScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_inspection_logScalarWhereInputSchema),z.lazy(() => device_inspection_logScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_inspection_logScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_inspection_logScalarWhereInputSchema),z.lazy(() => device_inspection_logScalarWhereInputSchema).array() ]).optional(),
  device_inspection_log_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inspector_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inspection_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  visit_type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  call_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  FL: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  FS: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  BL: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  BS: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_count_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_count_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_count_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_count_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_stock_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  drum_count_YE: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  drum_count_MA: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  drum_count_CY: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  drum_count_BK: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => Enumdevice_inspection_log_statusNullableFilterSchema),z.lazy(() => device_inspection_log_statusSchema) ]).optional().nullable(),
}).strict();

export const callCreateWithoutCall_typeInputSchema: z.ZodType<Prisma.callCreateWithoutCall_typeInput> = z.object({
  call_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  transferred_at: z.coerce.date().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutCallInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutCallInputSchema).optional(),
  device: z.lazy(() => deviceCreateNestedOneWithoutCallInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_receiver_idTouserInputSchema),
  user_call_assigner_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_assigner_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callUncheckedCreateWithoutCall_typeInputSchema: z.ZodType<Prisma.callUncheckedCreateWithoutCall_typeInput> = z.object({
  call_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callCreateOrConnectWithoutCall_typeInputSchema: z.ZodType<Prisma.callCreateOrConnectWithoutCall_typeInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => callCreateWithoutCall_typeInputSchema),z.lazy(() => callUncheckedCreateWithoutCall_typeInputSchema) ]),
}).strict();

export const callCreateManyCall_typeInputEnvelopeSchema: z.ZodType<Prisma.callCreateManyCall_typeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => callCreateManyCall_typeInputSchema),z.lazy(() => callCreateManyCall_typeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const call_typeCreateWithoutOther_call_typeInputSchema: z.ZodType<Prisma.call_typeCreateWithoutOther_call_typeInput> = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutCall_typeInputSchema).optional(),
  call_type: z.lazy(() => call_typeCreateNestedOneWithoutOther_call_typeInputSchema).optional()
}).strict();

export const call_typeUncheckedCreateWithoutOther_call_typeInputSchema: z.ZodType<Prisma.call_typeUncheckedCreateWithoutOther_call_typeInput> = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50),
  parent_call_type_id: z.coerce.number().nullable().optional().nullable(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutCall_typeInputSchema).optional()
}).strict();

export const call_typeCreateOrConnectWithoutOther_call_typeInputSchema: z.ZodType<Prisma.call_typeCreateOrConnectWithoutOther_call_typeInput> = z.object({
  where: z.lazy(() => call_typeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => call_typeCreateWithoutOther_call_typeInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutOther_call_typeInputSchema) ]),
}).strict();

export const call_typeCreateWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeCreateWithoutCall_typeInput> = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutCall_typeInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeCreateNestedManyWithoutCall_typeInputSchema).optional()
}).strict();

export const call_typeUncheckedCreateWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeUncheckedCreateWithoutCall_typeInput> = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutCall_typeInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeUncheckedCreateNestedManyWithoutCall_typeInputSchema).optional()
}).strict();

export const call_typeCreateOrConnectWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeCreateOrConnectWithoutCall_typeInput> = z.object({
  where: z.lazy(() => call_typeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => call_typeCreateWithoutCall_typeInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutCall_typeInputSchema) ]),
}).strict();

export const call_typeCreateManyCall_typeInputEnvelopeSchema: z.ZodType<Prisma.call_typeCreateManyCall_typeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => call_typeCreateManyCall_typeInputSchema),z.lazy(() => call_typeCreateManyCall_typeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const callUpsertWithWhereUniqueWithoutCall_typeInputSchema: z.ZodType<Prisma.callUpsertWithWhereUniqueWithoutCall_typeInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => callUpdateWithoutCall_typeInputSchema),z.lazy(() => callUncheckedUpdateWithoutCall_typeInputSchema) ]),
  create: z.union([ z.lazy(() => callCreateWithoutCall_typeInputSchema),z.lazy(() => callUncheckedCreateWithoutCall_typeInputSchema) ]),
}).strict();

export const callUpdateWithWhereUniqueWithoutCall_typeInputSchema: z.ZodType<Prisma.callUpdateWithWhereUniqueWithoutCall_typeInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => callUpdateWithoutCall_typeInputSchema),z.lazy(() => callUncheckedUpdateWithoutCall_typeInputSchema) ]),
}).strict();

export const callUpdateManyWithWhereWithoutCall_typeInputSchema: z.ZodType<Prisma.callUpdateManyWithWhereWithoutCall_typeInput> = z.object({
  where: z.lazy(() => callScalarWhereInputSchema),
  data: z.union([ z.lazy(() => callUpdateManyMutationInputSchema),z.lazy(() => callUncheckedUpdateManyWithoutCall_typeInputSchema) ]),
}).strict();

export const callScalarWhereInputSchema: z.ZodType<Prisma.callScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => callScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => callScalarWhereInputSchema),z.lazy(() => callScalarWhereInputSchema).array() ]).optional(),
  call_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  call_type_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_branch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  requester_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requester_num: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  requester_black_consumer: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  detail: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  received_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  receiver_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  transferred_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  transferred_dept_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  assigner_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  completed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const call_typeUpsertWithoutOther_call_typeInputSchema: z.ZodType<Prisma.call_typeUpsertWithoutOther_call_typeInput> = z.object({
  update: z.union([ z.lazy(() => call_typeUpdateWithoutOther_call_typeInputSchema),z.lazy(() => call_typeUncheckedUpdateWithoutOther_call_typeInputSchema) ]),
  create: z.union([ z.lazy(() => call_typeCreateWithoutOther_call_typeInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutOther_call_typeInputSchema) ]),
  where: z.lazy(() => call_typeWhereInputSchema).optional()
}).strict();

export const call_typeUpdateToOneWithWhereWithoutOther_call_typeInputSchema: z.ZodType<Prisma.call_typeUpdateToOneWithWhereWithoutOther_call_typeInput> = z.object({
  where: z.lazy(() => call_typeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => call_typeUpdateWithoutOther_call_typeInputSchema),z.lazy(() => call_typeUncheckedUpdateWithoutOther_call_typeInputSchema) ]),
}).strict();

export const call_typeUpdateWithoutOther_call_typeInputSchema: z.ZodType<Prisma.call_typeUpdateWithoutOther_call_typeInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutCall_typeNestedInputSchema).optional(),
  call_type: z.lazy(() => call_typeUpdateOneWithoutOther_call_typeNestedInputSchema).optional()
}).strict();

export const call_typeUncheckedUpdateWithoutOther_call_typeInputSchema: z.ZodType<Prisma.call_typeUncheckedUpdateWithoutOther_call_typeInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parent_call_type_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutCall_typeNestedInputSchema).optional()
}).strict();

export const call_typeUpsertWithWhereUniqueWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeUpsertWithWhereUniqueWithoutCall_typeInput> = z.object({
  where: z.lazy(() => call_typeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => call_typeUpdateWithoutCall_typeInputSchema),z.lazy(() => call_typeUncheckedUpdateWithoutCall_typeInputSchema) ]),
  create: z.union([ z.lazy(() => call_typeCreateWithoutCall_typeInputSchema),z.lazy(() => call_typeUncheckedCreateWithoutCall_typeInputSchema) ]),
}).strict();

export const call_typeUpdateWithWhereUniqueWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeUpdateWithWhereUniqueWithoutCall_typeInput> = z.object({
  where: z.lazy(() => call_typeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => call_typeUpdateWithoutCall_typeInputSchema),z.lazy(() => call_typeUncheckedUpdateWithoutCall_typeInputSchema) ]),
}).strict();

export const call_typeUpdateManyWithWhereWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeUpdateManyWithWhereWithoutCall_typeInput> = z.object({
  where: z.lazy(() => call_typeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => call_typeUpdateManyMutationInputSchema),z.lazy(() => call_typeUncheckedUpdateManyWithoutCall_typeInputSchema) ]),
}).strict();

export const call_typeScalarWhereInputSchema: z.ZodType<Prisma.call_typeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => call_typeScalarWhereInputSchema),z.lazy(() => call_typeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => call_typeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => call_typeScalarWhereInputSchema),z.lazy(() => call_typeScalarWhereInputSchema).array() ]).optional(),
  call_type_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  call_type_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parent_call_type_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const clientCreateWithoutOther_clientInputSchema: z.ZodType<Prisma.clientCreateWithoutOther_clientInput> = z.object({
  client_id: z.coerce.number(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  client: z.lazy(() => clientCreateNestedOneWithoutOther_clientInputSchema).optional(),
  client_rate: z.lazy(() => client_rateCreateNestedOneWithoutClientInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutClientInputSchema).optional()
}).strict();

export const clientUncheckedCreateWithoutOther_clientInputSchema: z.ZodType<Prisma.clientUncheckedCreateWithoutOther_clientInput> = z.object({
  client_id: z.coerce.number(),
  parent_client_id: z.coerce.number().nullable().optional().nullable(),
  default_client_branch_rate_id: z.coerce.number().nullable().optional().nullable(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutClientInputSchema).optional()
}).strict();

export const clientCreateOrConnectWithoutOther_clientInputSchema: z.ZodType<Prisma.clientCreateOrConnectWithoutOther_clientInput> = z.object({
  where: z.lazy(() => clientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => clientCreateWithoutOther_clientInputSchema),z.lazy(() => clientUncheckedCreateWithoutOther_clientInputSchema) ]),
}).strict();

export const clientCreateWithoutClientInputSchema: z.ZodType<Prisma.clientCreateWithoutClientInput> = z.object({
  client_id: z.coerce.number(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  other_client: z.lazy(() => clientCreateNestedManyWithoutClientInputSchema).optional(),
  client_rate: z.lazy(() => client_rateCreateNestedOneWithoutClientInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutClientInputSchema).optional()
}).strict();

export const clientUncheckedCreateWithoutClientInputSchema: z.ZodType<Prisma.clientUncheckedCreateWithoutClientInput> = z.object({
  client_id: z.coerce.number(),
  default_client_branch_rate_id: z.coerce.number().nullable().optional().nullable(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  other_client: z.lazy(() => clientUncheckedCreateNestedManyWithoutClientInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutClientInputSchema).optional()
}).strict();

export const clientCreateOrConnectWithoutClientInputSchema: z.ZodType<Prisma.clientCreateOrConnectWithoutClientInput> = z.object({
  where: z.lazy(() => clientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => clientCreateWithoutClientInputSchema),z.lazy(() => clientUncheckedCreateWithoutClientInputSchema) ]),
}).strict();

export const clientCreateManyClientInputEnvelopeSchema: z.ZodType<Prisma.clientCreateManyClientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => clientCreateManyClientInputSchema),z.lazy(() => clientCreateManyClientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const client_rateCreateWithoutClientInputSchema: z.ZodType<Prisma.client_rateCreateWithoutClientInput> = z.object({
  client_rate_id: z.coerce.number(),
  rate_type: z.string().max(10),
  rate_detail: z.string().max(45).nullable().optional().nullable(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutClient_rateInputSchema).optional()
}).strict();

export const client_rateUncheckedCreateWithoutClientInputSchema: z.ZodType<Prisma.client_rateUncheckedCreateWithoutClientInput> = z.object({
  client_rate_id: z.coerce.number(),
  rate_type: z.string().max(10),
  rate_detail: z.string().max(45).nullable().optional().nullable(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutClient_rateInputSchema).optional()
}).strict();

export const client_rateCreateOrConnectWithoutClientInputSchema: z.ZodType<Prisma.client_rateCreateOrConnectWithoutClientInput> = z.object({
  where: z.lazy(() => client_rateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => client_rateCreateWithoutClientInputSchema),z.lazy(() => client_rateUncheckedCreateWithoutClientInputSchema) ]),
}).strict();

export const client_branchCreateWithoutClientInputSchema: z.ZodType<Prisma.client_branchCreateWithoutClientInput> = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callCreateNestedManyWithoutClient_branchInputSchema).optional(),
  client_rate: z.lazy(() => client_rateCreateNestedOneWithoutClient_branchInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutClient_branchInputSchema),
  sigungu: z.lazy(() => sigunguCreateNestedOneWithoutClient_branchInputSchema),
  location: z.lazy(() => locationCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchUncheckedCreateWithoutClientInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateWithoutClientInput> = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional(),
  location: z.lazy(() => locationUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchCreateOrConnectWithoutClientInputSchema: z.ZodType<Prisma.client_branchCreateOrConnectWithoutClientInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => client_branchCreateWithoutClientInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClientInputSchema) ]),
}).strict();

export const client_branchCreateManyClientInputEnvelopeSchema: z.ZodType<Prisma.client_branchCreateManyClientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => client_branchCreateManyClientInputSchema),z.lazy(() => client_branchCreateManyClientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const clientUpsertWithoutOther_clientInputSchema: z.ZodType<Prisma.clientUpsertWithoutOther_clientInput> = z.object({
  update: z.union([ z.lazy(() => clientUpdateWithoutOther_clientInputSchema),z.lazy(() => clientUncheckedUpdateWithoutOther_clientInputSchema) ]),
  create: z.union([ z.lazy(() => clientCreateWithoutOther_clientInputSchema),z.lazy(() => clientUncheckedCreateWithoutOther_clientInputSchema) ]),
  where: z.lazy(() => clientWhereInputSchema).optional()
}).strict();

export const clientUpdateToOneWithWhereWithoutOther_clientInputSchema: z.ZodType<Prisma.clientUpdateToOneWithWhereWithoutOther_clientInput> = z.object({
  where: z.lazy(() => clientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => clientUpdateWithoutOther_clientInputSchema),z.lazy(() => clientUncheckedUpdateWithoutOther_clientInputSchema) ]),
}).strict();

export const clientUpdateWithoutOther_clientInputSchema: z.ZodType<Prisma.clientUpdateWithoutOther_clientInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.lazy(() => clientUpdateOneWithoutOther_clientNestedInputSchema).optional(),
  client_rate: z.lazy(() => client_rateUpdateOneWithoutClientNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutClientNestedInputSchema).optional()
}).strict();

export const clientUncheckedUpdateWithoutOther_clientInputSchema: z.ZodType<Prisma.clientUncheckedUpdateWithoutOther_clientInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutClientNestedInputSchema).optional()
}).strict();

export const clientUpsertWithWhereUniqueWithoutClientInputSchema: z.ZodType<Prisma.clientUpsertWithWhereUniqueWithoutClientInput> = z.object({
  where: z.lazy(() => clientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => clientUpdateWithoutClientInputSchema),z.lazy(() => clientUncheckedUpdateWithoutClientInputSchema) ]),
  create: z.union([ z.lazy(() => clientCreateWithoutClientInputSchema),z.lazy(() => clientUncheckedCreateWithoutClientInputSchema) ]),
}).strict();

export const clientUpdateWithWhereUniqueWithoutClientInputSchema: z.ZodType<Prisma.clientUpdateWithWhereUniqueWithoutClientInput> = z.object({
  where: z.lazy(() => clientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => clientUpdateWithoutClientInputSchema),z.lazy(() => clientUncheckedUpdateWithoutClientInputSchema) ]),
}).strict();

export const clientUpdateManyWithWhereWithoutClientInputSchema: z.ZodType<Prisma.clientUpdateManyWithWhereWithoutClientInput> = z.object({
  where: z.lazy(() => clientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => clientUpdateManyMutationInputSchema),z.lazy(() => clientUncheckedUpdateManyWithoutClientInputSchema) ]),
}).strict();

export const clientScalarWhereInputSchema: z.ZodType<Prisma.clientScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => clientScalarWhereInputSchema),z.lazy(() => clientScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => clientScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => clientScalarWhereInputSchema),z.lazy(() => clientScalarWhereInputSchema).array() ]).optional(),
  client_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  parent_client_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  client_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  remote_support: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  push_alert: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const client_rateUpsertWithoutClientInputSchema: z.ZodType<Prisma.client_rateUpsertWithoutClientInput> = z.object({
  update: z.union([ z.lazy(() => client_rateUpdateWithoutClientInputSchema),z.lazy(() => client_rateUncheckedUpdateWithoutClientInputSchema) ]),
  create: z.union([ z.lazy(() => client_rateCreateWithoutClientInputSchema),z.lazy(() => client_rateUncheckedCreateWithoutClientInputSchema) ]),
  where: z.lazy(() => client_rateWhereInputSchema).optional()
}).strict();

export const client_rateUpdateToOneWithWhereWithoutClientInputSchema: z.ZodType<Prisma.client_rateUpdateToOneWithWhereWithoutClientInput> = z.object({
  where: z.lazy(() => client_rateWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => client_rateUpdateWithoutClientInputSchema),z.lazy(() => client_rateUncheckedUpdateWithoutClientInputSchema) ]),
}).strict();

export const client_rateUpdateWithoutClientInputSchema: z.ZodType<Prisma.client_rateUpdateWithoutClientInput> = z.object({
  client_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  rate_type: z.union([ z.string().max(10),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutClient_rateNestedInputSchema).optional()
}).strict();

export const client_rateUncheckedUpdateWithoutClientInputSchema: z.ZodType<Prisma.client_rateUncheckedUpdateWithoutClientInput> = z.object({
  client_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  rate_type: z.union([ z.string().max(10),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutClient_rateNestedInputSchema).optional()
}).strict();

export const client_branchUpsertWithWhereUniqueWithoutClientInputSchema: z.ZodType<Prisma.client_branchUpsertWithWhereUniqueWithoutClientInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => client_branchUpdateWithoutClientInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutClientInputSchema) ]),
  create: z.union([ z.lazy(() => client_branchCreateWithoutClientInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClientInputSchema) ]),
}).strict();

export const client_branchUpdateWithWhereUniqueWithoutClientInputSchema: z.ZodType<Prisma.client_branchUpdateWithWhereUniqueWithoutClientInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => client_branchUpdateWithoutClientInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutClientInputSchema) ]),
}).strict();

export const client_branchUpdateManyWithWhereWithoutClientInputSchema: z.ZodType<Prisma.client_branchUpdateManyWithWhereWithoutClientInput> = z.object({
  where: z.lazy(() => client_branchScalarWhereInputSchema),
  data: z.union([ z.lazy(() => client_branchUpdateManyMutationInputSchema),z.lazy(() => client_branchUncheckedUpdateManyWithoutClientInputSchema) ]),
}).strict();

export const client_branchScalarWhereInputSchema: z.ZodType<Prisma.client_branchScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => client_branchScalarWhereInputSchema),z.lazy(() => client_branchScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => client_branchScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => client_branchScalarWhereInputSchema),z.lazy(() => client_branchScalarWhereInputSchema).array() ]).optional(),
  client_branch_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sigungu_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  client_branch_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  client_branch_rate_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  branch_mgr_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  branch_mgr_email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  remote_support: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  push_alert: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const callCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.callCreateWithoutClient_branchInput> = z.object({
  call_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  transferred_at: z.coerce.date().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  call_type: z.lazy(() => call_typeCreateNestedOneWithoutCallInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutCallInputSchema).optional(),
  device: z.lazy(() => deviceCreateNestedOneWithoutCallInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_receiver_idTouserInputSchema),
  user_call_assigner_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_assigner_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callUncheckedCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.callUncheckedCreateWithoutClient_branchInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callCreateOrConnectWithoutClient_branchInputSchema: z.ZodType<Prisma.callCreateOrConnectWithoutClient_branchInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => callCreateWithoutClient_branchInputSchema),z.lazy(() => callUncheckedCreateWithoutClient_branchInputSchema) ]),
}).strict();

export const callCreateManyClient_branchInputEnvelopeSchema: z.ZodType<Prisma.callCreateManyClient_branchInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => callCreateManyClient_branchInputSchema),z.lazy(() => callCreateManyClient_branchInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const clientCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.clientCreateWithoutClient_branchInput> = z.object({
  client_id: z.coerce.number(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  client: z.lazy(() => clientCreateNestedOneWithoutOther_clientInputSchema).optional(),
  other_client: z.lazy(() => clientCreateNestedManyWithoutClientInputSchema).optional(),
  client_rate: z.lazy(() => client_rateCreateNestedOneWithoutClientInputSchema).optional()
}).strict();

export const clientUncheckedCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.clientUncheckedCreateWithoutClient_branchInput> = z.object({
  client_id: z.coerce.number(),
  parent_client_id: z.coerce.number().nullable().optional().nullable(),
  default_client_branch_rate_id: z.coerce.number().nullable().optional().nullable(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  other_client: z.lazy(() => clientUncheckedCreateNestedManyWithoutClientInputSchema).optional()
}).strict();

export const clientCreateOrConnectWithoutClient_branchInputSchema: z.ZodType<Prisma.clientCreateOrConnectWithoutClient_branchInput> = z.object({
  where: z.lazy(() => clientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => clientCreateWithoutClient_branchInputSchema),z.lazy(() => clientUncheckedCreateWithoutClient_branchInputSchema) ]),
}).strict();

export const client_rateCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.client_rateCreateWithoutClient_branchInput> = z.object({
  client_rate_id: z.coerce.number(),
  rate_type: z.string().max(10),
  rate_detail: z.string().max(45).nullable().optional().nullable(),
  client: z.lazy(() => clientCreateNestedManyWithoutClient_rateInputSchema).optional()
}).strict();

export const client_rateUncheckedCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.client_rateUncheckedCreateWithoutClient_branchInput> = z.object({
  client_rate_id: z.coerce.number(),
  rate_type: z.string().max(10),
  rate_detail: z.string().max(45).nullable().optional().nullable(),
  client: z.lazy(() => clientUncheckedCreateNestedManyWithoutClient_rateInputSchema).optional()
}).strict();

export const client_rateCreateOrConnectWithoutClient_branchInputSchema: z.ZodType<Prisma.client_rateCreateOrConnectWithoutClient_branchInput> = z.object({
  where: z.lazy(() => client_rateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => client_rateCreateWithoutClient_branchInputSchema),z.lazy(() => client_rateUncheckedCreateWithoutClient_branchInputSchema) ]),
}).strict();

export const deptCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.deptCreateWithoutClient_branchInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callCreateNestedManyWithoutDeptInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutOther_deptInputSchema).optional(),
  other_dept: z.lazy(() => deptCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptUncheckedCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.deptUncheckedCreateWithoutClient_branchInput> = z.object({
  dept_id: z.coerce.number(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptCreateOrConnectWithoutClient_branchInputSchema: z.ZodType<Prisma.deptCreateOrConnectWithoutClient_branchInput> = z.object({
  where: z.lazy(() => deptWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deptCreateWithoutClient_branchInputSchema),z.lazy(() => deptUncheckedCreateWithoutClient_branchInputSchema) ]),
}).strict();

export const sigunguCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.sigunguCreateWithoutClient_branchInput> = z.object({
  sigungu_id: z.coerce.number(),
  sigungu_name: z.string().max(45),
  sido: z.lazy(() => sidoCreateNestedOneWithoutSigunguInputSchema)
}).strict();

export const sigunguUncheckedCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.sigunguUncheckedCreateWithoutClient_branchInput> = z.object({
  sigungu_id: z.coerce.number(),
  sigungu_name: z.string().max(45),
  sido_id: z.coerce.number()
}).strict();

export const sigunguCreateOrConnectWithoutClient_branchInputSchema: z.ZodType<Prisma.sigunguCreateOrConnectWithoutClient_branchInput> = z.object({
  where: z.lazy(() => sigunguWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sigunguCreateWithoutClient_branchInputSchema),z.lazy(() => sigunguUncheckedCreateWithoutClient_branchInputSchema) ]),
}).strict();

export const locationCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.locationCreateWithoutClient_branchInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logCreateNestedManyWithoutLocationInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedOneWithoutLocationInputSchema).optional()
}).strict();

export const locationUncheckedCreateWithoutClient_branchInputSchema: z.ZodType<Prisma.locationUncheckedCreateWithoutClient_branchInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  warehouse_id: z.coerce.number().nullable().optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutLocationInputSchema).optional()
}).strict();

export const locationCreateOrConnectWithoutClient_branchInputSchema: z.ZodType<Prisma.locationCreateOrConnectWithoutClient_branchInput> = z.object({
  where: z.lazy(() => locationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => locationCreateWithoutClient_branchInputSchema),z.lazy(() => locationUncheckedCreateWithoutClient_branchInputSchema) ]),
}).strict();

export const locationCreateManyClient_branchInputEnvelopeSchema: z.ZodType<Prisma.locationCreateManyClient_branchInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => locationCreateManyClient_branchInputSchema),z.lazy(() => locationCreateManyClient_branchInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const callUpsertWithWhereUniqueWithoutClient_branchInputSchema: z.ZodType<Prisma.callUpsertWithWhereUniqueWithoutClient_branchInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => callUpdateWithoutClient_branchInputSchema),z.lazy(() => callUncheckedUpdateWithoutClient_branchInputSchema) ]),
  create: z.union([ z.lazy(() => callCreateWithoutClient_branchInputSchema),z.lazy(() => callUncheckedCreateWithoutClient_branchInputSchema) ]),
}).strict();

export const callUpdateWithWhereUniqueWithoutClient_branchInputSchema: z.ZodType<Prisma.callUpdateWithWhereUniqueWithoutClient_branchInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => callUpdateWithoutClient_branchInputSchema),z.lazy(() => callUncheckedUpdateWithoutClient_branchInputSchema) ]),
}).strict();

export const callUpdateManyWithWhereWithoutClient_branchInputSchema: z.ZodType<Prisma.callUpdateManyWithWhereWithoutClient_branchInput> = z.object({
  where: z.lazy(() => callScalarWhereInputSchema),
  data: z.union([ z.lazy(() => callUpdateManyMutationInputSchema),z.lazy(() => callUncheckedUpdateManyWithoutClient_branchInputSchema) ]),
}).strict();

export const clientUpsertWithoutClient_branchInputSchema: z.ZodType<Prisma.clientUpsertWithoutClient_branchInput> = z.object({
  update: z.union([ z.lazy(() => clientUpdateWithoutClient_branchInputSchema),z.lazy(() => clientUncheckedUpdateWithoutClient_branchInputSchema) ]),
  create: z.union([ z.lazy(() => clientCreateWithoutClient_branchInputSchema),z.lazy(() => clientUncheckedCreateWithoutClient_branchInputSchema) ]),
  where: z.lazy(() => clientWhereInputSchema).optional()
}).strict();

export const clientUpdateToOneWithWhereWithoutClient_branchInputSchema: z.ZodType<Prisma.clientUpdateToOneWithWhereWithoutClient_branchInput> = z.object({
  where: z.lazy(() => clientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => clientUpdateWithoutClient_branchInputSchema),z.lazy(() => clientUncheckedUpdateWithoutClient_branchInputSchema) ]),
}).strict();

export const clientUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.clientUpdateWithoutClient_branchInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.lazy(() => clientUpdateOneWithoutOther_clientNestedInputSchema).optional(),
  other_client: z.lazy(() => clientUpdateManyWithoutClientNestedInputSchema).optional(),
  client_rate: z.lazy(() => client_rateUpdateOneWithoutClientNestedInputSchema).optional()
}).strict();

export const clientUncheckedUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.clientUncheckedUpdateWithoutClient_branchInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  default_client_branch_rate_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  other_client: z.lazy(() => clientUncheckedUpdateManyWithoutClientNestedInputSchema).optional()
}).strict();

export const client_rateUpsertWithoutClient_branchInputSchema: z.ZodType<Prisma.client_rateUpsertWithoutClient_branchInput> = z.object({
  update: z.union([ z.lazy(() => client_rateUpdateWithoutClient_branchInputSchema),z.lazy(() => client_rateUncheckedUpdateWithoutClient_branchInputSchema) ]),
  create: z.union([ z.lazy(() => client_rateCreateWithoutClient_branchInputSchema),z.lazy(() => client_rateUncheckedCreateWithoutClient_branchInputSchema) ]),
  where: z.lazy(() => client_rateWhereInputSchema).optional()
}).strict();

export const client_rateUpdateToOneWithWhereWithoutClient_branchInputSchema: z.ZodType<Prisma.client_rateUpdateToOneWithWhereWithoutClient_branchInput> = z.object({
  where: z.lazy(() => client_rateWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => client_rateUpdateWithoutClient_branchInputSchema),z.lazy(() => client_rateUncheckedUpdateWithoutClient_branchInputSchema) ]),
}).strict();

export const client_rateUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.client_rateUpdateWithoutClient_branchInput> = z.object({
  client_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  rate_type: z.union([ z.string().max(10),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client: z.lazy(() => clientUpdateManyWithoutClient_rateNestedInputSchema).optional()
}).strict();

export const client_rateUncheckedUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.client_rateUncheckedUpdateWithoutClient_branchInput> = z.object({
  client_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  rate_type: z.union([ z.string().max(10),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  rate_detail: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client: z.lazy(() => clientUncheckedUpdateManyWithoutClient_rateNestedInputSchema).optional()
}).strict();

export const deptUpsertWithoutClient_branchInputSchema: z.ZodType<Prisma.deptUpsertWithoutClient_branchInput> = z.object({
  update: z.union([ z.lazy(() => deptUpdateWithoutClient_branchInputSchema),z.lazy(() => deptUncheckedUpdateWithoutClient_branchInputSchema) ]),
  create: z.union([ z.lazy(() => deptCreateWithoutClient_branchInputSchema),z.lazy(() => deptUncheckedCreateWithoutClient_branchInputSchema) ]),
  where: z.lazy(() => deptWhereInputSchema).optional()
}).strict();

export const deptUpdateToOneWithWhereWithoutClient_branchInputSchema: z.ZodType<Prisma.deptUpdateToOneWithWhereWithoutClient_branchInput> = z.object({
  where: z.lazy(() => deptWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deptUpdateWithoutClient_branchInputSchema),z.lazy(() => deptUncheckedUpdateWithoutClient_branchInputSchema) ]),
}).strict();

export const deptUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.deptUpdateWithoutClient_branchInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeptNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutOther_deptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUncheckedUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.deptUncheckedUpdateWithoutClient_branchInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const sigunguUpsertWithoutClient_branchInputSchema: z.ZodType<Prisma.sigunguUpsertWithoutClient_branchInput> = z.object({
  update: z.union([ z.lazy(() => sigunguUpdateWithoutClient_branchInputSchema),z.lazy(() => sigunguUncheckedUpdateWithoutClient_branchInputSchema) ]),
  create: z.union([ z.lazy(() => sigunguCreateWithoutClient_branchInputSchema),z.lazy(() => sigunguUncheckedCreateWithoutClient_branchInputSchema) ]),
  where: z.lazy(() => sigunguWhereInputSchema).optional()
}).strict();

export const sigunguUpdateToOneWithWhereWithoutClient_branchInputSchema: z.ZodType<Prisma.sigunguUpdateToOneWithWhereWithoutClient_branchInput> = z.object({
  where: z.lazy(() => sigunguWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => sigunguUpdateWithoutClient_branchInputSchema),z.lazy(() => sigunguUncheckedUpdateWithoutClient_branchInputSchema) ]),
}).strict();

export const sigunguUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.sigunguUpdateWithoutClient_branchInput> = z.object({
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sido: z.lazy(() => sidoUpdateOneRequiredWithoutSigunguNestedInputSchema).optional()
}).strict();

export const sigunguUncheckedUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.sigunguUncheckedUpdateWithoutClient_branchInput> = z.object({
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sido_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const locationUpsertWithWhereUniqueWithoutClient_branchInputSchema: z.ZodType<Prisma.locationUpsertWithWhereUniqueWithoutClient_branchInput> = z.object({
  where: z.lazy(() => locationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => locationUpdateWithoutClient_branchInputSchema),z.lazy(() => locationUncheckedUpdateWithoutClient_branchInputSchema) ]),
  create: z.union([ z.lazy(() => locationCreateWithoutClient_branchInputSchema),z.lazy(() => locationUncheckedCreateWithoutClient_branchInputSchema) ]),
}).strict();

export const locationUpdateWithWhereUniqueWithoutClient_branchInputSchema: z.ZodType<Prisma.locationUpdateWithWhereUniqueWithoutClient_branchInput> = z.object({
  where: z.lazy(() => locationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => locationUpdateWithoutClient_branchInputSchema),z.lazy(() => locationUncheckedUpdateWithoutClient_branchInputSchema) ]),
}).strict();

export const locationUpdateManyWithWhereWithoutClient_branchInputSchema: z.ZodType<Prisma.locationUpdateManyWithWhereWithoutClient_branchInput> = z.object({
  where: z.lazy(() => locationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => locationUpdateManyMutationInputSchema),z.lazy(() => locationUncheckedUpdateManyWithoutClient_branchInputSchema) ]),
}).strict();

export const locationScalarWhereInputSchema: z.ZodType<Prisma.locationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => locationScalarWhereInputSchema),z.lazy(() => locationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => locationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => locationScalarWhereInputSchema),z.lazy(() => locationScalarWhereInputSchema).array() ]).optional(),
  location_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  location_type: z.union([ z.lazy(() => Enumlocation_location_typeFilterSchema),z.lazy(() => location_location_typeSchema) ]).optional(),
  warehouse_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  client_branch_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const clientCreateWithoutClient_rateInputSchema: z.ZodType<Prisma.clientCreateWithoutClient_rateInput> = z.object({
  client_id: z.coerce.number(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  client: z.lazy(() => clientCreateNestedOneWithoutOther_clientInputSchema).optional(),
  other_client: z.lazy(() => clientCreateNestedManyWithoutClientInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutClientInputSchema).optional()
}).strict();

export const clientUncheckedCreateWithoutClient_rateInputSchema: z.ZodType<Prisma.clientUncheckedCreateWithoutClient_rateInput> = z.object({
  client_id: z.coerce.number(),
  parent_client_id: z.coerce.number().nullable().optional().nullable(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  other_client: z.lazy(() => clientUncheckedCreateNestedManyWithoutClientInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutClientInputSchema).optional()
}).strict();

export const clientCreateOrConnectWithoutClient_rateInputSchema: z.ZodType<Prisma.clientCreateOrConnectWithoutClient_rateInput> = z.object({
  where: z.lazy(() => clientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => clientCreateWithoutClient_rateInputSchema),z.lazy(() => clientUncheckedCreateWithoutClient_rateInputSchema) ]),
}).strict();

export const clientCreateManyClient_rateInputEnvelopeSchema: z.ZodType<Prisma.clientCreateManyClient_rateInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => clientCreateManyClient_rateInputSchema),z.lazy(() => clientCreateManyClient_rateInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const client_branchCreateWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchCreateWithoutClient_rateInput> = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callCreateNestedManyWithoutClient_branchInputSchema).optional(),
  client: z.lazy(() => clientCreateNestedOneWithoutClient_branchInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutClient_branchInputSchema),
  sigungu: z.lazy(() => sigunguCreateNestedOneWithoutClient_branchInputSchema),
  location: z.lazy(() => locationCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchUncheckedCreateWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateWithoutClient_rateInput> = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional(),
  location: z.lazy(() => locationUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchCreateOrConnectWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchCreateOrConnectWithoutClient_rateInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => client_branchCreateWithoutClient_rateInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClient_rateInputSchema) ]),
}).strict();

export const client_branchCreateManyClient_rateInputEnvelopeSchema: z.ZodType<Prisma.client_branchCreateManyClient_rateInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => client_branchCreateManyClient_rateInputSchema),z.lazy(() => client_branchCreateManyClient_rateInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const clientUpsertWithWhereUniqueWithoutClient_rateInputSchema: z.ZodType<Prisma.clientUpsertWithWhereUniqueWithoutClient_rateInput> = z.object({
  where: z.lazy(() => clientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => clientUpdateWithoutClient_rateInputSchema),z.lazy(() => clientUncheckedUpdateWithoutClient_rateInputSchema) ]),
  create: z.union([ z.lazy(() => clientCreateWithoutClient_rateInputSchema),z.lazy(() => clientUncheckedCreateWithoutClient_rateInputSchema) ]),
}).strict();

export const clientUpdateWithWhereUniqueWithoutClient_rateInputSchema: z.ZodType<Prisma.clientUpdateWithWhereUniqueWithoutClient_rateInput> = z.object({
  where: z.lazy(() => clientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => clientUpdateWithoutClient_rateInputSchema),z.lazy(() => clientUncheckedUpdateWithoutClient_rateInputSchema) ]),
}).strict();

export const clientUpdateManyWithWhereWithoutClient_rateInputSchema: z.ZodType<Prisma.clientUpdateManyWithWhereWithoutClient_rateInput> = z.object({
  where: z.lazy(() => clientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => clientUpdateManyMutationInputSchema),z.lazy(() => clientUncheckedUpdateManyWithoutClient_rateInputSchema) ]),
}).strict();

export const client_branchUpsertWithWhereUniqueWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchUpsertWithWhereUniqueWithoutClient_rateInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => client_branchUpdateWithoutClient_rateInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutClient_rateInputSchema) ]),
  create: z.union([ z.lazy(() => client_branchCreateWithoutClient_rateInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutClient_rateInputSchema) ]),
}).strict();

export const client_branchUpdateWithWhereUniqueWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchUpdateWithWhereUniqueWithoutClient_rateInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => client_branchUpdateWithoutClient_rateInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutClient_rateInputSchema) ]),
}).strict();

export const client_branchUpdateManyWithWhereWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchUpdateManyWithWhereWithoutClient_rateInput> = z.object({
  where: z.lazy(() => client_branchScalarWhereInputSchema),
  data: z.union([ z.lazy(() => client_branchUpdateManyMutationInputSchema),z.lazy(() => client_branchUncheckedUpdateManyWithoutClient_rateInputSchema) ]),
}).strict();

export const device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateWithoutConsumable_modelInput> = z.object({
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDevice_consumable_compatibilityInputSchema)
}).strict();

export const device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInput> = z.object({
  device_model_id: z.coerce.number()
}).strict();

export const device_consumable_compatibilityCreateOrConnectWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateOrConnectWithoutConsumable_modelInput> = z.object({
  where: z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema) ]),
}).strict();

export const device_consumable_compatibilityCreateManyConsumable_modelInputEnvelopeSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateManyConsumable_modelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_consumable_compatibilityCreateManyConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateManyConsumable_modelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_consumable_compatibilityUpsertWithWhereUniqueWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpsertWithWhereUniqueWithoutConsumable_modelInput> = z.object({
  where: z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_consumable_compatibilityUpdateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedUpdateWithoutConsumable_modelInputSchema) ]),
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutConsumable_modelInputSchema) ]),
}).strict();

export const device_consumable_compatibilityUpdateWithWhereUniqueWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateWithWhereUniqueWithoutConsumable_modelInput> = z.object({
  where: z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_consumable_compatibilityUpdateWithoutConsumable_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedUpdateWithoutConsumable_modelInputSchema) ]),
}).strict();

export const device_consumable_compatibilityUpdateManyWithWhereWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateManyWithWhereWithoutConsumable_modelInput> = z.object({
  where: z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_consumable_compatibilityUpdateManyMutationInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedUpdateManyWithoutConsumable_modelInputSchema) ]),
}).strict();

export const device_consumable_compatibilityScalarWhereInputSchema: z.ZodType<Prisma.device_consumable_compatibilityScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema),z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema),z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  consumable_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const callCreateWithoutDeptInputSchema: z.ZodType<Prisma.callCreateWithoutDeptInput> = z.object({
  call_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  transferred_at: z.coerce.date().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  call_type: z.lazy(() => call_typeCreateNestedOneWithoutCallInputSchema),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutCallInputSchema),
  device: z.lazy(() => deviceCreateNestedOneWithoutCallInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_receiver_idTouserInputSchema),
  user_call_assigner_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_assigner_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callUncheckedCreateWithoutDeptInputSchema: z.ZodType<Prisma.callUncheckedCreateWithoutDeptInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callCreateOrConnectWithoutDeptInputSchema: z.ZodType<Prisma.callCreateOrConnectWithoutDeptInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => callCreateWithoutDeptInputSchema),z.lazy(() => callUncheckedCreateWithoutDeptInputSchema) ]),
}).strict();

export const callCreateManyDeptInputEnvelopeSchema: z.ZodType<Prisma.callCreateManyDeptInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => callCreateManyDeptInputSchema),z.lazy(() => callCreateManyDeptInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const client_branchCreateWithoutDeptInputSchema: z.ZodType<Prisma.client_branchCreateWithoutDeptInput> = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callCreateNestedManyWithoutClient_branchInputSchema).optional(),
  client: z.lazy(() => clientCreateNestedOneWithoutClient_branchInputSchema),
  client_rate: z.lazy(() => client_rateCreateNestedOneWithoutClient_branchInputSchema),
  sigungu: z.lazy(() => sigunguCreateNestedOneWithoutClient_branchInputSchema),
  location: z.lazy(() => locationCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchUncheckedCreateWithoutDeptInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateWithoutDeptInput> = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional(),
  location: z.lazy(() => locationUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchCreateOrConnectWithoutDeptInputSchema: z.ZodType<Prisma.client_branchCreateOrConnectWithoutDeptInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => client_branchCreateWithoutDeptInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutDeptInputSchema) ]),
}).strict();

export const client_branchCreateManyDeptInputEnvelopeSchema: z.ZodType<Prisma.client_branchCreateManyDeptInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => client_branchCreateManyDeptInputSchema),z.lazy(() => client_branchCreateManyDeptInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const deptCreateWithoutOther_deptInputSchema: z.ZodType<Prisma.deptCreateWithoutOther_deptInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutDeptInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutOther_deptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptUncheckedCreateWithoutOther_deptInputSchema: z.ZodType<Prisma.deptUncheckedCreateWithoutOther_deptInput> = z.object({
  dept_id: z.coerce.number(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptCreateOrConnectWithoutOther_deptInputSchema: z.ZodType<Prisma.deptCreateOrConnectWithoutOther_deptInput> = z.object({
  where: z.lazy(() => deptWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deptCreateWithoutOther_deptInputSchema),z.lazy(() => deptUncheckedCreateWithoutOther_deptInputSchema) ]),
}).strict();

export const deptCreateWithoutDeptInputSchema: z.ZodType<Prisma.deptCreateWithoutDeptInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutDeptInputSchema).optional(),
  other_dept: z.lazy(() => deptCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptUncheckedCreateWithoutDeptInputSchema: z.ZodType<Prisma.deptUncheckedCreateWithoutDeptInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptCreateOrConnectWithoutDeptInputSchema: z.ZodType<Prisma.deptCreateOrConnectWithoutDeptInput> = z.object({
  where: z.lazy(() => deptWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deptCreateWithoutDeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDeptInputSchema) ]),
}).strict();

export const deptCreateManyDeptInputEnvelopeSchema: z.ZodType<Prisma.deptCreateManyDeptInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => deptCreateManyDeptInputSchema),z.lazy(() => deptCreateManyDeptInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceCreateWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema) ]),
}).strict();

export const deviceCreateManyDept_device_owner_dept_idTodeptInputEnvelopeSchema: z.ZodType<Prisma.deviceCreateManyDept_device_owner_dept_idTodeptInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => deviceCreateManyDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceCreateManyDept_device_owner_dept_idTodeptInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceCreateWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema) ]),
}).strict();

export const deviceCreateManyDept_device_mgmt_dept_idTodeptInputEnvelopeSchema: z.ZodType<Prisma.deviceCreateManyDept_device_mgmt_dept_idTodeptInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => deviceCreateManyDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceCreateManyDept_device_mgmt_dept_idTodeptInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const userCreateWithoutDeptInputSchema: z.ZodType<Prisma.userCreateWithoutDeptInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutDeptInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutDeptInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutDeptInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutDeptInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutDeptInputSchema),z.lazy(() => userUncheckedCreateWithoutDeptInputSchema) ]),
}).strict();

export const userCreateManyDeptInputEnvelopeSchema: z.ZodType<Prisma.userCreateManyDeptInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => userCreateManyDeptInputSchema),z.lazy(() => userCreateManyDeptInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const warehouseCreateWithoutDeptInputSchema: z.ZodType<Prisma.warehouseCreateWithoutDeptInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutWarehouseInputSchema).optional(),
  location: z.lazy(() => locationCreateNestedManyWithoutWarehouseInputSchema).optional()
}).strict();

export const warehouseUncheckedCreateWithoutDeptInputSchema: z.ZodType<Prisma.warehouseUncheckedCreateWithoutDeptInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutWarehouseInputSchema).optional(),
  location: z.lazy(() => locationUncheckedCreateNestedManyWithoutWarehouseInputSchema).optional()
}).strict();

export const warehouseCreateOrConnectWithoutDeptInputSchema: z.ZodType<Prisma.warehouseCreateOrConnectWithoutDeptInput> = z.object({
  where: z.lazy(() => warehouseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => warehouseCreateWithoutDeptInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutDeptInputSchema) ]),
}).strict();

export const warehouseCreateManyDeptInputEnvelopeSchema: z.ZodType<Prisma.warehouseCreateManyDeptInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => warehouseCreateManyDeptInputSchema),z.lazy(() => warehouseCreateManyDeptInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const callUpsertWithWhereUniqueWithoutDeptInputSchema: z.ZodType<Prisma.callUpsertWithWhereUniqueWithoutDeptInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => callUpdateWithoutDeptInputSchema),z.lazy(() => callUncheckedUpdateWithoutDeptInputSchema) ]),
  create: z.union([ z.lazy(() => callCreateWithoutDeptInputSchema),z.lazy(() => callUncheckedCreateWithoutDeptInputSchema) ]),
}).strict();

export const callUpdateWithWhereUniqueWithoutDeptInputSchema: z.ZodType<Prisma.callUpdateWithWhereUniqueWithoutDeptInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => callUpdateWithoutDeptInputSchema),z.lazy(() => callUncheckedUpdateWithoutDeptInputSchema) ]),
}).strict();

export const callUpdateManyWithWhereWithoutDeptInputSchema: z.ZodType<Prisma.callUpdateManyWithWhereWithoutDeptInput> = z.object({
  where: z.lazy(() => callScalarWhereInputSchema),
  data: z.union([ z.lazy(() => callUpdateManyMutationInputSchema),z.lazy(() => callUncheckedUpdateManyWithoutDeptInputSchema) ]),
}).strict();

export const client_branchUpsertWithWhereUniqueWithoutDeptInputSchema: z.ZodType<Prisma.client_branchUpsertWithWhereUniqueWithoutDeptInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => client_branchUpdateWithoutDeptInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutDeptInputSchema) ]),
  create: z.union([ z.lazy(() => client_branchCreateWithoutDeptInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutDeptInputSchema) ]),
}).strict();

export const client_branchUpdateWithWhereUniqueWithoutDeptInputSchema: z.ZodType<Prisma.client_branchUpdateWithWhereUniqueWithoutDeptInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => client_branchUpdateWithoutDeptInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutDeptInputSchema) ]),
}).strict();

export const client_branchUpdateManyWithWhereWithoutDeptInputSchema: z.ZodType<Prisma.client_branchUpdateManyWithWhereWithoutDeptInput> = z.object({
  where: z.lazy(() => client_branchScalarWhereInputSchema),
  data: z.union([ z.lazy(() => client_branchUpdateManyMutationInputSchema),z.lazy(() => client_branchUncheckedUpdateManyWithoutDeptInputSchema) ]),
}).strict();

export const deptUpsertWithoutOther_deptInputSchema: z.ZodType<Prisma.deptUpsertWithoutOther_deptInput> = z.object({
  update: z.union([ z.lazy(() => deptUpdateWithoutOther_deptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutOther_deptInputSchema) ]),
  create: z.union([ z.lazy(() => deptCreateWithoutOther_deptInputSchema),z.lazy(() => deptUncheckedCreateWithoutOther_deptInputSchema) ]),
  where: z.lazy(() => deptWhereInputSchema).optional()
}).strict();

export const deptUpdateToOneWithWhereWithoutOther_deptInputSchema: z.ZodType<Prisma.deptUpdateToOneWithWhereWithoutOther_deptInput> = z.object({
  where: z.lazy(() => deptWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deptUpdateWithoutOther_deptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutOther_deptInputSchema) ]),
}).strict();

export const deptUpdateWithoutOther_deptInputSchema: z.ZodType<Prisma.deptUpdateWithoutOther_deptInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutDeptNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutOther_deptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUncheckedUpdateWithoutOther_deptInputSchema: z.ZodType<Prisma.deptUncheckedUpdateWithoutOther_deptInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUpsertWithWhereUniqueWithoutDeptInputSchema: z.ZodType<Prisma.deptUpsertWithWhereUniqueWithoutDeptInput> = z.object({
  where: z.lazy(() => deptWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => deptUpdateWithoutDeptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutDeptInputSchema) ]),
  create: z.union([ z.lazy(() => deptCreateWithoutDeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDeptInputSchema) ]),
}).strict();

export const deptUpdateWithWhereUniqueWithoutDeptInputSchema: z.ZodType<Prisma.deptUpdateWithWhereUniqueWithoutDeptInput> = z.object({
  where: z.lazy(() => deptWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => deptUpdateWithoutDeptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutDeptInputSchema) ]),
}).strict();

export const deptUpdateManyWithWhereWithoutDeptInputSchema: z.ZodType<Prisma.deptUpdateManyWithWhereWithoutDeptInput> = z.object({
  where: z.lazy(() => deptScalarWhereInputSchema),
  data: z.union([ z.lazy(() => deptUpdateManyMutationInputSchema),z.lazy(() => deptUncheckedUpdateManyWithoutDeptInputSchema) ]),
}).strict();

export const deptScalarWhereInputSchema: z.ZodType<Prisma.deptScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => deptScalarWhereInputSchema),z.lazy(() => deptScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => deptScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deptScalarWhereInputSchema),z.lazy(() => deptScalarWhereInputSchema).array() ]).optional(),
  dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  parent_dept_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  dept_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const deviceUpsertWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUpsertWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => deviceUpdateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDept_device_owner_dept_idTodeptInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_owner_dept_idTodeptInputSchema) ]),
}).strict();

export const deviceUpdateWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUpdateWithWhereUniqueWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateWithoutDept_device_owner_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDept_device_owner_dept_idTodeptInputSchema) ]),
}).strict();

export const deviceUpdateManyWithWhereWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUpdateManyWithWhereWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deviceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateManyMutationInputSchema),z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptInputSchema) ]),
}).strict();

export const deviceScalarWhereInputSchema: z.ZodType<Prisma.deviceScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => deviceScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => deviceScalarWhereInputSchema),z.lazy(() => deviceScalarWhereInputSchema).array() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  owner_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  regi_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  mac: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  last_inspection_log_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  last_location_log_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  status_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const deviceUpsertWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUpsertWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => deviceUpdateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDept_device_mgmt_dept_idTodeptInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDept_device_mgmt_dept_idTodeptInputSchema) ]),
}).strict();

export const deviceUpdateWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUpdateWithWhereUniqueWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateWithoutDept_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDept_device_mgmt_dept_idTodeptInputSchema) ]),
}).strict();

export const deviceUpdateManyWithWhereWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUpdateManyWithWhereWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deviceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateManyMutationInputSchema),z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptInputSchema) ]),
}).strict();

export const userUpsertWithWhereUniqueWithoutDeptInputSchema: z.ZodType<Prisma.userUpsertWithWhereUniqueWithoutDeptInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => userUpdateWithoutDeptInputSchema),z.lazy(() => userUncheckedUpdateWithoutDeptInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutDeptInputSchema),z.lazy(() => userUncheckedCreateWithoutDeptInputSchema) ]),
}).strict();

export const userUpdateWithWhereUniqueWithoutDeptInputSchema: z.ZodType<Prisma.userUpdateWithWhereUniqueWithoutDeptInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => userUpdateWithoutDeptInputSchema),z.lazy(() => userUncheckedUpdateWithoutDeptInputSchema) ]),
}).strict();

export const userUpdateManyWithWhereWithoutDeptInputSchema: z.ZodType<Prisma.userUpdateManyWithWhereWithoutDeptInput> = z.object({
  where: z.lazy(() => userScalarWhereInputSchema),
  data: z.union([ z.lazy(() => userUpdateManyMutationInputSchema),z.lazy(() => userUncheckedUpdateManyWithoutDeptInputSchema) ]),
}).strict();

export const warehouseUpsertWithWhereUniqueWithoutDeptInputSchema: z.ZodType<Prisma.warehouseUpsertWithWhereUniqueWithoutDeptInput> = z.object({
  where: z.lazy(() => warehouseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => warehouseUpdateWithoutDeptInputSchema),z.lazy(() => warehouseUncheckedUpdateWithoutDeptInputSchema) ]),
  create: z.union([ z.lazy(() => warehouseCreateWithoutDeptInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutDeptInputSchema) ]),
}).strict();

export const warehouseUpdateWithWhereUniqueWithoutDeptInputSchema: z.ZodType<Prisma.warehouseUpdateWithWhereUniqueWithoutDeptInput> = z.object({
  where: z.lazy(() => warehouseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => warehouseUpdateWithoutDeptInputSchema),z.lazy(() => warehouseUncheckedUpdateWithoutDeptInputSchema) ]),
}).strict();

export const warehouseUpdateManyWithWhereWithoutDeptInputSchema: z.ZodType<Prisma.warehouseUpdateManyWithWhereWithoutDeptInput> = z.object({
  where: z.lazy(() => warehouseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => warehouseUpdateManyMutationInputSchema),z.lazy(() => warehouseUncheckedUpdateManyWithoutDeptInputSchema) ]),
}).strict();

export const warehouseScalarWhereInputSchema: z.ZodType<Prisma.warehouseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => warehouseScalarWhereInputSchema),z.lazy(() => warehouseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => warehouseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => warehouseScalarWhereInputSchema),z.lazy(() => warehouseScalarWhereInputSchema).array() ]).optional(),
  warehouse_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  warehouse_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mgmt_dept_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const callCreateWithoutDeviceInputSchema: z.ZodType<Prisma.callCreateWithoutDeviceInput> = z.object({
  call_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  transferred_at: z.coerce.date().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  call_type: z.lazy(() => call_typeCreateNestedOneWithoutCallInputSchema),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutCallInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutCallInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_receiver_idTouserInputSchema),
  user_call_assigner_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_assigner_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callUncheckedCreateWithoutDeviceInputSchema: z.ZodType<Prisma.callUncheckedCreateWithoutDeviceInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callCreateOrConnectWithoutDeviceInputSchema: z.ZodType<Prisma.callCreateOrConnectWithoutDeviceInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => callCreateWithoutDeviceInputSchema),z.lazy(() => callUncheckedCreateWithoutDeviceInputSchema) ]),
}).strict();

export const callCreateManyDeviceInputEnvelopeSchema: z.ZodType<Prisma.callCreateManyDeviceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => callCreateManyDeviceInputSchema),z.lazy(() => callCreateManyDeviceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const deptCreateWithoutDevice_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deptCreateWithoutDevice_device_owner_dept_idTodeptInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutDeptInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutOther_deptInputSchema).optional(),
  other_dept: z.lazy(() => deptCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptUncheckedCreateWithoutDevice_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deptUncheckedCreateWithoutDevice_device_owner_dept_idTodeptInput> = z.object({
  dept_id: z.coerce.number(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptCreateOrConnectWithoutDevice_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deptCreateOrConnectWithoutDevice_device_owner_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deptWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deptCreateWithoutDevice_device_owner_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDevice_device_owner_dept_idTodeptInputSchema) ]),
}).strict();

export const deptCreateWithoutDevice_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deptCreateWithoutDevice_device_mgmt_dept_idTodeptInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutDeptInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutOther_deptInputSchema).optional(),
  other_dept: z.lazy(() => deptCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptUncheckedCreateWithoutDevice_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deptUncheckedCreateWithoutDevice_device_mgmt_dept_idTodeptInput> = z.object({
  dept_id: z.coerce.number(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptCreateOrConnectWithoutDevice_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deptCreateOrConnectWithoutDevice_device_mgmt_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deptWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deptCreateWithoutDevice_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDevice_device_mgmt_dept_idTodeptInputSchema) ]),
}).strict();

export const device_statusCreateWithoutDeviceInputSchema: z.ZodType<Prisma.device_statusCreateWithoutDeviceInput> = z.object({
  status_id: z.coerce.number(),
  status_name: z.string().max(45)
}).strict();

export const device_statusUncheckedCreateWithoutDeviceInputSchema: z.ZodType<Prisma.device_statusUncheckedCreateWithoutDeviceInput> = z.object({
  status_id: z.coerce.number(),
  status_name: z.string().max(45)
}).strict();

export const device_statusCreateOrConnectWithoutDeviceInputSchema: z.ZodType<Prisma.device_statusCreateOrConnectWithoutDeviceInput> = z.object({
  where: z.lazy(() => device_statusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_statusCreateWithoutDeviceInputSchema),z.lazy(() => device_statusUncheckedCreateWithoutDeviceInputSchema) ]),
}).strict();

export const device_location_logCreateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.device_location_logCreateWithoutDevice_device_last_location_log_idTodevice_location_logInput> = z.object({
  device_location_log_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_detail: z.string().max(200).nullable().optional().nullable(),
  device_device_location_log_device_idTodevice: z.lazy(() => deviceCreateNestedOneWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema),
  location: z.lazy(() => locationCreateNestedOneWithoutDevice_location_logInputSchema)
}).strict();

export const device_location_logUncheckedCreateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.device_location_logUncheckedCreateWithoutDevice_device_last_location_log_idTodevice_location_logInput> = z.object({
  device_location_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_id: z.coerce.number(),
  location_detail: z.string().max(200).nullable().optional().nullable()
}).strict();

export const device_location_logCreateOrConnectWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.device_location_logCreateOrConnectWithoutDevice_device_last_location_log_idTodevice_location_logInput> = z.object({
  where: z.lazy(() => device_location_logWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_location_logCreateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema) ]),
}).strict();

export const device_inspection_logCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.device_inspection_logCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceCreateNestedOneWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),
  user: z.lazy(() => userCreateNestedOneWithoutDevice_inspection_logInputSchema),
  call: z.lazy(() => callCreateNestedOneWithoutDevice_inspection_logInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  inspector_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  call_id: z.coerce.number().nullable().optional().nullable(),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logCreateOrConnectWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.device_inspection_logCreateOrConnectWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]),
}).strict();

export const device_modelCreateWithoutDeviceInputSchema: z.ZodType<Prisma.device_modelCreateWithoutDeviceInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_driver: z.lazy(() => device_driverCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityCreateNestedManyWithoutDevice_modelInputSchema).optional()
}).strict();

export const device_modelUncheckedCreateWithoutDeviceInputSchema: z.ZodType<Prisma.device_modelUncheckedCreateWithoutDeviceInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional()
}).strict();

export const device_modelCreateOrConnectWithoutDeviceInputSchema: z.ZodType<Prisma.device_modelCreateOrConnectWithoutDeviceInput> = z.object({
  where: z.lazy(() => device_modelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_modelCreateWithoutDeviceInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDeviceInputSchema) ]),
}).strict();

export const device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  user: z.lazy(() => userCreateNestedOneWithoutDevice_inspection_logInputSchema),
  call: z.lazy(() => callCreateNestedOneWithoutDevice_inspection_logInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  inspector_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  call_id: z.coerce.number().nullable().optional().nullable(),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logCreateOrConnectWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logCreateOrConnectWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema) ]),
}).strict();

export const device_inspection_logCreateManyDevice_device_inspection_log_device_idTodeviceInputEnvelopeSchema: z.ZodType<Prisma.device_inspection_logCreateManyDevice_device_inspection_log_device_idTodeviceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_inspection_logCreateManyDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logCreateManyDevice_device_inspection_log_device_idTodeviceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_install_infoCreateWithoutDeviceInputSchema: z.ZodType<Prisma.device_install_infoCreateWithoutDeviceInput> = z.object({
  mgmt_num: z.string().max(50),
  ip_address: z.string().max(50).nullable().optional().nullable(),
  subnet_mask: z.string().max(50).nullable().optional().nullable(),
  gateway: z.string().max(50).nullable().optional().nullable(),
  dns1: z.string().max(50).nullable().optional().nullable(),
  dns2: z.string().max(50).nullable().optional().nullable(),
  user: z.lazy(() => userCreateNestedOneWithoutDevice_install_infoInputSchema)
}).strict();

export const device_install_infoUncheckedCreateWithoutDeviceInputSchema: z.ZodType<Prisma.device_install_infoUncheckedCreateWithoutDeviceInput> = z.object({
  installer_id: z.coerce.number(),
  mgmt_num: z.string().max(50),
  ip_address: z.string().max(50).nullable().optional().nullable(),
  subnet_mask: z.string().max(50).nullable().optional().nullable(),
  gateway: z.string().max(50).nullable().optional().nullable(),
  dns1: z.string().max(50).nullable().optional().nullable(),
  dns2: z.string().max(50).nullable().optional().nullable()
}).strict();

export const device_install_infoCreateOrConnectWithoutDeviceInputSchema: z.ZodType<Prisma.device_install_infoCreateOrConnectWithoutDeviceInput> = z.object({
  where: z.lazy(() => device_install_infoWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutDeviceInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutDeviceInputSchema) ]),
}).strict();

export const device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  device_location_log_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_detail: z.string().max(200).nullable().optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceCreateNestedManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  location: z.lazy(() => locationCreateNestedOneWithoutDevice_location_logInputSchema)
}).strict();

export const device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  device_location_log_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_id: z.coerce.number(),
  location_detail: z.string().max(200).nullable().optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).optional()
}).strict();

export const device_location_logCreateOrConnectWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logCreateOrConnectWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => device_location_logWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema) ]),
}).strict();

export const device_location_logCreateManyDevice_device_location_log_device_idTodeviceInputEnvelopeSchema: z.ZodType<Prisma.device_location_logCreateManyDevice_device_location_log_device_idTodeviceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_location_logCreateManyDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logCreateManyDevice_device_location_log_device_idTodeviceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_optionCreateWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionCreateWithoutDeviceInput> = z.object({
  device_option_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  option_model: z.lazy(() => option_modelCreateNestedOneWithoutDevice_optionInputSchema),
  warehouse: z.lazy(() => warehouseCreateNestedOneWithoutDevice_optionInputSchema).optional()
}).strict();

export const device_optionUncheckedCreateWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionUncheckedCreateWithoutDeviceInput> = z.object({
  device_option_id: z.coerce.number(),
  option_model_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  location_warehouse_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_optionCreateOrConnectWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionCreateOrConnectWithoutDeviceInput> = z.object({
  where: z.lazy(() => device_optionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_optionCreateWithoutDeviceInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutDeviceInputSchema) ]),
}).strict();

export const device_optionCreateManyDeviceInputEnvelopeSchema: z.ZodType<Prisma.device_optionCreateManyDeviceInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_optionCreateManyDeviceInputSchema),z.lazy(() => device_optionCreateManyDeviceInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const callUpsertWithWhereUniqueWithoutDeviceInputSchema: z.ZodType<Prisma.callUpsertWithWhereUniqueWithoutDeviceInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => callUpdateWithoutDeviceInputSchema),z.lazy(() => callUncheckedUpdateWithoutDeviceInputSchema) ]),
  create: z.union([ z.lazy(() => callCreateWithoutDeviceInputSchema),z.lazy(() => callUncheckedCreateWithoutDeviceInputSchema) ]),
}).strict();

export const callUpdateWithWhereUniqueWithoutDeviceInputSchema: z.ZodType<Prisma.callUpdateWithWhereUniqueWithoutDeviceInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => callUpdateWithoutDeviceInputSchema),z.lazy(() => callUncheckedUpdateWithoutDeviceInputSchema) ]),
}).strict();

export const callUpdateManyWithWhereWithoutDeviceInputSchema: z.ZodType<Prisma.callUpdateManyWithWhereWithoutDeviceInput> = z.object({
  where: z.lazy(() => callScalarWhereInputSchema),
  data: z.union([ z.lazy(() => callUpdateManyMutationInputSchema),z.lazy(() => callUncheckedUpdateManyWithoutDeviceInputSchema) ]),
}).strict();

export const deptUpsertWithoutDevice_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deptUpsertWithoutDevice_device_owner_dept_idTodeptInput> = z.object({
  update: z.union([ z.lazy(() => deptUpdateWithoutDevice_device_owner_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutDevice_device_owner_dept_idTodeptInputSchema) ]),
  create: z.union([ z.lazy(() => deptCreateWithoutDevice_device_owner_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDevice_device_owner_dept_idTodeptInputSchema) ]),
  where: z.lazy(() => deptWhereInputSchema).optional()
}).strict();

export const deptUpdateToOneWithWhereWithoutDevice_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deptUpdateToOneWithWhereWithoutDevice_device_owner_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deptWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deptUpdateWithoutDevice_device_owner_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutDevice_device_owner_dept_idTodeptInputSchema) ]),
}).strict();

export const deptUpdateWithoutDevice_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deptUpdateWithoutDevice_device_owner_dept_idTodeptInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutDeptNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutOther_deptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUncheckedUpdateWithoutDevice_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deptUncheckedUpdateWithoutDevice_device_owner_dept_idTodeptInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUpsertWithoutDevice_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deptUpsertWithoutDevice_device_mgmt_dept_idTodeptInput> = z.object({
  update: z.union([ z.lazy(() => deptUpdateWithoutDevice_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutDevice_device_mgmt_dept_idTodeptInputSchema) ]),
  create: z.union([ z.lazy(() => deptCreateWithoutDevice_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedCreateWithoutDevice_device_mgmt_dept_idTodeptInputSchema) ]),
  where: z.lazy(() => deptWhereInputSchema).optional()
}).strict();

export const deptUpdateToOneWithWhereWithoutDevice_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deptUpdateToOneWithWhereWithoutDevice_device_mgmt_dept_idTodeptInput> = z.object({
  where: z.lazy(() => deptWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deptUpdateWithoutDevice_device_mgmt_dept_idTodeptInputSchema),z.lazy(() => deptUncheckedUpdateWithoutDevice_device_mgmt_dept_idTodeptInputSchema) ]),
}).strict();

export const deptUpdateWithoutDevice_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deptUpdateWithoutDevice_device_mgmt_dept_idTodeptInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutDeptNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutOther_deptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUncheckedUpdateWithoutDevice_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deptUncheckedUpdateWithoutDevice_device_mgmt_dept_idTodeptInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const device_statusUpsertWithoutDeviceInputSchema: z.ZodType<Prisma.device_statusUpsertWithoutDeviceInput> = z.object({
  update: z.union([ z.lazy(() => device_statusUpdateWithoutDeviceInputSchema),z.lazy(() => device_statusUncheckedUpdateWithoutDeviceInputSchema) ]),
  create: z.union([ z.lazy(() => device_statusCreateWithoutDeviceInputSchema),z.lazy(() => device_statusUncheckedCreateWithoutDeviceInputSchema) ]),
  where: z.lazy(() => device_statusWhereInputSchema).optional()
}).strict();

export const device_statusUpdateToOneWithWhereWithoutDeviceInputSchema: z.ZodType<Prisma.device_statusUpdateToOneWithWhereWithoutDeviceInput> = z.object({
  where: z.lazy(() => device_statusWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_statusUpdateWithoutDeviceInputSchema),z.lazy(() => device_statusUncheckedUpdateWithoutDeviceInputSchema) ]),
}).strict();

export const device_statusUpdateWithoutDeviceInputSchema: z.ZodType<Prisma.device_statusUpdateWithoutDeviceInput> = z.object({
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_statusUncheckedUpdateWithoutDeviceInputSchema: z.ZodType<Prisma.device_statusUncheckedUpdateWithoutDeviceInput> = z.object({
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_location_logUpsertWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.device_location_logUpsertWithoutDevice_device_last_location_log_idTodevice_location_logInput> = z.object({
  update: z.union([ z.lazy(() => device_location_logUpdateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => device_location_logUncheckedUpdateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema) ]),
  create: z.union([ z.lazy(() => device_location_logCreateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema) ]),
  where: z.lazy(() => device_location_logWhereInputSchema).optional()
}).strict();

export const device_location_logUpdateToOneWithWhereWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.device_location_logUpdateToOneWithWhereWithoutDevice_device_last_location_log_idTodevice_location_logInput> = z.object({
  where: z.lazy(() => device_location_logWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_location_logUpdateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => device_location_logUncheckedUpdateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema) ]),
}).strict();

export const device_location_logUpdateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.device_location_logUpdateWithoutDevice_device_last_location_log_idTodevice_location_logInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_location_log_device_idTodevice: z.lazy(() => deviceUpdateOneRequiredWithoutDevice_location_log_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateOneRequiredWithoutDevice_location_logNestedInputSchema).optional()
}).strict();

export const device_location_logUncheckedUpdateWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.device_location_logUncheckedUpdateWithoutDevice_device_last_location_log_idTodevice_location_logInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_inspection_logUpsertWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.device_inspection_logUpsertWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]),
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]),
  where: z.lazy(() => device_inspection_logWhereInputSchema).optional()
}).strict();

export const device_inspection_logUpdateToOneWithWhereWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.device_inspection_logUpdateToOneWithWhereWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_inspection_logUpdateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]),
}).strict();

export const device_inspection_logUpdateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.device_inspection_logUpdateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceUpdateOneRequiredWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutDevice_inspection_logNestedInputSchema).optional(),
  call: z.lazy(() => callUpdateOneWithoutDevice_inspection_logNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedUpdateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspector_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_modelUpsertWithoutDeviceInputSchema: z.ZodType<Prisma.device_modelUpsertWithoutDeviceInput> = z.object({
  update: z.union([ z.lazy(() => device_modelUpdateWithoutDeviceInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDeviceInputSchema) ]),
  create: z.union([ z.lazy(() => device_modelCreateWithoutDeviceInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDeviceInputSchema) ]),
  where: z.lazy(() => device_modelWhereInputSchema).optional()
}).strict();

export const device_modelUpdateToOneWithWhereWithoutDeviceInputSchema: z.ZodType<Prisma.device_modelUpdateToOneWithWhereWithoutDeviceInput> = z.object({
  where: z.lazy(() => device_modelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_modelUpdateWithoutDeviceInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDeviceInputSchema) ]),
}).strict();

export const device_modelUpdateWithoutDeviceInputSchema: z.ZodType<Prisma.device_modelUpdateWithoutDeviceInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUpdateManyWithoutDevice_modelNestedInputSchema).optional()
}).strict();

export const device_modelUncheckedUpdateWithoutDeviceInputSchema: z.ZodType<Prisma.device_modelUncheckedUpdateWithoutDeviceInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional()
}).strict();

export const device_inspection_logUpsertWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logUpsertWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema) ]),
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema) ]),
}).strict();

export const device_inspection_logUpdateWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logUpdateWithWhereUniqueWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_inspection_logUpdateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema) ]),
}).strict();

export const device_inspection_logUpdateManyWithWhereWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logUpdateManyWithWhereWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => device_inspection_logScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_inspection_logUpdateManyMutationInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema) ]),
}).strict();

export const device_install_infoUpsertWithoutDeviceInputSchema: z.ZodType<Prisma.device_install_infoUpsertWithoutDeviceInput> = z.object({
  update: z.union([ z.lazy(() => device_install_infoUpdateWithoutDeviceInputSchema),z.lazy(() => device_install_infoUncheckedUpdateWithoutDeviceInputSchema) ]),
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutDeviceInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutDeviceInputSchema) ]),
  where: z.lazy(() => device_install_infoWhereInputSchema).optional()
}).strict();

export const device_install_infoUpdateToOneWithWhereWithoutDeviceInputSchema: z.ZodType<Prisma.device_install_infoUpdateToOneWithWhereWithoutDeviceInput> = z.object({
  where: z.lazy(() => device_install_infoWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_install_infoUpdateWithoutDeviceInputSchema),z.lazy(() => device_install_infoUncheckedUpdateWithoutDeviceInputSchema) ]),
}).strict();

export const device_install_infoUpdateWithoutDeviceInputSchema: z.ZodType<Prisma.device_install_infoUpdateWithoutDeviceInput> = z.object({
  mgmt_num: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ip_address: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subnet_mask: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gateway: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns1: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns2: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => userUpdateOneRequiredWithoutDevice_install_infoNestedInputSchema).optional()
}).strict();

export const device_install_infoUncheckedUpdateWithoutDeviceInputSchema: z.ZodType<Prisma.device_install_infoUncheckedUpdateWithoutDeviceInput> = z.object({
  installer_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_num: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ip_address: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subnet_mask: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gateway: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns1: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns2: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_location_logUpsertWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logUpsertWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => device_location_logWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_location_logUpdateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUncheckedUpdateWithoutDevice_device_location_log_device_idTodeviceInputSchema) ]),
  create: z.union([ z.lazy(() => device_location_logCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutDevice_device_location_log_device_idTodeviceInputSchema) ]),
}).strict();

export const device_location_logUpdateWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logUpdateWithWhereUniqueWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => device_location_logWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_location_logUpdateWithoutDevice_device_location_log_device_idTodeviceInputSchema),z.lazy(() => device_location_logUncheckedUpdateWithoutDevice_device_location_log_device_idTodeviceInputSchema) ]),
}).strict();

export const device_location_logUpdateManyWithWhereWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logUpdateManyWithWhereWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => device_location_logScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_location_logUpdateManyMutationInputSchema),z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceInputSchema) ]),
}).strict();

export const device_location_logScalarWhereInputSchema: z.ZodType<Prisma.device_location_logScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_location_logScalarWhereInputSchema),z.lazy(() => device_location_logScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_location_logScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_location_logScalarWhereInputSchema),z.lazy(() => device_location_logScalarWhereInputSchema).array() ]).optional(),
  device_location_log_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  location_date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  location_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  location_detail: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const device_optionUpsertWithWhereUniqueWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionUpsertWithWhereUniqueWithoutDeviceInput> = z.object({
  where: z.lazy(() => device_optionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_optionUpdateWithoutDeviceInputSchema),z.lazy(() => device_optionUncheckedUpdateWithoutDeviceInputSchema) ]),
  create: z.union([ z.lazy(() => device_optionCreateWithoutDeviceInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutDeviceInputSchema) ]),
}).strict();

export const device_optionUpdateWithWhereUniqueWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionUpdateWithWhereUniqueWithoutDeviceInput> = z.object({
  where: z.lazy(() => device_optionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_optionUpdateWithoutDeviceInputSchema),z.lazy(() => device_optionUncheckedUpdateWithoutDeviceInputSchema) ]),
}).strict();

export const device_optionUpdateManyWithWhereWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionUpdateManyWithWhereWithoutDeviceInput> = z.object({
  where: z.lazy(() => device_optionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_optionUpdateManyMutationInputSchema),z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceInputSchema) ]),
}).strict();

export const device_optionScalarWhereInputSchema: z.ZodType<Prisma.device_optionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_optionScalarWhereInputSchema),z.lazy(() => device_optionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_optionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_optionScalarWhereInputSchema),z.lazy(() => device_optionScalarWhereInputSchema).array() ]).optional(),
  device_option_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  option_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  serial: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_active: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  location_type: z.union([ z.lazy(() => Enumdevice_option_location_typeFilterSchema),z.lazy(() => device_option_location_typeSchema) ]).optional(),
  location_warehouse_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  location_device_id: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const approval_roleCreateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.approval_roleCreateWithoutDevice_approvalInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutOther_approval_roleInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleUncheckedCreateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.approval_roleUncheckedCreateWithoutDevice_approvalInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  upper_role_id: z.coerce.number().nullable().optional().nullable(),
  other_approval_role: z.lazy(() => approval_roleUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleCreateOrConnectWithoutDevice_approvalInputSchema: z.ZodType<Prisma.approval_roleCreateOrConnectWithoutDevice_approvalInput> = z.object({
  where: z.lazy(() => approval_roleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutDevice_approvalInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutDevice_approvalInputSchema) ]),
}).strict();

export const device_approvalCreateWithoutOther_device_approvalInputSchema: z.ZodType<Prisma.device_approvalCreateWithoutOther_device_approvalInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutDevice_approvalInputSchema),
  device_approval: z.lazy(() => device_approvalCreateNestedOneWithoutOther_device_approvalInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeCreateNestedOneWithoutDevice_approvalInputSchema),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_requester_idTouserInputSchema),
  user_device_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional()
}).strict();

export const device_approvalUncheckedCreateWithoutOther_device_approvalInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateWithoutOther_device_approvalInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_approvalCreateOrConnectWithoutOther_device_approvalInputSchema: z.ZodType<Prisma.device_approvalCreateOrConnectWithoutOther_device_approvalInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutOther_device_approvalInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutOther_device_approvalInputSchema) ]),
}).strict();

export const device_approvalCreateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalCreateWithoutDevice_approvalInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutDevice_approvalInputSchema),
  other_device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutDevice_approvalInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeCreateNestedOneWithoutDevice_approvalInputSchema),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_requester_idTouserInputSchema),
  user_device_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional()
}).strict();

export const device_approvalUncheckedCreateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateWithoutDevice_approvalInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutDevice_approvalInputSchema).optional()
}).strict();

export const device_approvalCreateOrConnectWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalCreateOrConnectWithoutDevice_approvalInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approvalInputSchema) ]),
}).strict();

export const device_approvalCreateManyDevice_approvalInputEnvelopeSchema: z.ZodType<Prisma.device_approvalCreateManyDevice_approvalInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_approvalCreateManyDevice_approvalInputSchema),z.lazy(() => device_approvalCreateManyDevice_approvalInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_approval_typeCreateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approval_typeCreateWithoutDevice_approvalInput> = z.object({
  approval_type_id: z.coerce.number(),
  approval_type_name: z.string().max(45)
}).strict();

export const device_approval_typeUncheckedCreateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approval_typeUncheckedCreateWithoutDevice_approvalInput> = z.object({
  approval_type_id: z.coerce.number(),
  approval_type_name: z.string().max(45)
}).strict();

export const device_approval_typeCreateOrConnectWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approval_typeCreateOrConnectWithoutDevice_approvalInput> = z.object({
  where: z.lazy(() => device_approval_typeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_approval_typeCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approval_typeUncheckedCreateWithoutDevice_approvalInputSchema) ]),
}).strict();

export const locationCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.locationCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logCreateNestedManyWithoutLocationInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutLocationInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedOneWithoutLocationInputSchema).optional()
}).strict();

export const locationUncheckedCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.locationUncheckedCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  warehouse_id: z.coerce.number().nullable().optional().nullable(),
  client_branch_id: z.coerce.number().nullable().optional().nullable(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutLocationInputSchema).optional()
}).strict();

export const locationCreateOrConnectWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.locationCreateOrConnectWithoutDevice_approval_device_approval_origin_location_idTolocationInput> = z.object({
  where: z.lazy(() => locationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema) ]),
}).strict();

export const locationCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.locationCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logCreateNestedManyWithoutLocationInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutLocationInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedOneWithoutLocationInputSchema).optional()
}).strict();

export const locationUncheckedCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.locationUncheckedCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  warehouse_id: z.coerce.number().nullable().optional().nullable(),
  client_branch_id: z.coerce.number().nullable().optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutLocationInputSchema).optional()
}).strict();

export const locationCreateOrConnectWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.locationCreateOrConnectWithoutDevice_approval_device_approval_destination_location_idTolocationInput> = z.object({
  where: z.lazy(() => locationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema) ]),
}).strict();

export const userCreateWithoutDevice_approval_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userCreateWithoutDevice_approval_device_approval_requester_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutDevice_approval_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutDevice_approval_device_approval_requester_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutDevice_approval_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutDevice_approval_device_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutDevice_approval_device_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_approval_device_approval_requester_idTouserInputSchema) ]),
}).strict();

export const userCreateWithoutDevice_approval_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userCreateWithoutDevice_approval_device_approval_approver_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutDevice_approval_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutDevice_approval_device_approval_approver_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutDevice_approval_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutDevice_approval_device_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutDevice_approval_device_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_approval_device_approval_approver_idTouserInputSchema) ]),
}).strict();

export const approval_roleUpsertWithoutDevice_approvalInputSchema: z.ZodType<Prisma.approval_roleUpsertWithoutDevice_approvalInput> = z.object({
  update: z.union([ z.lazy(() => approval_roleUpdateWithoutDevice_approvalInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutDevice_approvalInputSchema) ]),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutDevice_approvalInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutDevice_approvalInputSchema) ]),
  where: z.lazy(() => approval_roleWhereInputSchema).optional()
}).strict();

export const approval_roleUpdateToOneWithWhereWithoutDevice_approvalInputSchema: z.ZodType<Prisma.approval_roleUpdateToOneWithWhereWithoutDevice_approvalInput> = z.object({
  where: z.lazy(() => approval_roleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => approval_roleUpdateWithoutDevice_approvalInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutDevice_approvalInputSchema) ]),
}).strict();

export const approval_roleUpdateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.approval_roleUpdateWithoutDevice_approvalInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutOther_approval_roleNestedInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const approval_roleUncheckedUpdateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.approval_roleUncheckedUpdateWithoutDevice_approvalInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  upper_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_approval_role: z.lazy(() => approval_roleUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const device_approvalUpsertWithoutOther_device_approvalInputSchema: z.ZodType<Prisma.device_approvalUpsertWithoutOther_device_approvalInput> = z.object({
  update: z.union([ z.lazy(() => device_approvalUpdateWithoutOther_device_approvalInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutOther_device_approvalInputSchema) ]),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutOther_device_approvalInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutOther_device_approvalInputSchema) ]),
  where: z.lazy(() => device_approvalWhereInputSchema).optional()
}).strict();

export const device_approvalUpdateToOneWithWhereWithoutOther_device_approvalInputSchema: z.ZodType<Prisma.device_approvalUpdateToOneWithWhereWithoutOther_device_approvalInput> = z.object({
  where: z.lazy(() => device_approvalWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_approvalUpdateWithoutOther_device_approvalInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutOther_device_approvalInputSchema) ]),
}).strict();

export const device_approvalUpdateWithoutOther_device_approvalInputSchema: z.ZodType<Prisma.device_approvalUpdateWithoutOther_device_approvalInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateOneWithoutOther_device_approvalNestedInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutDevice_approval_device_approval_requester_idTouserNestedInputSchema).optional(),
  user_device_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutDevice_approval_device_approval_approver_idTouserNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateWithoutOther_device_approvalInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateWithoutOther_device_approvalInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_approvalUpsertWithWhereUniqueWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalUpsertWithWhereUniqueWithoutDevice_approvalInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_approvalUpdateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutDevice_approvalInputSchema) ]),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approvalInputSchema) ]),
}).strict();

export const device_approvalUpdateWithWhereUniqueWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalUpdateWithWhereUniqueWithoutDevice_approvalInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateWithoutDevice_approvalInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutDevice_approvalInputSchema) ]),
}).strict();

export const device_approvalUpdateManyWithWhereWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithWhereWithoutDevice_approvalInput> = z.object({
  where: z.lazy(() => device_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateManyMutationInputSchema),z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approvalInputSchema) ]),
}).strict();

export const device_approval_typeUpsertWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approval_typeUpsertWithoutDevice_approvalInput> = z.object({
  update: z.union([ z.lazy(() => device_approval_typeUpdateWithoutDevice_approvalInputSchema),z.lazy(() => device_approval_typeUncheckedUpdateWithoutDevice_approvalInputSchema) ]),
  create: z.union([ z.lazy(() => device_approval_typeCreateWithoutDevice_approvalInputSchema),z.lazy(() => device_approval_typeUncheckedCreateWithoutDevice_approvalInputSchema) ]),
  where: z.lazy(() => device_approval_typeWhereInputSchema).optional()
}).strict();

export const device_approval_typeUpdateToOneWithWhereWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approval_typeUpdateToOneWithWhereWithoutDevice_approvalInput> = z.object({
  where: z.lazy(() => device_approval_typeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_approval_typeUpdateWithoutDevice_approvalInputSchema),z.lazy(() => device_approval_typeUncheckedUpdateWithoutDevice_approvalInputSchema) ]),
}).strict();

export const device_approval_typeUpdateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approval_typeUpdateWithoutDevice_approvalInput> = z.object({
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_approval_typeUncheckedUpdateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approval_typeUncheckedUpdateWithoutDevice_approvalInput> = z.object({
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const locationUpsertWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.locationUpsertWithoutDevice_approval_device_approval_origin_location_idTolocationInput> = z.object({
  update: z.union([ z.lazy(() => locationUpdateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => locationUncheckedUpdateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema) ]),
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema) ]),
  where: z.lazy(() => locationWhereInputSchema).optional()
}).strict();

export const locationUpdateToOneWithWhereWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.locationUpdateToOneWithWhereWithoutDevice_approval_device_approval_origin_location_idTolocationInput> = z.object({
  where: z.lazy(() => locationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => locationUpdateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => locationUncheckedUpdateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema) ]),
}).strict();

export const locationUpdateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.locationUpdateWithoutDevice_approval_device_approval_origin_location_idTolocationInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUpdateManyWithoutLocationNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneWithoutLocationNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateOneWithoutLocationNestedInputSchema).optional()
}).strict();

export const locationUncheckedUpdateWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.locationUncheckedUpdateWithoutDevice_approval_device_approval_origin_location_idTolocationInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUncheckedUpdateManyWithoutLocationNestedInputSchema).optional()
}).strict();

export const locationUpsertWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.locationUpsertWithoutDevice_approval_device_approval_destination_location_idTolocationInput> = z.object({
  update: z.union([ z.lazy(() => locationUpdateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => locationUncheckedUpdateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema) ]),
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema) ]),
  where: z.lazy(() => locationWhereInputSchema).optional()
}).strict();

export const locationUpdateToOneWithWhereWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.locationUpdateToOneWithWhereWithoutDevice_approval_device_approval_destination_location_idTolocationInput> = z.object({
  where: z.lazy(() => locationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => locationUpdateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => locationUncheckedUpdateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema) ]),
}).strict();

export const locationUpdateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.locationUpdateWithoutDevice_approval_device_approval_destination_location_idTolocationInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUpdateManyWithoutLocationNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneWithoutLocationNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateOneWithoutLocationNestedInputSchema).optional()
}).strict();

export const locationUncheckedUpdateWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.locationUncheckedUpdateWithoutDevice_approval_device_approval_destination_location_idTolocationInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUncheckedUpdateManyWithoutLocationNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutDevice_approval_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userUpsertWithoutDevice_approval_device_approval_requester_idTouserInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutDevice_approval_device_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_approval_device_approval_requester_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutDevice_approval_device_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_approval_device_approval_requester_idTouserInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutDevice_approval_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutDevice_approval_device_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutDevice_approval_device_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_approval_device_approval_requester_idTouserInputSchema) ]),
}).strict();

export const userUpdateWithoutDevice_approval_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userUpdateWithoutDevice_approval_device_approval_requester_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutDevice_approval_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutDevice_approval_device_approval_requester_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutDevice_approval_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userUpsertWithoutDevice_approval_device_approval_approver_idTouserInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutDevice_approval_device_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_approval_device_approval_approver_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutDevice_approval_device_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_approval_device_approval_approver_idTouserInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutDevice_approval_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutDevice_approval_device_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutDevice_approval_device_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_approval_device_approval_approver_idTouserInputSchema) ]),
}).strict();

export const userUpdateWithoutDevice_approval_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userUpdateWithoutDevice_approval_device_approval_approver_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutDevice_approval_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutDevice_approval_device_approval_approver_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const device_approvalCreateWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalCreateWithoutDevice_approval_typeInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutDevice_approvalInputSchema),
  device_approval: z.lazy(() => device_approvalCreateNestedOneWithoutOther_device_approvalInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutDevice_approvalInputSchema).optional(),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_requester_idTouserInputSchema),
  user_device_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional()
}).strict();

export const device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateWithoutDevice_approval_typeInput> = z.object({
  approval_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutDevice_approvalInputSchema).optional()
}).strict();

export const device_approvalCreateOrConnectWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalCreateOrConnectWithoutDevice_approval_typeInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema) ]),
}).strict();

export const device_approvalCreateManyDevice_approval_typeInputEnvelopeSchema: z.ZodType<Prisma.device_approvalCreateManyDevice_approval_typeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_approvalCreateManyDevice_approval_typeInputSchema),z.lazy(() => device_approvalCreateManyDevice_approval_typeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_approvalUpsertWithWhereUniqueWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalUpsertWithWhereUniqueWithoutDevice_approval_typeInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_approvalUpdateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutDevice_approval_typeInputSchema) ]),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutDevice_approval_typeInputSchema) ]),
}).strict();

export const device_approvalUpdateWithWhereUniqueWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalUpdateWithWhereUniqueWithoutDevice_approval_typeInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateWithoutDevice_approval_typeInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutDevice_approval_typeInputSchema) ]),
}).strict();

export const device_approvalUpdateManyWithWhereWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithWhereWithoutDevice_approval_typeInput> = z.object({
  where: z.lazy(() => device_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateManyMutationInputSchema),z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approval_typeInputSchema) ]),
}).strict();

export const consumable_modelCreateWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.consumable_modelCreateWithoutDevice_consumable_compatibilityInput> = z.object({
  consumable_model_id: z.coerce.number(),
  manufacturer: z.string().max(100),
  consumable_name: z.string().max(100),
  consumable_type: z.string().max(100)
}).strict();

export const consumable_modelUncheckedCreateWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.consumable_modelUncheckedCreateWithoutDevice_consumable_compatibilityInput> = z.object({
  consumable_model_id: z.coerce.number(),
  manufacturer: z.string().max(100),
  consumable_name: z.string().max(100),
  consumable_type: z.string().max(100)
}).strict();

export const consumable_modelCreateOrConnectWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.consumable_modelCreateOrConnectWithoutDevice_consumable_compatibilityInput> = z.object({
  where: z.lazy(() => consumable_modelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => consumable_modelCreateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => consumable_modelUncheckedCreateWithoutDevice_consumable_compatibilityInputSchema) ]),
}).strict();

export const device_modelCreateWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.device_modelCreateWithoutDevice_consumable_compatibilityInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
  device: z.lazy(() => deviceCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_driver: z.lazy(() => device_driverCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityCreateNestedManyWithoutDevice_modelInputSchema).optional()
}).strict();

export const device_modelUncheckedCreateWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.device_modelUncheckedCreateWithoutDevice_consumable_compatibilityInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
  device: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional()
}).strict();

export const device_modelCreateOrConnectWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.device_modelCreateOrConnectWithoutDevice_consumable_compatibilityInput> = z.object({
  where: z.lazy(() => device_modelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_consumable_compatibilityInputSchema) ]),
}).strict();

export const consumable_modelUpsertWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.consumable_modelUpsertWithoutDevice_consumable_compatibilityInput> = z.object({
  update: z.union([ z.lazy(() => consumable_modelUpdateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => consumable_modelUncheckedUpdateWithoutDevice_consumable_compatibilityInputSchema) ]),
  create: z.union([ z.lazy(() => consumable_modelCreateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => consumable_modelUncheckedCreateWithoutDevice_consumable_compatibilityInputSchema) ]),
  where: z.lazy(() => consumable_modelWhereInputSchema).optional()
}).strict();

export const consumable_modelUpdateToOneWithWhereWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.consumable_modelUpdateToOneWithWhereWithoutDevice_consumable_compatibilityInput> = z.object({
  where: z.lazy(() => consumable_modelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => consumable_modelUpdateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => consumable_modelUncheckedUpdateWithoutDevice_consumable_compatibilityInputSchema) ]),
}).strict();

export const consumable_modelUpdateWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.consumable_modelUpdateWithoutDevice_consumable_compatibilityInput> = z.object({
  consumable_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_type: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const consumable_modelUncheckedUpdateWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.consumable_modelUncheckedUpdateWithoutDevice_consumable_compatibilityInput> = z.object({
  consumable_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  consumable_type: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_modelUpsertWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.device_modelUpsertWithoutDevice_consumable_compatibilityInput> = z.object({
  update: z.union([ z.lazy(() => device_modelUpdateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDevice_consumable_compatibilityInputSchema) ]),
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_consumable_compatibilityInputSchema) ]),
  where: z.lazy(() => device_modelWhereInputSchema).optional()
}).strict();

export const device_modelUpdateToOneWithWhereWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.device_modelUpdateToOneWithWhereWithoutDevice_consumable_compatibilityInput> = z.object({
  where: z.lazy(() => device_modelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_modelUpdateWithoutDevice_consumable_compatibilityInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDevice_consumable_compatibilityInputSchema) ]),
}).strict();

export const device_modelUpdateWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.device_modelUpdateWithoutDevice_consumable_compatibilityInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUpdateManyWithoutDevice_modelNestedInputSchema).optional()
}).strict();

export const device_modelUncheckedUpdateWithoutDevice_consumable_compatibilityInputSchema: z.ZodType<Prisma.device_modelUncheckedUpdateWithoutDevice_consumable_compatibilityInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional()
}).strict();

export const device_modelCreateWithoutDevice_driverInputSchema: z.ZodType<Prisma.device_modelCreateWithoutDevice_driverInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
  device: z.lazy(() => deviceCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityCreateNestedManyWithoutDevice_modelInputSchema).optional()
}).strict();

export const device_modelUncheckedCreateWithoutDevice_driverInputSchema: z.ZodType<Prisma.device_modelUncheckedCreateWithoutDevice_driverInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
  device: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional()
}).strict();

export const device_modelCreateOrConnectWithoutDevice_driverInputSchema: z.ZodType<Prisma.device_modelCreateOrConnectWithoutDevice_driverInput> = z.object({
  where: z.lazy(() => device_modelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_driverInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_driverInputSchema) ]),
}).strict();

export const device_modelUpsertWithoutDevice_driverInputSchema: z.ZodType<Prisma.device_modelUpsertWithoutDevice_driverInput> = z.object({
  update: z.union([ z.lazy(() => device_modelUpdateWithoutDevice_driverInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDevice_driverInputSchema) ]),
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_driverInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_driverInputSchema) ]),
  where: z.lazy(() => device_modelWhereInputSchema).optional()
}).strict();

export const device_modelUpdateToOneWithWhereWithoutDevice_driverInputSchema: z.ZodType<Prisma.device_modelUpdateToOneWithWhereWithoutDevice_driverInput> = z.object({
  where: z.lazy(() => device_modelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_modelUpdateWithoutDevice_driverInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDevice_driverInputSchema) ]),
}).strict();

export const device_modelUpdateWithoutDevice_driverInputSchema: z.ZodType<Prisma.device_modelUpdateWithoutDevice_driverInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUpdateManyWithoutDevice_modelNestedInputSchema).optional()
}).strict();

export const device_modelUncheckedUpdateWithoutDevice_driverInputSchema: z.ZodType<Prisma.device_modelUncheckedUpdateWithoutDevice_driverInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional()
}).strict();

export const deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]),
}).strict();

export const deviceCreateManyDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputEnvelopeSchema: z.ZodType<Prisma.deviceCreateManyDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => deviceCreateManyDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceCreateManyDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const deviceCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema) ]),
}).strict();

export const userCreateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.userCreateWithoutDevice_inspection_logInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutDevice_inspection_logInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutDevice_inspection_logInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_inspection_logInputSchema) ]),
}).strict();

export const callCreateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.callCreateWithoutDevice_inspection_logInput> = z.object({
  call_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  transferred_at: z.coerce.date().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  call_type: z.lazy(() => call_typeCreateNestedOneWithoutCallInputSchema),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutCallInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutCallInputSchema).optional(),
  device: z.lazy(() => deviceCreateNestedOneWithoutCallInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_receiver_idTouserInputSchema),
  user_call_assigner_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_assigner_idTouserInputSchema).optional()
}).strict();

export const callUncheckedCreateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.callUncheckedCreateWithoutDevice_inspection_logInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable()
}).strict();

export const callCreateOrConnectWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.callCreateOrConnectWithoutDevice_inspection_logInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => callCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => callUncheckedCreateWithoutDevice_inspection_logInputSchema) ]),
}).strict();

export const inspection_approvalCreateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalCreateWithoutDevice_inspection_logInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutInspection_approvalInputSchema).optional(),
  user_inspection_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema).optional(),
  user_inspection_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema)
}).strict();

export const inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedCreateWithoutDevice_inspection_logInput> = z.object({
  approval_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const inspection_approvalCreateOrConnectWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalCreateOrConnectWithoutDevice_inspection_logInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema) ]),
}).strict();

export const inspection_approvalCreateManyDevice_inspection_logInputEnvelopeSchema: z.ZodType<Prisma.inspection_approvalCreateManyDevice_inspection_logInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => inspection_approvalCreateManyDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalCreateManyDevice_inspection_logInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const deviceUpsertWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceUpsertWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => deviceUpdateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]),
}).strict();

export const deviceUpdateWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceUpdateWithWhereUniqueWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]),
}).strict();

export const deviceUpdateManyWithWhereWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceUpdateManyWithWhereWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  where: z.lazy(() => deviceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateManyMutationInputSchema),z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema) ]),
}).strict();

export const deviceUpsertWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceUpsertWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInput> = z.object({
  update: z.union([ z.lazy(() => deviceUpdateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema) ]),
  where: z.lazy(() => deviceWhereInputSchema).optional()
}).strict();

export const deviceUpdateToOneWithWhereWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceUpdateToOneWithWhereWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => deviceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deviceUpdateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema) ]),
}).strict();

export const deviceUpdateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceUpdateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.userUpsertWithoutDevice_inspection_logInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutDevice_inspection_logInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_inspection_logInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_inspection_logInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutDevice_inspection_logInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutDevice_inspection_logInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_inspection_logInputSchema) ]),
}).strict();

export const userUpdateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.userUpdateWithoutDevice_inspection_logInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutDevice_inspection_logInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const callUpsertWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.callUpsertWithoutDevice_inspection_logInput> = z.object({
  update: z.union([ z.lazy(() => callUpdateWithoutDevice_inspection_logInputSchema),z.lazy(() => callUncheckedUpdateWithoutDevice_inspection_logInputSchema) ]),
  create: z.union([ z.lazy(() => callCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => callUncheckedCreateWithoutDevice_inspection_logInputSchema) ]),
  where: z.lazy(() => callWhereInputSchema).optional()
}).strict();

export const callUpdateToOneWithWhereWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.callUpdateToOneWithWhereWithoutDevice_inspection_logInput> = z.object({
  where: z.lazy(() => callWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => callUpdateWithoutDevice_inspection_logInputSchema),z.lazy(() => callUncheckedUpdateWithoutDevice_inspection_logInputSchema) ]),
}).strict();

export const callUpdateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.callUpdateWithoutDevice_inspection_logInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  call_type: z.lazy(() => call_typeUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutCallNestedInputSchema).optional(),
  device: z.lazy(() => deviceUpdateOneWithoutCallNestedInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userUpdateOneRequiredWithoutCall_call_receiver_idTouserNestedInputSchema).optional(),
  user_call_assigner_idTouser: z.lazy(() => userUpdateOneWithoutCall_call_assigner_idTouserNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.callUncheckedUpdateWithoutDevice_inspection_logInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const inspection_approvalUpsertWithWhereUniqueWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalUpsertWithWhereUniqueWithoutDevice_inspection_logInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateWithoutDevice_inspection_logInputSchema) ]),
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutDevice_inspection_logInputSchema) ]),
}).strict();

export const inspection_approvalUpdateWithWhereUniqueWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalUpdateWithWhereUniqueWithoutDevice_inspection_logInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => inspection_approvalUpdateWithoutDevice_inspection_logInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateWithoutDevice_inspection_logInputSchema) ]),
}).strict();

export const inspection_approvalUpdateManyWithWhereWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalUpdateManyWithWhereWithoutDevice_inspection_logInput> = z.object({
  where: z.lazy(() => inspection_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => inspection_approvalUpdateManyMutationInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutDevice_inspection_logInputSchema) ]),
}).strict();

export const deviceCreateWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.deviceCreateWithoutDevice_install_infoInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutDevice_install_infoInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutDevice_install_infoInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_install_infoInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_install_infoInputSchema) ]),
}).strict();

export const userCreateWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.userCreateWithoutDevice_install_infoInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutDevice_install_infoInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutDevice_install_infoInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutDevice_install_infoInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_install_infoInputSchema) ]),
}).strict();

export const deviceUpsertWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.deviceUpsertWithoutDevice_install_infoInput> = z.object({
  update: z.union([ z.lazy(() => deviceUpdateWithoutDevice_install_infoInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_install_infoInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_install_infoInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_install_infoInputSchema) ]),
  where: z.lazy(() => deviceWhereInputSchema).optional()
}).strict();

export const deviceUpdateToOneWithWhereWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.deviceUpdateToOneWithWhereWithoutDevice_install_infoInput> = z.object({
  where: z.lazy(() => deviceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deviceUpdateWithoutDevice_install_infoInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_install_infoInputSchema) ]),
}).strict();

export const deviceUpdateWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.deviceUpdateWithoutDevice_install_infoInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutDevice_install_infoInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.userUpsertWithoutDevice_install_infoInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutDevice_install_infoInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_install_infoInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutDevice_install_infoInputSchema),z.lazy(() => userUncheckedCreateWithoutDevice_install_infoInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutDevice_install_infoInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutDevice_install_infoInputSchema),z.lazy(() => userUncheckedUpdateWithoutDevice_install_infoInputSchema) ]),
}).strict();

export const userUpdateWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.userUpdateWithoutDevice_install_infoInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutDevice_install_infoInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutDevice_install_infoInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema) ]),
}).strict();

export const deviceCreateManyDevice_location_log_device_last_location_log_idTodevice_location_logInputEnvelopeSchema: z.ZodType<Prisma.deviceCreateManyDevice_location_log_device_last_location_log_idTodevice_location_logInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => deviceCreateManyDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceCreateManyDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const deviceCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutDevice_location_log_device_location_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema) ]),
}).strict();

export const locationCreateWithoutDevice_location_logInputSchema: z.ZodType<Prisma.locationCreateWithoutDevice_location_logInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutLocationInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedOneWithoutLocationInputSchema).optional()
}).strict();

export const locationUncheckedCreateWithoutDevice_location_logInputSchema: z.ZodType<Prisma.locationUncheckedCreateWithoutDevice_location_logInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  warehouse_id: z.coerce.number().nullable().optional().nullable(),
  client_branch_id: z.coerce.number().nullable().optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema).optional()
}).strict();

export const locationCreateOrConnectWithoutDevice_location_logInputSchema: z.ZodType<Prisma.locationCreateOrConnectWithoutDevice_location_logInput> = z.object({
  where: z.lazy(() => locationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_location_logInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_location_logInputSchema) ]),
}).strict();

export const deviceUpsertWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceUpsertWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => deviceUpdateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema) ]),
}).strict();

export const deviceUpdateWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceUpdateWithWhereUniqueWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema) ]),
}).strict();

export const deviceUpdateManyWithWhereWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceUpdateManyWithWhereWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  where: z.lazy(() => deviceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateManyMutationInputSchema),z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema) ]),
}).strict();

export const deviceUpsertWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceUpsertWithoutDevice_location_log_device_location_log_device_idTodeviceInput> = z.object({
  update: z.union([ z.lazy(() => deviceUpdateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema) ]),
  where: z.lazy(() => deviceWhereInputSchema).optional()
}).strict();

export const deviceUpdateToOneWithWhereWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceUpdateToOneWithWhereWithoutDevice_location_log_device_location_log_device_idTodeviceInput> = z.object({
  where: z.lazy(() => deviceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deviceUpdateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema) ]),
}).strict();

export const deviceUpdateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceUpdateWithoutDevice_location_log_device_location_log_device_idTodeviceInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutDevice_location_log_device_location_log_device_idTodeviceInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const locationUpsertWithoutDevice_location_logInputSchema: z.ZodType<Prisma.locationUpsertWithoutDevice_location_logInput> = z.object({
  update: z.union([ z.lazy(() => locationUpdateWithoutDevice_location_logInputSchema),z.lazy(() => locationUncheckedUpdateWithoutDevice_location_logInputSchema) ]),
  create: z.union([ z.lazy(() => locationCreateWithoutDevice_location_logInputSchema),z.lazy(() => locationUncheckedCreateWithoutDevice_location_logInputSchema) ]),
  where: z.lazy(() => locationWhereInputSchema).optional()
}).strict();

export const locationUpdateToOneWithWhereWithoutDevice_location_logInputSchema: z.ZodType<Prisma.locationUpdateToOneWithWhereWithoutDevice_location_logInput> = z.object({
  where: z.lazy(() => locationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => locationUpdateWithoutDevice_location_logInputSchema),z.lazy(() => locationUncheckedUpdateWithoutDevice_location_logInputSchema) ]),
}).strict();

export const locationUpdateWithoutDevice_location_logInputSchema: z.ZodType<Prisma.locationUpdateWithoutDevice_location_logInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneWithoutLocationNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateOneWithoutLocationNestedInputSchema).optional()
}).strict();

export const locationUncheckedUpdateWithoutDevice_location_logInputSchema: z.ZodType<Prisma.locationUncheckedUpdateWithoutDevice_location_logInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema).optional()
}).strict();

export const deviceCreateWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceCreateWithoutDevice_modelInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutDevice_modelInput> = z.object({
  device_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_modelInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_modelInputSchema) ]),
}).strict();

export const deviceCreateManyDevice_modelInputEnvelopeSchema: z.ZodType<Prisma.deviceCreateManyDevice_modelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => deviceCreateManyDevice_modelInputSchema),z.lazy(() => deviceCreateManyDevice_modelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_consumable_compatibilityCreateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateWithoutDevice_modelInput> = z.object({
  consumable_model: z.lazy(() => consumable_modelCreateNestedOneWithoutDevice_consumable_compatibilityInputSchema)
}).strict();

export const device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInput> = z.object({
  consumable_model_id: z.coerce.number()
}).strict();

export const device_consumable_compatibilityCreateOrConnectWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateOrConnectWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_consumable_compatibilityCreateManyDevice_modelInputEnvelopeSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateManyDevice_modelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_consumable_compatibilityCreateManyDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityCreateManyDevice_modelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_driverCreateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverCreateWithoutDevice_modelInput> = z.object({
  device_driver_id: z.coerce.number(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  printer_language: z.string().max(45).nullable().optional().nullable(),
  install_file_address: z.string().max(200).nullable().optional().nullable()
}).strict();

export const device_driverUncheckedCreateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverUncheckedCreateWithoutDevice_modelInput> = z.object({
  device_driver_id: z.coerce.number(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  printer_language: z.string().max(45).nullable().optional().nullable(),
  install_file_address: z.string().max(200).nullable().optional().nullable()
}).strict();

export const device_driverCreateOrConnectWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverCreateOrConnectWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_driverWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_driverCreateWithoutDevice_modelInputSchema),z.lazy(() => device_driverUncheckedCreateWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_driverCreateManyDevice_modelInputEnvelopeSchema: z.ZodType<Prisma.device_driverCreateManyDevice_modelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_driverCreateManyDevice_modelInputSchema),z.lazy(() => device_driverCreateManyDevice_modelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_option_compatibilityCreateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityCreateWithoutDevice_modelInput> = z.object({
  option_model: z.lazy(() => option_modelCreateNestedOneWithoutDevice_option_compatibilityInputSchema)
}).strict();

export const device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedCreateWithoutDevice_modelInput> = z.object({
  option_model_id: z.coerce.number()
}).strict();

export const device_option_compatibilityCreateOrConnectWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityCreateOrConnectWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_option_compatibilityCreateManyDevice_modelInputEnvelopeSchema: z.ZodType<Prisma.device_option_compatibilityCreateManyDevice_modelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_option_compatibilityCreateManyDevice_modelInputSchema),z.lazy(() => device_option_compatibilityCreateManyDevice_modelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const deviceUpsertWithWhereUniqueWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceUpsertWithWhereUniqueWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => deviceUpdateWithoutDevice_modelInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_modelInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_modelInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_modelInputSchema) ]),
}).strict();

export const deviceUpdateWithWhereUniqueWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceUpdateWithWhereUniqueWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateWithoutDevice_modelInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_modelInputSchema) ]),
}).strict();

export const deviceUpdateManyWithWhereWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceUpdateManyWithWhereWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => deviceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateManyMutationInputSchema),z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_consumable_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_consumable_compatibilityUpdateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedUpdateWithoutDevice_modelInputSchema) ]),
  create: z.union([ z.lazy(() => device_consumable_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedCreateWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_consumable_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_consumable_compatibilityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_consumable_compatibilityUpdateWithoutDevice_modelInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedUpdateWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_consumable_compatibilityUpdateManyWithWhereWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateManyWithWhereWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_consumable_compatibilityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_consumable_compatibilityUpdateManyMutationInputSchema),z.lazy(() => device_consumable_compatibilityUncheckedUpdateManyWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_driverUpsertWithWhereUniqueWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverUpsertWithWhereUniqueWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_driverWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_driverUpdateWithoutDevice_modelInputSchema),z.lazy(() => device_driverUncheckedUpdateWithoutDevice_modelInputSchema) ]),
  create: z.union([ z.lazy(() => device_driverCreateWithoutDevice_modelInputSchema),z.lazy(() => device_driverUncheckedCreateWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_driverUpdateWithWhereUniqueWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverUpdateWithWhereUniqueWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_driverWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_driverUpdateWithoutDevice_modelInputSchema),z.lazy(() => device_driverUncheckedUpdateWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_driverUpdateManyWithWhereWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverUpdateManyWithWhereWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_driverScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_driverUpdateManyMutationInputSchema),z.lazy(() => device_driverUncheckedUpdateManyWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_driverScalarWhereInputSchema: z.ZodType<Prisma.device_driverScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_driverScalarWhereInputSchema),z.lazy(() => device_driverScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_driverScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_driverScalarWhereInputSchema),z.lazy(() => device_driverScalarWhereInputSchema).array() ]).optional(),
  device_driver_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  manufacturer: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  printer_language: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  install_file_address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const device_option_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUpsertWithWhereUniqueWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_option_compatibilityUpdateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedUpdateWithoutDevice_modelInputSchema) ]),
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_option_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUpdateWithWhereUniqueWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_option_compatibilityUpdateWithoutDevice_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedUpdateWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_option_compatibilityUpdateManyWithWhereWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUpdateManyWithWhereWithoutDevice_modelInput> = z.object({
  where: z.lazy(() => device_option_compatibilityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_option_compatibilityUpdateManyMutationInputSchema),z.lazy(() => device_option_compatibilityUncheckedUpdateManyWithoutDevice_modelInputSchema) ]),
}).strict();

export const device_option_compatibilityScalarWhereInputSchema: z.ZodType<Prisma.device_option_compatibilityScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_option_compatibilityScalarWhereInputSchema),z.lazy(() => device_option_compatibilityScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_option_compatibilityScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_option_compatibilityScalarWhereInputSchema),z.lazy(() => device_option_compatibilityScalarWhereInputSchema).array() ]).optional(),
  device_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  option_model_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const deviceCreateWithoutDevice_optionInputSchema: z.ZodType<Prisma.deviceCreateWithoutDevice_optionInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_status: z.lazy(() => device_statusCreateNestedOneWithoutDeviceInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutDevice_optionInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutDevice_optionInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutDevice_optionInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutDevice_optionInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_optionInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_optionInputSchema) ]),
}).strict();

export const option_modelCreateWithoutDevice_optionInputSchema: z.ZodType<Prisma.option_modelCreateWithoutDevice_optionInput> = z.object({
  option_model_id: z.coerce.number(),
  option_model_name: z.string().max(100),
  option_type: z.string().max(45),
  manufacturer: z.string().max(100),
  device_option_compatibility: z.lazy(() => device_option_compatibilityCreateNestedManyWithoutOption_modelInputSchema).optional()
}).strict();

export const option_modelUncheckedCreateWithoutDevice_optionInputSchema: z.ZodType<Prisma.option_modelUncheckedCreateWithoutDevice_optionInput> = z.object({
  option_model_id: z.coerce.number(),
  option_model_name: z.string().max(100),
  option_type: z.string().max(45),
  manufacturer: z.string().max(100),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedCreateNestedManyWithoutOption_modelInputSchema).optional()
}).strict();

export const option_modelCreateOrConnectWithoutDevice_optionInputSchema: z.ZodType<Prisma.option_modelCreateOrConnectWithoutDevice_optionInput> = z.object({
  where: z.lazy(() => option_modelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => option_modelCreateWithoutDevice_optionInputSchema),z.lazy(() => option_modelUncheckedCreateWithoutDevice_optionInputSchema) ]),
}).strict();

export const warehouseCreateWithoutDevice_optionInputSchema: z.ZodType<Prisma.warehouseCreateWithoutDevice_optionInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  location: z.lazy(() => locationCreateNestedManyWithoutWarehouseInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutWarehouseInputSchema)
}).strict();

export const warehouseUncheckedCreateWithoutDevice_optionInputSchema: z.ZodType<Prisma.warehouseUncheckedCreateWithoutDevice_optionInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  mgmt_dept_id: z.coerce.number(),
  location: z.lazy(() => locationUncheckedCreateNestedManyWithoutWarehouseInputSchema).optional()
}).strict();

export const warehouseCreateOrConnectWithoutDevice_optionInputSchema: z.ZodType<Prisma.warehouseCreateOrConnectWithoutDevice_optionInput> = z.object({
  where: z.lazy(() => warehouseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => warehouseCreateWithoutDevice_optionInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutDevice_optionInputSchema) ]),
}).strict();

export const deviceUpsertWithoutDevice_optionInputSchema: z.ZodType<Prisma.deviceUpsertWithoutDevice_optionInput> = z.object({
  update: z.union([ z.lazy(() => deviceUpdateWithoutDevice_optionInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_optionInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_optionInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_optionInputSchema) ]),
  where: z.lazy(() => deviceWhereInputSchema).optional()
}).strict();

export const deviceUpdateToOneWithWhereWithoutDevice_optionInputSchema: z.ZodType<Prisma.deviceUpdateToOneWithWhereWithoutDevice_optionInput> = z.object({
  where: z.lazy(() => deviceWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deviceUpdateWithoutDevice_optionInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_optionInputSchema) ]),
}).strict();

export const deviceUpdateWithoutDevice_optionInputSchema: z.ZodType<Prisma.deviceUpdateWithoutDevice_optionInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutDevice_optionInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutDevice_optionInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional()
}).strict();

export const option_modelUpsertWithoutDevice_optionInputSchema: z.ZodType<Prisma.option_modelUpsertWithoutDevice_optionInput> = z.object({
  update: z.union([ z.lazy(() => option_modelUpdateWithoutDevice_optionInputSchema),z.lazy(() => option_modelUncheckedUpdateWithoutDevice_optionInputSchema) ]),
  create: z.union([ z.lazy(() => option_modelCreateWithoutDevice_optionInputSchema),z.lazy(() => option_modelUncheckedCreateWithoutDevice_optionInputSchema) ]),
  where: z.lazy(() => option_modelWhereInputSchema).optional()
}).strict();

export const option_modelUpdateToOneWithWhereWithoutDevice_optionInputSchema: z.ZodType<Prisma.option_modelUpdateToOneWithWhereWithoutDevice_optionInput> = z.object({
  where: z.lazy(() => option_modelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => option_modelUpdateWithoutDevice_optionInputSchema),z.lazy(() => option_modelUncheckedUpdateWithoutDevice_optionInputSchema) ]),
}).strict();

export const option_modelUpdateWithoutDevice_optionInputSchema: z.ZodType<Prisma.option_modelUpdateWithoutDevice_optionInput> = z.object({
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  option_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUpdateManyWithoutOption_modelNestedInputSchema).optional()
}).strict();

export const option_modelUncheckedUpdateWithoutDevice_optionInputSchema: z.ZodType<Prisma.option_modelUncheckedUpdateWithoutDevice_optionInput> = z.object({
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  option_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_option_compatibility: z.lazy(() => device_option_compatibilityUncheckedUpdateManyWithoutOption_modelNestedInputSchema).optional()
}).strict();

export const warehouseUpsertWithoutDevice_optionInputSchema: z.ZodType<Prisma.warehouseUpsertWithoutDevice_optionInput> = z.object({
  update: z.union([ z.lazy(() => warehouseUpdateWithoutDevice_optionInputSchema),z.lazy(() => warehouseUncheckedUpdateWithoutDevice_optionInputSchema) ]),
  create: z.union([ z.lazy(() => warehouseCreateWithoutDevice_optionInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutDevice_optionInputSchema) ]),
  where: z.lazy(() => warehouseWhereInputSchema).optional()
}).strict();

export const warehouseUpdateToOneWithWhereWithoutDevice_optionInputSchema: z.ZodType<Prisma.warehouseUpdateToOneWithWhereWithoutDevice_optionInput> = z.object({
  where: z.lazy(() => warehouseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => warehouseUpdateWithoutDevice_optionInputSchema),z.lazy(() => warehouseUncheckedUpdateWithoutDevice_optionInputSchema) ]),
}).strict();

export const warehouseUpdateWithoutDevice_optionInputSchema: z.ZodType<Prisma.warehouseUpdateWithoutDevice_optionInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.lazy(() => locationUpdateManyWithoutWarehouseNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutWarehouseNestedInputSchema).optional()
}).strict();

export const warehouseUncheckedUpdateWithoutDevice_optionInputSchema: z.ZodType<Prisma.warehouseUncheckedUpdateWithoutDevice_optionInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.lazy(() => locationUncheckedUpdateManyWithoutWarehouseNestedInputSchema).optional()
}).strict();

export const device_modelCreateWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.device_modelCreateWithoutDevice_option_compatibilityInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
  device: z.lazy(() => deviceCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_driver: z.lazy(() => device_driverCreateNestedManyWithoutDevice_modelInputSchema).optional()
}).strict();

export const device_modelUncheckedCreateWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.device_modelUncheckedCreateWithoutDevice_option_compatibilityInput> = z.object({
  device_model_id: z.coerce.number(),
  model_name: z.string().max(100),
  manufacturer: z.string().max(100),
  color_support: z.coerce.number(),
  device: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUncheckedCreateNestedManyWithoutDevice_modelInputSchema).optional()
}).strict();

export const device_modelCreateOrConnectWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.device_modelCreateOrConnectWithoutDevice_option_compatibilityInput> = z.object({
  where: z.lazy(() => device_modelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_option_compatibilityInputSchema) ]),
}).strict();

export const option_modelCreateWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.option_modelCreateWithoutDevice_option_compatibilityInput> = z.object({
  option_model_id: z.coerce.number(),
  option_model_name: z.string().max(100),
  option_type: z.string().max(45),
  manufacturer: z.string().max(100),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutOption_modelInputSchema).optional()
}).strict();

export const option_modelUncheckedCreateWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.option_modelUncheckedCreateWithoutDevice_option_compatibilityInput> = z.object({
  option_model_id: z.coerce.number(),
  option_model_name: z.string().max(100),
  option_type: z.string().max(45),
  manufacturer: z.string().max(100),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutOption_modelInputSchema).optional()
}).strict();

export const option_modelCreateOrConnectWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.option_modelCreateOrConnectWithoutDevice_option_compatibilityInput> = z.object({
  where: z.lazy(() => option_modelWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => option_modelCreateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => option_modelUncheckedCreateWithoutDevice_option_compatibilityInputSchema) ]),
}).strict();

export const device_modelUpsertWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.device_modelUpsertWithoutDevice_option_compatibilityInput> = z.object({
  update: z.union([ z.lazy(() => device_modelUpdateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDevice_option_compatibilityInputSchema) ]),
  create: z.union([ z.lazy(() => device_modelCreateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => device_modelUncheckedCreateWithoutDevice_option_compatibilityInputSchema) ]),
  where: z.lazy(() => device_modelWhereInputSchema).optional()
}).strict();

export const device_modelUpdateToOneWithWhereWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.device_modelUpdateToOneWithWhereWithoutDevice_option_compatibilityInput> = z.object({
  where: z.lazy(() => device_modelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_modelUpdateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => device_modelUncheckedUpdateWithoutDevice_option_compatibilityInputSchema) ]),
}).strict();

export const device_modelUpdateWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.device_modelUpdateWithoutDevice_option_compatibilityInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUpdateManyWithoutDevice_modelNestedInputSchema).optional()
}).strict();

export const device_modelUncheckedUpdateWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.device_modelUncheckedUpdateWithoutDevice_option_compatibilityInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  color_support: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_consumable_compatibility: z.lazy(() => device_consumable_compatibilityUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional(),
  device_driver: z.lazy(() => device_driverUncheckedUpdateManyWithoutDevice_modelNestedInputSchema).optional()
}).strict();

export const option_modelUpsertWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.option_modelUpsertWithoutDevice_option_compatibilityInput> = z.object({
  update: z.union([ z.lazy(() => option_modelUpdateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => option_modelUncheckedUpdateWithoutDevice_option_compatibilityInputSchema) ]),
  create: z.union([ z.lazy(() => option_modelCreateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => option_modelUncheckedCreateWithoutDevice_option_compatibilityInputSchema) ]),
  where: z.lazy(() => option_modelWhereInputSchema).optional()
}).strict();

export const option_modelUpdateToOneWithWhereWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.option_modelUpdateToOneWithWhereWithoutDevice_option_compatibilityInput> = z.object({
  where: z.lazy(() => option_modelWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => option_modelUpdateWithoutDevice_option_compatibilityInputSchema),z.lazy(() => option_modelUncheckedUpdateWithoutDevice_option_compatibilityInputSchema) ]),
}).strict();

export const option_modelUpdateWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.option_modelUpdateWithoutDevice_option_compatibilityInput> = z.object({
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  option_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutOption_modelNestedInputSchema).optional()
}).strict();

export const option_modelUncheckedUpdateWithoutDevice_option_compatibilityInputSchema: z.ZodType<Prisma.option_modelUncheckedUpdateWithoutDevice_option_compatibilityInput> = z.object({
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  option_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutOption_modelNestedInputSchema).optional()
}).strict();

export const deviceCreateWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceCreateWithoutDevice_statusInput> = z.object({
  device_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  call: z.lazy(() => callCreateNestedManyWithoutDeviceInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_owner_dept_idTodeptInputSchema),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptCreateNestedOneWithoutDevice_device_mgmt_dept_idTodeptInputSchema),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logCreateNestedOneWithoutDevice_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDeviceInputSchema),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceUncheckedCreateWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceUncheckedCreateWithoutDevice_statusInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeviceInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedOneWithoutDeviceInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutDevice_device_location_log_device_idTodeviceInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutDeviceInputSchema).optional()
}).strict();

export const deviceCreateOrConnectWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceCreateOrConnectWithoutDevice_statusInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_statusInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_statusInputSchema) ]),
}).strict();

export const deviceCreateManyDevice_statusInputEnvelopeSchema: z.ZodType<Prisma.deviceCreateManyDevice_statusInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => deviceCreateManyDevice_statusInputSchema),z.lazy(() => deviceCreateManyDevice_statusInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const deviceUpsertWithWhereUniqueWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceUpsertWithWhereUniqueWithoutDevice_statusInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => deviceUpdateWithoutDevice_statusInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_statusInputSchema) ]),
  create: z.union([ z.lazy(() => deviceCreateWithoutDevice_statusInputSchema),z.lazy(() => deviceUncheckedCreateWithoutDevice_statusInputSchema) ]),
}).strict();

export const deviceUpdateWithWhereUniqueWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceUpdateWithWhereUniqueWithoutDevice_statusInput> = z.object({
  where: z.lazy(() => deviceWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateWithoutDevice_statusInputSchema),z.lazy(() => deviceUncheckedUpdateWithoutDevice_statusInputSchema) ]),
}).strict();

export const deviceUpdateManyWithWhereWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceUpdateManyWithWhereWithoutDevice_statusInput> = z.object({
  where: z.lazy(() => deviceScalarWhereInputSchema),
  data: z.union([ z.lazy(() => deviceUpdateManyMutationInputSchema),z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_statusInputSchema) ]),
}).strict();

export const approval_roleCreateWithoutInspection_approvalInputSchema: z.ZodType<Prisma.approval_roleCreateWithoutInspection_approvalInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutOther_approval_roleInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleUncheckedCreateWithoutInspection_approvalInputSchema: z.ZodType<Prisma.approval_roleUncheckedCreateWithoutInspection_approvalInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  upper_role_id: z.coerce.number().nullable().optional().nullable(),
  other_approval_role: z.lazy(() => approval_roleUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleCreateOrConnectWithoutInspection_approvalInputSchema: z.ZodType<Prisma.approval_roleCreateOrConnectWithoutInspection_approvalInput> = z.object({
  where: z.lazy(() => approval_roleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutInspection_approvalInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutInspection_approvalInputSchema) ]),
}).strict();

export const device_inspection_logCreateWithoutInspection_approvalInputSchema: z.ZodType<Prisma.device_inspection_logCreateWithoutInspection_approvalInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceCreateNestedOneWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),
  user: z.lazy(() => userCreateNestedOneWithoutDevice_inspection_logInputSchema),
  call: z.lazy(() => callCreateNestedOneWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedCreateWithoutInspection_approvalInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedCreateWithoutInspection_approvalInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  inspector_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  call_id: z.coerce.number().nullable().optional().nullable(),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logCreateOrConnectWithoutInspection_approvalInputSchema: z.ZodType<Prisma.device_inspection_logCreateOrConnectWithoutInspection_approvalInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutInspection_approvalInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutInspection_approvalInputSchema) ]),
}).strict();

export const userCreateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userCreateWithoutInspection_approval_inspection_approval_approver_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutInspection_approval_inspection_approval_approver_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutInspection_approval_inspection_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema) ]),
}).strict();

export const userCreateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userCreateWithoutInspection_approval_inspection_approval_requester_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutInspection_approval_inspection_approval_requester_idTouserInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutInspection_approval_inspection_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema) ]),
}).strict();

export const approval_roleUpsertWithoutInspection_approvalInputSchema: z.ZodType<Prisma.approval_roleUpsertWithoutInspection_approvalInput> = z.object({
  update: z.union([ z.lazy(() => approval_roleUpdateWithoutInspection_approvalInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutInspection_approvalInputSchema) ]),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutInspection_approvalInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutInspection_approvalInputSchema) ]),
  where: z.lazy(() => approval_roleWhereInputSchema).optional()
}).strict();

export const approval_roleUpdateToOneWithWhereWithoutInspection_approvalInputSchema: z.ZodType<Prisma.approval_roleUpdateToOneWithWhereWithoutInspection_approvalInput> = z.object({
  where: z.lazy(() => approval_roleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => approval_roleUpdateWithoutInspection_approvalInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutInspection_approvalInputSchema) ]),
}).strict();

export const approval_roleUpdateWithoutInspection_approvalInputSchema: z.ZodType<Prisma.approval_roleUpdateWithoutInspection_approvalInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutOther_approval_roleNestedInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const approval_roleUncheckedUpdateWithoutInspection_approvalInputSchema: z.ZodType<Prisma.approval_roleUncheckedUpdateWithoutInspection_approvalInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  upper_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_approval_role: z.lazy(() => approval_roleUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const device_inspection_logUpsertWithoutInspection_approvalInputSchema: z.ZodType<Prisma.device_inspection_logUpsertWithoutInspection_approvalInput> = z.object({
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithoutInspection_approvalInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutInspection_approvalInputSchema) ]),
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutInspection_approvalInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutInspection_approvalInputSchema) ]),
  where: z.lazy(() => device_inspection_logWhereInputSchema).optional()
}).strict();

export const device_inspection_logUpdateToOneWithWhereWithoutInspection_approvalInputSchema: z.ZodType<Prisma.device_inspection_logUpdateToOneWithWhereWithoutInspection_approvalInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => device_inspection_logUpdateWithoutInspection_approvalInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutInspection_approvalInputSchema) ]),
}).strict();

export const device_inspection_logUpdateWithoutInspection_approvalInputSchema: z.ZodType<Prisma.device_inspection_logUpdateWithoutInspection_approvalInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceUpdateOneRequiredWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutDevice_inspection_logNestedInputSchema).optional(),
  call: z.lazy(() => callUpdateOneWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedUpdateWithoutInspection_approvalInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateWithoutInspection_approvalInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspector_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userUpsertWithoutInspection_approval_inspection_approval_approver_idTouserInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutInspection_approval_inspection_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema) ]),
}).strict();

export const userUpdateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userUpdateWithoutInspection_approval_inspection_approval_approver_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutInspection_approval_inspection_approval_approver_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userUpsertWithoutInspection_approval_inspection_approval_requester_idTouserInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedCreateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutInspection_approval_inspection_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema),z.lazy(() => userUncheckedUpdateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema) ]),
}).strict();

export const userUpdateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userUpdateWithoutInspection_approval_inspection_approval_requester_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutInspection_approval_inspection_approval_requester_idTouserInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutDevice_approvalInputSchema),
  device_approval: z.lazy(() => device_approvalCreateNestedOneWithoutOther_device_approvalInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutDevice_approvalInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeCreateNestedOneWithoutDevice_approvalInputSchema),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_requester_idTouserInputSchema),
  user_device_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional()
}).strict();

export const device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutDevice_approvalInputSchema).optional()
}).strict();

export const device_approvalCreateOrConnectWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalCreateOrConnectWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema) ]),
}).strict();

export const device_approvalCreateManyLocation_device_approval_origin_location_idTolocationInputEnvelopeSchema: z.ZodType<Prisma.device_approvalCreateManyLocation_device_approval_origin_location_idTolocationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_approvalCreateManyLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateManyLocation_device_approval_origin_location_idTolocationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutDevice_approvalInputSchema),
  device_approval: z.lazy(() => device_approvalCreateNestedOneWithoutOther_device_approvalInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutDevice_approvalInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeCreateNestedOneWithoutDevice_approvalInputSchema),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_requester_idTouserInputSchema),
  user_device_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional()
}).strict();

export const device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutDevice_approvalInputSchema).optional()
}).strict();

export const device_approvalCreateOrConnectWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalCreateOrConnectWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema) ]),
}).strict();

export const device_approvalCreateManyLocation_device_approval_destination_location_idTolocationInputEnvelopeSchema: z.ZodType<Prisma.device_approvalCreateManyLocation_device_approval_destination_location_idTolocationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_approvalCreateManyLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalCreateManyLocation_device_approval_destination_location_idTolocationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_location_logCreateWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logCreateWithoutLocationInput> = z.object({
  device_location_log_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_detail: z.string().max(200).nullable().optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceCreateNestedManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).optional(),
  device_device_location_log_device_idTodevice: z.lazy(() => deviceCreateNestedOneWithoutDevice_location_log_device_location_log_device_idTodeviceInputSchema)
}).strict();

export const device_location_logUncheckedCreateWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logUncheckedCreateWithoutLocationInput> = z.object({
  device_location_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_detail: z.string().max(200).nullable().optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema).optional()
}).strict();

export const device_location_logCreateOrConnectWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logCreateOrConnectWithoutLocationInput> = z.object({
  where: z.lazy(() => device_location_logWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_location_logCreateWithoutLocationInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutLocationInputSchema) ]),
}).strict();

export const device_location_logCreateManyLocationInputEnvelopeSchema: z.ZodType<Prisma.device_location_logCreateManyLocationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_location_logCreateManyLocationInputSchema),z.lazy(() => device_location_logCreateManyLocationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const client_branchCreateWithoutLocationInputSchema: z.ZodType<Prisma.client_branchCreateWithoutLocationInput> = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callCreateNestedManyWithoutClient_branchInputSchema).optional(),
  client: z.lazy(() => clientCreateNestedOneWithoutClient_branchInputSchema),
  client_rate: z.lazy(() => client_rateCreateNestedOneWithoutClient_branchInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutClient_branchInputSchema),
  sigungu: z.lazy(() => sigunguCreateNestedOneWithoutClient_branchInputSchema)
}).strict();

export const client_branchUncheckedCreateWithoutLocationInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateWithoutLocationInput> = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchCreateOrConnectWithoutLocationInputSchema: z.ZodType<Prisma.client_branchCreateOrConnectWithoutLocationInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => client_branchCreateWithoutLocationInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutLocationInputSchema) ]),
}).strict();

export const warehouseCreateWithoutLocationInputSchema: z.ZodType<Prisma.warehouseCreateWithoutLocationInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  device_option: z.lazy(() => device_optionCreateNestedManyWithoutWarehouseInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutWarehouseInputSchema)
}).strict();

export const warehouseUncheckedCreateWithoutLocationInputSchema: z.ZodType<Prisma.warehouseUncheckedCreateWithoutLocationInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100),
  mgmt_dept_id: z.coerce.number(),
  device_option: z.lazy(() => device_optionUncheckedCreateNestedManyWithoutWarehouseInputSchema).optional()
}).strict();

export const warehouseCreateOrConnectWithoutLocationInputSchema: z.ZodType<Prisma.warehouseCreateOrConnectWithoutLocationInput> = z.object({
  where: z.lazy(() => warehouseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => warehouseCreateWithoutLocationInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutLocationInputSchema) ]),
}).strict();

export const device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_approvalUpdateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutLocation_device_approval_origin_location_idTolocationInputSchema) ]),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_origin_location_idTolocationInputSchema) ]),
}).strict();

export const device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateWithoutLocation_device_approval_origin_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutLocation_device_approval_origin_location_idTolocationInputSchema) ]),
}).strict();

export const device_approvalUpdateManyWithWhereWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithWhereWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  where: z.lazy(() => device_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateManyMutationInputSchema),z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema) ]),
}).strict();

export const device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUpsertWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_approvalUpdateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutLocation_device_approval_destination_location_idTolocationInputSchema) ]),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutLocation_device_approval_destination_location_idTolocationInputSchema) ]),
}).strict();

export const device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUpdateWithWhereUniqueWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateWithoutLocation_device_approval_destination_location_idTolocationInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutLocation_device_approval_destination_location_idTolocationInputSchema) ]),
}).strict();

export const device_approvalUpdateManyWithWhereWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithWhereWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  where: z.lazy(() => device_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateManyMutationInputSchema),z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema) ]),
}).strict();

export const device_location_logUpsertWithWhereUniqueWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logUpsertWithWhereUniqueWithoutLocationInput> = z.object({
  where: z.lazy(() => device_location_logWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_location_logUpdateWithoutLocationInputSchema),z.lazy(() => device_location_logUncheckedUpdateWithoutLocationInputSchema) ]),
  create: z.union([ z.lazy(() => device_location_logCreateWithoutLocationInputSchema),z.lazy(() => device_location_logUncheckedCreateWithoutLocationInputSchema) ]),
}).strict();

export const device_location_logUpdateWithWhereUniqueWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logUpdateWithWhereUniqueWithoutLocationInput> = z.object({
  where: z.lazy(() => device_location_logWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_location_logUpdateWithoutLocationInputSchema),z.lazy(() => device_location_logUncheckedUpdateWithoutLocationInputSchema) ]),
}).strict();

export const device_location_logUpdateManyWithWhereWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logUpdateManyWithWhereWithoutLocationInput> = z.object({
  where: z.lazy(() => device_location_logScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_location_logUpdateManyMutationInputSchema),z.lazy(() => device_location_logUncheckedUpdateManyWithoutLocationInputSchema) ]),
}).strict();

export const client_branchUpsertWithoutLocationInputSchema: z.ZodType<Prisma.client_branchUpsertWithoutLocationInput> = z.object({
  update: z.union([ z.lazy(() => client_branchUpdateWithoutLocationInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutLocationInputSchema) ]),
  create: z.union([ z.lazy(() => client_branchCreateWithoutLocationInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutLocationInputSchema) ]),
  where: z.lazy(() => client_branchWhereInputSchema).optional()
}).strict();

export const client_branchUpdateToOneWithWhereWithoutLocationInputSchema: z.ZodType<Prisma.client_branchUpdateToOneWithWhereWithoutLocationInput> = z.object({
  where: z.lazy(() => client_branchWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => client_branchUpdateWithoutLocationInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutLocationInputSchema) ]),
}).strict();

export const client_branchUpdateWithoutLocationInputSchema: z.ZodType<Prisma.client_branchUpdateWithoutLocationInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  client: z.lazy(() => clientUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  client_rate: z.lazy(() => client_rateUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  sigungu: z.lazy(() => sigunguUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateWithoutLocationInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateWithoutLocationInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const warehouseUpsertWithoutLocationInputSchema: z.ZodType<Prisma.warehouseUpsertWithoutLocationInput> = z.object({
  update: z.union([ z.lazy(() => warehouseUpdateWithoutLocationInputSchema),z.lazy(() => warehouseUncheckedUpdateWithoutLocationInputSchema) ]),
  create: z.union([ z.lazy(() => warehouseCreateWithoutLocationInputSchema),z.lazy(() => warehouseUncheckedCreateWithoutLocationInputSchema) ]),
  where: z.lazy(() => warehouseWhereInputSchema).optional()
}).strict();

export const warehouseUpdateToOneWithWhereWithoutLocationInputSchema: z.ZodType<Prisma.warehouseUpdateToOneWithWhereWithoutLocationInput> = z.object({
  where: z.lazy(() => warehouseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => warehouseUpdateWithoutLocationInputSchema),z.lazy(() => warehouseUncheckedUpdateWithoutLocationInputSchema) ]),
}).strict();

export const warehouseUpdateWithoutLocationInputSchema: z.ZodType<Prisma.warehouseUpdateWithoutLocationInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutWarehouseNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutWarehouseNestedInputSchema).optional()
}).strict();

export const warehouseUncheckedUpdateWithoutLocationInputSchema: z.ZodType<Prisma.warehouseUncheckedUpdateWithoutLocationInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutWarehouseNestedInputSchema).optional()
}).strict();

export const device_optionCreateWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionCreateWithoutOption_modelInput> = z.object({
  device_option_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  device: z.lazy(() => deviceCreateNestedOneWithoutDevice_optionInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedOneWithoutDevice_optionInputSchema).optional()
}).strict();

export const device_optionUncheckedCreateWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionUncheckedCreateWithoutOption_modelInput> = z.object({
  device_option_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  location_warehouse_id: z.coerce.number().nullable().optional().nullable(),
  location_device_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_optionCreateOrConnectWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionCreateOrConnectWithoutOption_modelInput> = z.object({
  where: z.lazy(() => device_optionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_optionCreateWithoutOption_modelInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutOption_modelInputSchema) ]),
}).strict();

export const device_optionCreateManyOption_modelInputEnvelopeSchema: z.ZodType<Prisma.device_optionCreateManyOption_modelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_optionCreateManyOption_modelInputSchema),z.lazy(() => device_optionCreateManyOption_modelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_option_compatibilityCreateWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityCreateWithoutOption_modelInput> = z.object({
  device_model: z.lazy(() => device_modelCreateNestedOneWithoutDevice_option_compatibilityInputSchema)
}).strict();

export const device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedCreateWithoutOption_modelInput> = z.object({
  device_model_id: z.coerce.number()
}).strict();

export const device_option_compatibilityCreateOrConnectWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityCreateOrConnectWithoutOption_modelInput> = z.object({
  where: z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema) ]),
}).strict();

export const device_option_compatibilityCreateManyOption_modelInputEnvelopeSchema: z.ZodType<Prisma.device_option_compatibilityCreateManyOption_modelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_option_compatibilityCreateManyOption_modelInputSchema),z.lazy(() => device_option_compatibilityCreateManyOption_modelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_optionUpsertWithWhereUniqueWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionUpsertWithWhereUniqueWithoutOption_modelInput> = z.object({
  where: z.lazy(() => device_optionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_optionUpdateWithoutOption_modelInputSchema),z.lazy(() => device_optionUncheckedUpdateWithoutOption_modelInputSchema) ]),
  create: z.union([ z.lazy(() => device_optionCreateWithoutOption_modelInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutOption_modelInputSchema) ]),
}).strict();

export const device_optionUpdateWithWhereUniqueWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionUpdateWithWhereUniqueWithoutOption_modelInput> = z.object({
  where: z.lazy(() => device_optionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_optionUpdateWithoutOption_modelInputSchema),z.lazy(() => device_optionUncheckedUpdateWithoutOption_modelInputSchema) ]),
}).strict();

export const device_optionUpdateManyWithWhereWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionUpdateManyWithWhereWithoutOption_modelInput> = z.object({
  where: z.lazy(() => device_optionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_optionUpdateManyMutationInputSchema),z.lazy(() => device_optionUncheckedUpdateManyWithoutOption_modelInputSchema) ]),
}).strict();

export const device_option_compatibilityUpsertWithWhereUniqueWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUpsertWithWhereUniqueWithoutOption_modelInput> = z.object({
  where: z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_option_compatibilityUpdateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedUpdateWithoutOption_modelInputSchema) ]),
  create: z.union([ z.lazy(() => device_option_compatibilityCreateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedCreateWithoutOption_modelInputSchema) ]),
}).strict();

export const device_option_compatibilityUpdateWithWhereUniqueWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUpdateWithWhereUniqueWithoutOption_modelInput> = z.object({
  where: z.lazy(() => device_option_compatibilityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_option_compatibilityUpdateWithoutOption_modelInputSchema),z.lazy(() => device_option_compatibilityUncheckedUpdateWithoutOption_modelInputSchema) ]),
}).strict();

export const device_option_compatibilityUpdateManyWithWhereWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUpdateManyWithWhereWithoutOption_modelInput> = z.object({
  where: z.lazy(() => device_option_compatibilityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_option_compatibilityUpdateManyMutationInputSchema),z.lazy(() => device_option_compatibilityUncheckedUpdateManyWithoutOption_modelInputSchema) ]),
}).strict();

export const sigunguCreateWithoutSidoInputSchema: z.ZodType<Prisma.sigunguCreateWithoutSidoInput> = z.object({
  sigungu_id: z.coerce.number(),
  sigungu_name: z.string().max(45),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutSigunguInputSchema).optional()
}).strict();

export const sigunguUncheckedCreateWithoutSidoInputSchema: z.ZodType<Prisma.sigunguUncheckedCreateWithoutSidoInput> = z.object({
  sigungu_id: z.coerce.number(),
  sigungu_name: z.string().max(45),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutSigunguInputSchema).optional()
}).strict();

export const sigunguCreateOrConnectWithoutSidoInputSchema: z.ZodType<Prisma.sigunguCreateOrConnectWithoutSidoInput> = z.object({
  where: z.lazy(() => sigunguWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sigunguCreateWithoutSidoInputSchema),z.lazy(() => sigunguUncheckedCreateWithoutSidoInputSchema) ]),
}).strict();

export const sigunguCreateManySidoInputEnvelopeSchema: z.ZodType<Prisma.sigunguCreateManySidoInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => sigunguCreateManySidoInputSchema),z.lazy(() => sigunguCreateManySidoInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const sigunguUpsertWithWhereUniqueWithoutSidoInputSchema: z.ZodType<Prisma.sigunguUpsertWithWhereUniqueWithoutSidoInput> = z.object({
  where: z.lazy(() => sigunguWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => sigunguUpdateWithoutSidoInputSchema),z.lazy(() => sigunguUncheckedUpdateWithoutSidoInputSchema) ]),
  create: z.union([ z.lazy(() => sigunguCreateWithoutSidoInputSchema),z.lazy(() => sigunguUncheckedCreateWithoutSidoInputSchema) ]),
}).strict();

export const sigunguUpdateWithWhereUniqueWithoutSidoInputSchema: z.ZodType<Prisma.sigunguUpdateWithWhereUniqueWithoutSidoInput> = z.object({
  where: z.lazy(() => sigunguWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => sigunguUpdateWithoutSidoInputSchema),z.lazy(() => sigunguUncheckedUpdateWithoutSidoInputSchema) ]),
}).strict();

export const sigunguUpdateManyWithWhereWithoutSidoInputSchema: z.ZodType<Prisma.sigunguUpdateManyWithWhereWithoutSidoInput> = z.object({
  where: z.lazy(() => sigunguScalarWhereInputSchema),
  data: z.union([ z.lazy(() => sigunguUpdateManyMutationInputSchema),z.lazy(() => sigunguUncheckedUpdateManyWithoutSidoInputSchema) ]),
}).strict();

export const sigunguScalarWhereInputSchema: z.ZodType<Prisma.sigunguScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => sigunguScalarWhereInputSchema),z.lazy(() => sigunguScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => sigunguScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => sigunguScalarWhereInputSchema),z.lazy(() => sigunguScalarWhereInputSchema).array() ]).optional(),
  sigungu_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  sigungu_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sido_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const client_branchCreateWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchCreateWithoutSigunguInput> = z.object({
  client_branch_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callCreateNestedManyWithoutClient_branchInputSchema).optional(),
  client: z.lazy(() => clientCreateNestedOneWithoutClient_branchInputSchema),
  client_rate: z.lazy(() => client_rateCreateNestedOneWithoutClient_branchInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutClient_branchInputSchema),
  location: z.lazy(() => locationCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchUncheckedCreateWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchUncheckedCreateWithoutSigunguInput> = z.object({
  client_branch_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional(),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional(),
  location: z.lazy(() => locationUncheckedCreateNestedManyWithoutClient_branchInputSchema).optional()
}).strict();

export const client_branchCreateOrConnectWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchCreateOrConnectWithoutSigunguInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => client_branchCreateWithoutSigunguInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutSigunguInputSchema) ]),
}).strict();

export const client_branchCreateManySigunguInputEnvelopeSchema: z.ZodType<Prisma.client_branchCreateManySigunguInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => client_branchCreateManySigunguInputSchema),z.lazy(() => client_branchCreateManySigunguInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const sidoCreateWithoutSigunguInputSchema: z.ZodType<Prisma.sidoCreateWithoutSigunguInput> = z.object({
  sido_id: z.coerce.number(),
  sido_name: z.string().max(45).nullable().optional().nullable()
}).strict();

export const sidoUncheckedCreateWithoutSigunguInputSchema: z.ZodType<Prisma.sidoUncheckedCreateWithoutSigunguInput> = z.object({
  sido_id: z.coerce.number(),
  sido_name: z.string().max(45).nullable().optional().nullable()
}).strict();

export const sidoCreateOrConnectWithoutSigunguInputSchema: z.ZodType<Prisma.sidoCreateOrConnectWithoutSigunguInput> = z.object({
  where: z.lazy(() => sidoWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => sidoCreateWithoutSigunguInputSchema),z.lazy(() => sidoUncheckedCreateWithoutSigunguInputSchema) ]),
}).strict();

export const client_branchUpsertWithWhereUniqueWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchUpsertWithWhereUniqueWithoutSigunguInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => client_branchUpdateWithoutSigunguInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutSigunguInputSchema) ]),
  create: z.union([ z.lazy(() => client_branchCreateWithoutSigunguInputSchema),z.lazy(() => client_branchUncheckedCreateWithoutSigunguInputSchema) ]),
}).strict();

export const client_branchUpdateWithWhereUniqueWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchUpdateWithWhereUniqueWithoutSigunguInput> = z.object({
  where: z.lazy(() => client_branchWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => client_branchUpdateWithoutSigunguInputSchema),z.lazy(() => client_branchUncheckedUpdateWithoutSigunguInputSchema) ]),
}).strict();

export const client_branchUpdateManyWithWhereWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchUpdateManyWithWhereWithoutSigunguInput> = z.object({
  where: z.lazy(() => client_branchScalarWhereInputSchema),
  data: z.union([ z.lazy(() => client_branchUpdateManyMutationInputSchema),z.lazy(() => client_branchUncheckedUpdateManyWithoutSigunguInputSchema) ]),
}).strict();

export const sidoUpsertWithoutSigunguInputSchema: z.ZodType<Prisma.sidoUpsertWithoutSigunguInput> = z.object({
  update: z.union([ z.lazy(() => sidoUpdateWithoutSigunguInputSchema),z.lazy(() => sidoUncheckedUpdateWithoutSigunguInputSchema) ]),
  create: z.union([ z.lazy(() => sidoCreateWithoutSigunguInputSchema),z.lazy(() => sidoUncheckedCreateWithoutSigunguInputSchema) ]),
  where: z.lazy(() => sidoWhereInputSchema).optional()
}).strict();

export const sidoUpdateToOneWithWhereWithoutSigunguInputSchema: z.ZodType<Prisma.sidoUpdateToOneWithWhereWithoutSigunguInput> = z.object({
  where: z.lazy(() => sidoWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => sidoUpdateWithoutSigunguInputSchema),z.lazy(() => sidoUncheckedUpdateWithoutSigunguInputSchema) ]),
}).strict();

export const sidoUpdateWithoutSigunguInputSchema: z.ZodType<Prisma.sidoUpdateWithoutSigunguInput> = z.object({
  sido_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sido_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const sidoUncheckedUpdateWithoutSigunguInputSchema: z.ZodType<Prisma.sidoUncheckedUpdateWithoutSigunguInput> = z.object({
  sido_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sido_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const callCreateWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callCreateWithoutUser_call_receiver_idTouserInput> = z.object({
  call_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  transferred_at: z.coerce.date().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  call_type: z.lazy(() => call_typeCreateNestedOneWithoutCallInputSchema),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutCallInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutCallInputSchema).optional(),
  device: z.lazy(() => deviceCreateNestedOneWithoutCallInputSchema).optional(),
  user_call_assigner_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_assigner_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callUncheckedCreateWithoutUser_call_receiver_idTouserInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callCreateOrConnectWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callCreateOrConnectWithoutUser_call_receiver_idTouserInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema) ]),
}).strict();

export const callCreateManyUser_call_receiver_idTouserInputEnvelopeSchema: z.ZodType<Prisma.callCreateManyUser_call_receiver_idTouserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => callCreateManyUser_call_receiver_idTouserInputSchema),z.lazy(() => callCreateManyUser_call_receiver_idTouserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const callCreateWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callCreateWithoutUser_call_assigner_idTouserInput> = z.object({
  call_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  transferred_at: z.coerce.date().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  call_type: z.lazy(() => call_typeCreateNestedOneWithoutCallInputSchema),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutCallInputSchema),
  dept: z.lazy(() => deptCreateNestedOneWithoutCallInputSchema).optional(),
  device: z.lazy(() => deviceCreateNestedOneWithoutCallInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userCreateNestedOneWithoutCall_call_receiver_idTouserInputSchema),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callUncheckedCreateWithoutUser_call_assigner_idTouserInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutCallInputSchema).optional()
}).strict();

export const callCreateOrConnectWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callCreateOrConnectWithoutUser_call_assigner_idTouserInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema) ]),
}).strict();

export const callCreateManyUser_call_assigner_idTouserInputEnvelopeSchema: z.ZodType<Prisma.callCreateManyUser_call_assigner_idTouserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => callCreateManyUser_call_assigner_idTouserInputSchema),z.lazy(() => callCreateManyUser_call_assigner_idTouserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalCreateWithoutUser_device_approval_requester_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutDevice_approvalInputSchema),
  device_approval: z.lazy(() => device_approvalCreateNestedOneWithoutOther_device_approvalInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutDevice_approvalInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeCreateNestedOneWithoutDevice_approvalInputSchema),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  user_device_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_approver_idTouserInputSchema).optional()
}).strict();

export const device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutDevice_approvalInputSchema).optional()
}).strict();

export const device_approvalCreateOrConnectWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalCreateOrConnectWithoutUser_device_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema) ]),
}).strict();

export const device_approvalCreateManyUser_device_approval_requester_idTouserInputEnvelopeSchema: z.ZodType<Prisma.device_approvalCreateManyUser_device_approval_requester_idTouserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_approvalCreateManyUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalCreateManyUser_device_approval_requester_idTouserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalCreateWithoutUser_device_approval_approver_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutDevice_approvalInputSchema),
  device_approval: z.lazy(() => device_approvalCreateNestedOneWithoutOther_device_approvalInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutDevice_approvalInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeCreateNestedOneWithoutDevice_approvalInputSchema),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_origin_location_idTolocationInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationCreateNestedOneWithoutDevice_approval_device_approval_destination_location_idTolocationInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutDevice_approval_device_approval_requester_idTouserInputSchema)
}).strict();

export const device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutDevice_approvalInputSchema).optional()
}).strict();

export const device_approvalCreateOrConnectWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalCreateOrConnectWithoutUser_device_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema) ]),
}).strict();

export const device_approvalCreateManyUser_device_approval_approver_idTouserInputEnvelopeSchema: z.ZodType<Prisma.device_approvalCreateManyUser_device_approval_approver_idTouserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_approvalCreateManyUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalCreateManyUser_device_approval_approver_idTouserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_inspection_logCreateWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logCreateWithoutUserInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceCreateNestedOneWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceInputSchema),
  call: z.lazy(() => callCreateNestedOneWithoutDevice_inspection_logInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedCreateWithoutUserInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  call_id: z.coerce.number().nullable().optional().nullable(),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutDevice_inspection_logInputSchema).optional()
}).strict();

export const device_inspection_logCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutUserInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const device_inspection_logCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.device_inspection_logCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_inspection_logCreateManyUserInputSchema),z.lazy(() => device_inspection_logCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const device_install_infoCreateWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoCreateWithoutUserInput> = z.object({
  mgmt_num: z.string().max(50),
  ip_address: z.string().max(50).nullable().optional().nullable(),
  subnet_mask: z.string().max(50).nullable().optional().nullable(),
  gateway: z.string().max(50).nullable().optional().nullable(),
  dns1: z.string().max(50).nullable().optional().nullable(),
  dns2: z.string().max(50).nullable().optional().nullable(),
  device: z.lazy(() => deviceCreateNestedOneWithoutDevice_install_infoInputSchema)
}).strict();

export const device_install_infoUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoUncheckedCreateWithoutUserInput> = z.object({
  device_id: z.coerce.number(),
  mgmt_num: z.string().max(50),
  ip_address: z.string().max(50).nullable().optional().nullable(),
  subnet_mask: z.string().max(50).nullable().optional().nullable(),
  gateway: z.string().max(50).nullable().optional().nullable(),
  dns1: z.string().max(50).nullable().optional().nullable(),
  dns2: z.string().max(50).nullable().optional().nullable()
}).strict();

export const device_install_infoCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => device_install_infoWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutUserInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const device_install_infoCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.device_install_infoCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_install_infoCreateManyUserInputSchema),z.lazy(() => device_install_infoCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutInspection_approvalInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutInspection_approvalInputSchema),
  user_inspection_approval_requester_idTouser: z.lazy(() => userCreateNestedOneWithoutInspection_approval_inspection_approval_requester_idTouserInputSchema)
}).strict();

export const inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number().nullable().optional().nullable(),
  device_inspection_log_id: z.coerce.number(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const inspection_approvalCreateOrConnectWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalCreateOrConnectWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema) ]),
}).strict();

export const inspection_approvalCreateManyUser_inspection_approval_approver_idTouserInputEnvelopeSchema: z.ZodType<Prisma.inspection_approvalCreateManyUser_inspection_approval_approver_idTouserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_approver_idTouserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutInspection_approvalInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedOneWithoutInspection_approvalInputSchema),
  user_inspection_approval_approver_idTouser: z.lazy(() => userCreateNestedOneWithoutInspection_approval_inspection_approval_approver_idTouserInputSchema).optional()
}).strict();

export const inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number().nullable().optional().nullable(),
  device_inspection_log_id: z.coerce.number(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const inspection_approvalCreateOrConnectWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalCreateOrConnectWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema) ]),
}).strict();

export const inspection_approvalCreateManyUser_inspection_approval_requester_idTouserInputEnvelopeSchema: z.ZodType<Prisma.inspection_approvalCreateManyUser_inspection_approval_requester_idTouserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalCreateManyUser_inspection_approval_requester_idTouserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const approval_roleCreateWithoutUserInputSchema: z.ZodType<Prisma.approval_roleCreateWithoutUserInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutOther_approval_roleInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.approval_roleUncheckedCreateWithoutUserInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  upper_role_id: z.coerce.number().nullable().optional().nullable(),
  other_approval_role: z.lazy(() => approval_roleUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.approval_roleCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => approval_roleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutUserInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const deptCreateWithoutUserInputSchema: z.ZodType<Prisma.deptCreateWithoutUserInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutDeptInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutOther_deptInputSchema).optional(),
  other_dept: z.lazy(() => deptCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.deptUncheckedCreateWithoutUserInput> = z.object({
  dept_id: z.coerce.number(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.deptCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => deptWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deptCreateWithoutUserInputSchema),z.lazy(() => deptUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const user_positionCreateWithoutUserInputSchema: z.ZodType<Prisma.user_positionCreateWithoutUserInput> = z.object({
  user_position_id: z.coerce.number(),
  position_name: z.string().max(45)
}).strict();

export const user_positionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.user_positionUncheckedCreateWithoutUserInput> = z.object({
  user_position_id: z.coerce.number(),
  position_name: z.string().max(45)
}).strict();

export const user_positionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.user_positionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => user_positionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => user_positionCreateWithoutUserInputSchema),z.lazy(() => user_positionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const user_role_assignmentCreateWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentCreateWithoutUserInput> = z.object({
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUser_role_assignmentInputSchema)
}).strict();

export const user_role_assignmentUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedCreateWithoutUserInput> = z.object({
  role_id: z.coerce.number()
}).strict();

export const user_role_assignmentCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => user_role_assignmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutUserInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const user_role_assignmentCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.user_role_assignmentCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => user_role_assignmentCreateManyUserInputSchema),z.lazy(() => user_role_assignmentCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const callUpsertWithWhereUniqueWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callUpsertWithWhereUniqueWithoutUser_call_receiver_idTouserInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => callUpdateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUncheckedUpdateWithoutUser_call_receiver_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_receiver_idTouserInputSchema) ]),
}).strict();

export const callUpdateWithWhereUniqueWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callUpdateWithWhereUniqueWithoutUser_call_receiver_idTouserInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => callUpdateWithoutUser_call_receiver_idTouserInputSchema),z.lazy(() => callUncheckedUpdateWithoutUser_call_receiver_idTouserInputSchema) ]),
}).strict();

export const callUpdateManyWithWhereWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callUpdateManyWithWhereWithoutUser_call_receiver_idTouserInput> = z.object({
  where: z.lazy(() => callScalarWhereInputSchema),
  data: z.union([ z.lazy(() => callUpdateManyMutationInputSchema),z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserInputSchema) ]),
}).strict();

export const callUpsertWithWhereUniqueWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callUpsertWithWhereUniqueWithoutUser_call_assigner_idTouserInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => callUpdateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUncheckedUpdateWithoutUser_call_assigner_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => callCreateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUncheckedCreateWithoutUser_call_assigner_idTouserInputSchema) ]),
}).strict();

export const callUpdateWithWhereUniqueWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callUpdateWithWhereUniqueWithoutUser_call_assigner_idTouserInput> = z.object({
  where: z.lazy(() => callWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => callUpdateWithoutUser_call_assigner_idTouserInputSchema),z.lazy(() => callUncheckedUpdateWithoutUser_call_assigner_idTouserInputSchema) ]),
}).strict();

export const callUpdateManyWithWhereWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callUpdateManyWithWhereWithoutUser_call_assigner_idTouserInput> = z.object({
  where: z.lazy(() => callScalarWhereInputSchema),
  data: z.union([ z.lazy(() => callUpdateManyMutationInputSchema),z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserInputSchema) ]),
}).strict();

export const device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_approvalUpdateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutUser_device_approval_requester_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_requester_idTouserInputSchema) ]),
}).strict();

export const device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateWithoutUser_device_approval_requester_idTouserInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutUser_device_approval_requester_idTouserInputSchema) ]),
}).strict();

export const device_approvalUpdateManyWithWhereWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithWhereWithoutUser_device_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => device_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateManyMutationInputSchema),z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserInputSchema) ]),
}).strict();

export const device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalUpsertWithWhereUniqueWithoutUser_device_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_approvalUpdateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutUser_device_approval_approver_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => device_approvalCreateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUncheckedCreateWithoutUser_device_approval_approver_idTouserInputSchema) ]),
}).strict();

export const device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalUpdateWithWhereUniqueWithoutUser_device_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => device_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateWithoutUser_device_approval_approver_idTouserInputSchema),z.lazy(() => device_approvalUncheckedUpdateWithoutUser_device_approval_approver_idTouserInputSchema) ]),
}).strict();

export const device_approvalUpdateManyWithWhereWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalUpdateManyWithWhereWithoutUser_device_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => device_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_approvalUpdateManyMutationInputSchema),z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserInputSchema) ]),
}).strict();

export const device_inspection_logUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_inspection_logUpdateWithoutUserInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => device_inspection_logCreateWithoutUserInputSchema),z.lazy(() => device_inspection_logUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const device_inspection_logUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => device_inspection_logWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_inspection_logUpdateWithoutUserInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const device_inspection_logUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => device_inspection_logScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_inspection_logUpdateManyMutationInputSchema),z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const device_install_infoUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => device_install_infoWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_install_infoUpdateWithoutUserInputSchema),z.lazy(() => device_install_infoUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => device_install_infoCreateWithoutUserInputSchema),z.lazy(() => device_install_infoUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const device_install_infoUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => device_install_infoWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_install_infoUpdateWithoutUserInputSchema),z.lazy(() => device_install_infoUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const device_install_infoUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => device_install_infoScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_install_infoUpdateManyMutationInputSchema),z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const device_install_infoScalarWhereInputSchema: z.ZodType<Prisma.device_install_infoScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => device_install_infoScalarWhereInputSchema),z.lazy(() => device_install_infoScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => device_install_infoScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => device_install_infoScalarWhereInputSchema),z.lazy(() => device_install_infoScalarWhereInputSchema).array() ]).optional(),
  device_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  installer_id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mgmt_num: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ip_address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subnet_mask: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  gateway: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dns1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dns2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateWithoutUser_inspection_approval_approver_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_approver_idTouserInputSchema) ]),
}).strict();

export const inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => inspection_approvalUpdateWithoutUser_inspection_approval_approver_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateWithoutUser_inspection_approval_approver_idTouserInputSchema) ]),
}).strict();

export const inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  where: z.lazy(() => inspection_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => inspection_approvalUpdateManyMutationInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserInputSchema) ]),
}).strict();

export const inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUpsertWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => inspection_approvalUpdateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateWithoutUser_inspection_approval_requester_idTouserInputSchema) ]),
  create: z.union([ z.lazy(() => inspection_approvalCreateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedCreateWithoutUser_inspection_approval_requester_idTouserInputSchema) ]),
}).strict();

export const inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUpdateWithWhereUniqueWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => inspection_approvalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => inspection_approvalUpdateWithoutUser_inspection_approval_requester_idTouserInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateWithoutUser_inspection_approval_requester_idTouserInputSchema) ]),
}).strict();

export const inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUpdateManyWithWhereWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  where: z.lazy(() => inspection_approvalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => inspection_approvalUpdateManyMutationInputSchema),z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserInputSchema) ]),
}).strict();

export const approval_roleUpsertWithoutUserInputSchema: z.ZodType<Prisma.approval_roleUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => approval_roleUpdateWithoutUserInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutUserInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => approval_roleWhereInputSchema).optional()
}).strict();

export const approval_roleUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.approval_roleUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => approval_roleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => approval_roleUpdateWithoutUserInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const approval_roleUpdateWithoutUserInputSchema: z.ZodType<Prisma.approval_roleUpdateWithoutUserInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutOther_approval_roleNestedInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const approval_roleUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.approval_roleUncheckedUpdateWithoutUserInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  upper_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_approval_role: z.lazy(() => approval_roleUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const deptUpsertWithoutUserInputSchema: z.ZodType<Prisma.deptUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => deptUpdateWithoutUserInputSchema),z.lazy(() => deptUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => deptCreateWithoutUserInputSchema),z.lazy(() => deptUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => deptWhereInputSchema).optional()
}).strict();

export const deptUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.deptUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => deptWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deptUpdateWithoutUserInputSchema),z.lazy(() => deptUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const deptUpdateWithoutUserInputSchema: z.ZodType<Prisma.deptUpdateWithoutUserInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutDeptNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutOther_deptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.deptUncheckedUpdateWithoutUserInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const user_positionUpsertWithoutUserInputSchema: z.ZodType<Prisma.user_positionUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => user_positionUpdateWithoutUserInputSchema),z.lazy(() => user_positionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => user_positionCreateWithoutUserInputSchema),z.lazy(() => user_positionUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => user_positionWhereInputSchema).optional()
}).strict();

export const user_positionUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.user_positionUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => user_positionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => user_positionUpdateWithoutUserInputSchema),z.lazy(() => user_positionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const user_positionUpdateWithoutUserInputSchema: z.ZodType<Prisma.user_positionUpdateWithoutUserInput> = z.object({
  user_position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const user_positionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.user_positionUncheckedUpdateWithoutUserInput> = z.object({
  user_position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const user_role_assignmentUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => user_role_assignmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => user_role_assignmentUpdateWithoutUserInputSchema),z.lazy(() => user_role_assignmentUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => user_role_assignmentCreateWithoutUserInputSchema),z.lazy(() => user_role_assignmentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const user_role_assignmentUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => user_role_assignmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => user_role_assignmentUpdateWithoutUserInputSchema),z.lazy(() => user_role_assignmentUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const user_role_assignmentUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => user_role_assignmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => user_role_assignmentUpdateManyMutationInputSchema),z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const userCreateWithoutUser_positionInputSchema: z.ZodType<Prisma.userCreateWithoutUser_positionInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_role_assignment: z.lazy(() => user_role_assignmentCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userUncheckedCreateWithoutUser_positionInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutUser_positionInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutUser_positionInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutUser_positionInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutUser_positionInputSchema),z.lazy(() => userUncheckedCreateWithoutUser_positionInputSchema) ]),
}).strict();

export const userCreateManyUser_positionInputEnvelopeSchema: z.ZodType<Prisma.userCreateManyUser_positionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => userCreateManyUser_positionInputSchema),z.lazy(() => userCreateManyUser_positionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const userUpsertWithWhereUniqueWithoutUser_positionInputSchema: z.ZodType<Prisma.userUpsertWithWhereUniqueWithoutUser_positionInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => userUpdateWithoutUser_positionInputSchema),z.lazy(() => userUncheckedUpdateWithoutUser_positionInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutUser_positionInputSchema),z.lazy(() => userUncheckedCreateWithoutUser_positionInputSchema) ]),
}).strict();

export const userUpdateWithWhereUniqueWithoutUser_positionInputSchema: z.ZodType<Prisma.userUpdateWithWhereUniqueWithoutUser_positionInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => userUpdateWithoutUser_positionInputSchema),z.lazy(() => userUncheckedUpdateWithoutUser_positionInputSchema) ]),
}).strict();

export const userUpdateManyWithWhereWithoutUser_positionInputSchema: z.ZodType<Prisma.userUpdateManyWithWhereWithoutUser_positionInput> = z.object({
  where: z.lazy(() => userScalarWhereInputSchema),
  data: z.union([ z.lazy(() => userUpdateManyMutationInputSchema),z.lazy(() => userUncheckedUpdateManyWithoutUser_positionInputSchema) ]),
}).strict();

export const approval_roleCreateWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.approval_roleCreateWithoutUser_role_assignmentInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutOther_approval_roleInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleUncheckedCreateWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.approval_roleUncheckedCreateWithoutUser_role_assignmentInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45),
  upper_role_id: z.coerce.number().nullable().optional().nullable(),
  other_approval_role: z.lazy(() => approval_roleUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutApproval_roleInputSchema).optional()
}).strict();

export const approval_roleCreateOrConnectWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.approval_roleCreateOrConnectWithoutUser_role_assignmentInput> = z.object({
  where: z.lazy(() => approval_roleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutUser_role_assignmentInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutUser_role_assignmentInputSchema) ]),
}).strict();

export const userCreateWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.userCreateWithoutUser_role_assignmentInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleCreateNestedOneWithoutUserInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutUserInputSchema),
  user_position: z.lazy(() => user_positionCreateNestedOneWithoutUserInputSchema)
}).strict();

export const userUncheckedCreateWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.userUncheckedCreateWithoutUser_role_assignmentInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_receiver_idTouserInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedCreateNestedManyWithoutUser_call_assigner_idTouserInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_requester_idTouserInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutUser_device_approval_approver_idTouserInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_approver_idTouserInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedCreateNestedManyWithoutUser_inspection_approval_requester_idTouserInputSchema).optional()
}).strict();

export const userCreateOrConnectWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.userCreateOrConnectWithoutUser_role_assignmentInput> = z.object({
  where: z.lazy(() => userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => userCreateWithoutUser_role_assignmentInputSchema),z.lazy(() => userUncheckedCreateWithoutUser_role_assignmentInputSchema) ]),
}).strict();

export const approval_roleUpsertWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.approval_roleUpsertWithoutUser_role_assignmentInput> = z.object({
  update: z.union([ z.lazy(() => approval_roleUpdateWithoutUser_role_assignmentInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutUser_role_assignmentInputSchema) ]),
  create: z.union([ z.lazy(() => approval_roleCreateWithoutUser_role_assignmentInputSchema),z.lazy(() => approval_roleUncheckedCreateWithoutUser_role_assignmentInputSchema) ]),
  where: z.lazy(() => approval_roleWhereInputSchema).optional()
}).strict();

export const approval_roleUpdateToOneWithWhereWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.approval_roleUpdateToOneWithWhereWithoutUser_role_assignmentInput> = z.object({
  where: z.lazy(() => approval_roleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => approval_roleUpdateWithoutUser_role_assignmentInputSchema),z.lazy(() => approval_roleUncheckedUpdateWithoutUser_role_assignmentInputSchema) ]),
}).strict();

export const approval_roleUpdateWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.approval_roleUpdateWithoutUser_role_assignmentInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutOther_approval_roleNestedInputSchema).optional(),
  other_approval_role: z.lazy(() => approval_roleUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const approval_roleUncheckedUpdateWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.approval_roleUncheckedUpdateWithoutUser_role_assignmentInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  upper_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_approval_role: z.lazy(() => approval_roleUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const userUpsertWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.userUpsertWithoutUser_role_assignmentInput> = z.object({
  update: z.union([ z.lazy(() => userUpdateWithoutUser_role_assignmentInputSchema),z.lazy(() => userUncheckedUpdateWithoutUser_role_assignmentInputSchema) ]),
  create: z.union([ z.lazy(() => userCreateWithoutUser_role_assignmentInputSchema),z.lazy(() => userUncheckedCreateWithoutUser_role_assignmentInputSchema) ]),
  where: z.lazy(() => userWhereInputSchema).optional()
}).strict();

export const userUpdateToOneWithWhereWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.userUpdateToOneWithWhereWithoutUser_role_assignmentInput> = z.object({
  where: z.lazy(() => userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => userUpdateWithoutUser_role_assignmentInputSchema),z.lazy(() => userUncheckedUpdateWithoutUser_role_assignmentInputSchema) ]),
}).strict();

export const userUpdateWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.userUpdateWithoutUser_role_assignmentInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutUser_role_assignmentInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutUser_role_assignmentInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional()
}).strict();

export const device_optionCreateWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionCreateWithoutWarehouseInput> = z.object({
  device_option_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  device: z.lazy(() => deviceCreateNestedOneWithoutDevice_optionInputSchema).optional(),
  option_model: z.lazy(() => option_modelCreateNestedOneWithoutDevice_optionInputSchema)
}).strict();

export const device_optionUncheckedCreateWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionUncheckedCreateWithoutWarehouseInput> = z.object({
  device_option_id: z.coerce.number(),
  option_model_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  location_device_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_optionCreateOrConnectWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionCreateOrConnectWithoutWarehouseInput> = z.object({
  where: z.lazy(() => device_optionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => device_optionCreateWithoutWarehouseInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutWarehouseInputSchema) ]),
}).strict();

export const device_optionCreateManyWarehouseInputEnvelopeSchema: z.ZodType<Prisma.device_optionCreateManyWarehouseInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => device_optionCreateManyWarehouseInputSchema),z.lazy(() => device_optionCreateManyWarehouseInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const locationCreateWithoutWarehouseInputSchema: z.ZodType<Prisma.locationCreateWithoutWarehouseInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logCreateNestedManyWithoutLocationInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedOneWithoutLocationInputSchema).optional()
}).strict();

export const locationUncheckedCreateWithoutWarehouseInputSchema: z.ZodType<Prisma.locationUncheckedCreateWithoutWarehouseInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  client_branch_id: z.coerce.number().nullable().optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUncheckedCreateNestedManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUncheckedCreateNestedManyWithoutLocationInputSchema).optional()
}).strict();

export const locationCreateOrConnectWithoutWarehouseInputSchema: z.ZodType<Prisma.locationCreateOrConnectWithoutWarehouseInput> = z.object({
  where: z.lazy(() => locationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => locationCreateWithoutWarehouseInputSchema),z.lazy(() => locationUncheckedCreateWithoutWarehouseInputSchema) ]),
}).strict();

export const locationCreateManyWarehouseInputEnvelopeSchema: z.ZodType<Prisma.locationCreateManyWarehouseInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => locationCreateManyWarehouseInputSchema),z.lazy(() => locationCreateManyWarehouseInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const deptCreateWithoutWarehouseInputSchema: z.ZodType<Prisma.deptCreateWithoutWarehouseInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchCreateNestedManyWithoutDeptInputSchema).optional(),
  dept: z.lazy(() => deptCreateNestedOneWithoutOther_deptInputSchema).optional(),
  other_dept: z.lazy(() => deptCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptUncheckedCreateWithoutWarehouseInputSchema: z.ZodType<Prisma.deptUncheckedCreateWithoutWarehouseInput> = z.object({
  dept_id: z.coerce.number(),
  parent_dept_id: z.coerce.number().nullable().optional().nullable(),
  dept_name: z.string().max(100),
  call: z.lazy(() => callUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedCreateNestedManyWithoutDeptInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_owner_dept_idTodeptInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedCreateNestedManyWithoutDept_device_mgmt_dept_idTodeptInputSchema).optional(),
  user: z.lazy(() => userUncheckedCreateNestedManyWithoutDeptInputSchema).optional()
}).strict();

export const deptCreateOrConnectWithoutWarehouseInputSchema: z.ZodType<Prisma.deptCreateOrConnectWithoutWarehouseInput> = z.object({
  where: z.lazy(() => deptWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => deptCreateWithoutWarehouseInputSchema),z.lazy(() => deptUncheckedCreateWithoutWarehouseInputSchema) ]),
}).strict();

export const device_optionUpsertWithWhereUniqueWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionUpsertWithWhereUniqueWithoutWarehouseInput> = z.object({
  where: z.lazy(() => device_optionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => device_optionUpdateWithoutWarehouseInputSchema),z.lazy(() => device_optionUncheckedUpdateWithoutWarehouseInputSchema) ]),
  create: z.union([ z.lazy(() => device_optionCreateWithoutWarehouseInputSchema),z.lazy(() => device_optionUncheckedCreateWithoutWarehouseInputSchema) ]),
}).strict();

export const device_optionUpdateWithWhereUniqueWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionUpdateWithWhereUniqueWithoutWarehouseInput> = z.object({
  where: z.lazy(() => device_optionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => device_optionUpdateWithoutWarehouseInputSchema),z.lazy(() => device_optionUncheckedUpdateWithoutWarehouseInputSchema) ]),
}).strict();

export const device_optionUpdateManyWithWhereWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionUpdateManyWithWhereWithoutWarehouseInput> = z.object({
  where: z.lazy(() => device_optionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => device_optionUpdateManyMutationInputSchema),z.lazy(() => device_optionUncheckedUpdateManyWithoutWarehouseInputSchema) ]),
}).strict();

export const locationUpsertWithWhereUniqueWithoutWarehouseInputSchema: z.ZodType<Prisma.locationUpsertWithWhereUniqueWithoutWarehouseInput> = z.object({
  where: z.lazy(() => locationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => locationUpdateWithoutWarehouseInputSchema),z.lazy(() => locationUncheckedUpdateWithoutWarehouseInputSchema) ]),
  create: z.union([ z.lazy(() => locationCreateWithoutWarehouseInputSchema),z.lazy(() => locationUncheckedCreateWithoutWarehouseInputSchema) ]),
}).strict();

export const locationUpdateWithWhereUniqueWithoutWarehouseInputSchema: z.ZodType<Prisma.locationUpdateWithWhereUniqueWithoutWarehouseInput> = z.object({
  where: z.lazy(() => locationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => locationUpdateWithoutWarehouseInputSchema),z.lazy(() => locationUncheckedUpdateWithoutWarehouseInputSchema) ]),
}).strict();

export const locationUpdateManyWithWhereWithoutWarehouseInputSchema: z.ZodType<Prisma.locationUpdateManyWithWhereWithoutWarehouseInput> = z.object({
  where: z.lazy(() => locationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => locationUpdateManyMutationInputSchema),z.lazy(() => locationUncheckedUpdateManyWithoutWarehouseInputSchema) ]),
}).strict();

export const deptUpsertWithoutWarehouseInputSchema: z.ZodType<Prisma.deptUpsertWithoutWarehouseInput> = z.object({
  update: z.union([ z.lazy(() => deptUpdateWithoutWarehouseInputSchema),z.lazy(() => deptUncheckedUpdateWithoutWarehouseInputSchema) ]),
  create: z.union([ z.lazy(() => deptCreateWithoutWarehouseInputSchema),z.lazy(() => deptUncheckedCreateWithoutWarehouseInputSchema) ]),
  where: z.lazy(() => deptWhereInputSchema).optional()
}).strict();

export const deptUpdateToOneWithWhereWithoutWarehouseInputSchema: z.ZodType<Prisma.deptUpdateToOneWithWhereWithoutWarehouseInput> = z.object({
  where: z.lazy(() => deptWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => deptUpdateWithoutWarehouseInputSchema),z.lazy(() => deptUncheckedUpdateWithoutWarehouseInputSchema) ]),
}).strict();

export const deptUpdateWithoutWarehouseInputSchema: z.ZodType<Prisma.deptUpdateWithoutWarehouseInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutDeptNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutOther_deptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUncheckedUpdateWithoutWarehouseInputSchema: z.ZodType<Prisma.deptUncheckedUpdateWithoutWarehouseInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const approval_roleCreateManyApproval_roleInputSchema: z.ZodType<Prisma.approval_roleCreateManyApproval_roleInput> = z.object({
  role_id: z.coerce.number(),
  role_name: z.string().max(45)
}).strict();

export const device_approvalCreateManyApproval_roleInputSchema: z.ZodType<Prisma.device_approvalCreateManyApproval_roleInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const inspection_approvalCreateManyApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalCreateManyApproval_roleInput> = z.object({
  approval_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  device_inspection_log_id: z.coerce.number(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const userCreateManyApproval_roleInputSchema: z.ZodType<Prisma.userCreateManyApproval_roleInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional()
}).strict();

export const user_role_assignmentCreateManyApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentCreateManyApproval_roleInput> = z.object({
  approver_id: z.coerce.number()
}).strict();

export const approval_roleUpdateWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleUpdateWithoutApproval_roleInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  other_approval_role: z.lazy(() => approval_roleUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const approval_roleUncheckedUpdateWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleUncheckedUpdateWithoutApproval_roleInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  other_approval_role: z.lazy(() => approval_roleUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutApproval_roleNestedInputSchema).optional()
}).strict();

export const approval_roleUncheckedUpdateManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.approval_roleUncheckedUpdateManyWithoutApproval_roleInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_approvalUpdateWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalUpdateWithoutApproval_roleInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_approval: z.lazy(() => device_approvalUpdateOneWithoutOther_device_approvalNestedInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalUpdateManyWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutDevice_approval_device_approval_requester_idTouserNestedInputSchema).optional(),
  user_device_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutDevice_approval_device_approval_approver_idTouserNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateWithoutApproval_roleInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approvalNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutApproval_roleInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const inspection_approvalUpdateWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalUpdateWithoutApproval_roleInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateOneRequiredWithoutInspection_approvalNestedInputSchema).optional(),
  user_inspection_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutInspection_approval_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  user_inspection_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutInspection_approval_inspection_approval_requester_idTouserNestedInputSchema).optional()
}).strict();

export const inspection_approvalUncheckedUpdateWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateWithoutApproval_roleInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const inspection_approvalUncheckedUpdateManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateManyWithoutApproval_roleInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const userUpdateWithoutApproval_roleInputSchema: z.ZodType<Prisma.userUpdateWithoutApproval_roleInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutApproval_roleInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutApproval_roleInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.userUncheckedUpdateManyWithoutApproval_roleInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const user_role_assignmentUpdateWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentUpdateWithoutApproval_roleInput> = z.object({
  user: z.lazy(() => userUpdateOneRequiredWithoutUser_role_assignmentNestedInputSchema).optional()
}).strict();

export const user_role_assignmentUncheckedUpdateWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedUpdateWithoutApproval_roleInput> = z.object({
  approver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const user_role_assignmentUncheckedUpdateManyWithoutApproval_roleInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedUpdateManyWithoutApproval_roleInput> = z.object({
  approver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_inspection_logCreateManyCallInputSchema: z.ZodType<Prisma.device_inspection_logCreateManyCallInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  inspector_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable()
}).strict();

export const device_inspection_logUpdateWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logUpdateWithoutCallInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceUpdateOneRequiredWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutDevice_inspection_logNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedUpdateWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateWithoutCallInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspector_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedUpdateManyWithoutCallInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateManyWithoutCallInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspector_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const callCreateManyCall_typeInputSchema: z.ZodType<Prisma.callCreateManyCall_typeInput> = z.object({
  call_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable()
}).strict();

export const call_typeCreateManyCall_typeInputSchema: z.ZodType<Prisma.call_typeCreateManyCall_typeInput> = z.object({
  call_type_id: z.coerce.number(),
  call_type_name: z.string().max(50)
}).strict();

export const callUpdateWithoutCall_typeInputSchema: z.ZodType<Prisma.callUpdateWithoutCall_typeInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_branch: z.lazy(() => client_branchUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutCallNestedInputSchema).optional(),
  device: z.lazy(() => deviceUpdateOneWithoutCallNestedInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userUpdateOneRequiredWithoutCall_call_receiver_idTouserNestedInputSchema).optional(),
  user_call_assigner_idTouser: z.lazy(() => userUpdateOneWithoutCall_call_assigner_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateWithoutCall_typeInputSchema: z.ZodType<Prisma.callUncheckedUpdateWithoutCall_typeInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateManyWithoutCall_typeInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutCall_typeInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const call_typeUpdateWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeUpdateWithoutCall_typeInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutCall_typeNestedInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeUpdateManyWithoutCall_typeNestedInputSchema).optional()
}).strict();

export const call_typeUncheckedUpdateWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeUncheckedUpdateWithoutCall_typeInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutCall_typeNestedInputSchema).optional(),
  other_call_type: z.lazy(() => call_typeUncheckedUpdateManyWithoutCall_typeNestedInputSchema).optional()
}).strict();

export const call_typeUncheckedUpdateManyWithoutCall_typeInputSchema: z.ZodType<Prisma.call_typeUncheckedUpdateManyWithoutCall_typeInput> = z.object({
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const clientCreateManyClientInputSchema: z.ZodType<Prisma.clientCreateManyClientInput> = z.object({
  client_id: z.coerce.number(),
  default_client_branch_rate_id: z.coerce.number().nullable().optional().nullable(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional()
}).strict();

export const client_branchCreateManyClientInputSchema: z.ZodType<Prisma.client_branchCreateManyClientInput> = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional()
}).strict();

export const clientUpdateWithoutClientInputSchema: z.ZodType<Prisma.clientUpdateWithoutClientInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  other_client: z.lazy(() => clientUpdateManyWithoutClientNestedInputSchema).optional(),
  client_rate: z.lazy(() => client_rateUpdateOneWithoutClientNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutClientNestedInputSchema).optional()
}).strict();

export const clientUncheckedUpdateWithoutClientInputSchema: z.ZodType<Prisma.clientUncheckedUpdateWithoutClientInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  default_client_branch_rate_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  other_client: z.lazy(() => clientUncheckedUpdateManyWithoutClientNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutClientNestedInputSchema).optional()
}).strict();

export const clientUncheckedUpdateManyWithoutClientInputSchema: z.ZodType<Prisma.clientUncheckedUpdateManyWithoutClientInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  default_client_branch_rate_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const client_branchUpdateWithoutClientInputSchema: z.ZodType<Prisma.client_branchUpdateWithoutClientInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  client_rate: z.lazy(() => client_rateUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  sigungu: z.lazy(() => sigunguUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateWithoutClientInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateWithoutClientInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateManyWithoutClientInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateManyWithoutClientInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const callCreateManyClient_branchInputSchema: z.ZodType<Prisma.callCreateManyClient_branchInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable()
}).strict();

export const locationCreateManyClient_branchInputSchema: z.ZodType<Prisma.locationCreateManyClient_branchInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  warehouse_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const callUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.callUpdateWithoutClient_branchInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  call_type: z.lazy(() => call_typeUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutCallNestedInputSchema).optional(),
  device: z.lazy(() => deviceUpdateOneWithoutCallNestedInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userUpdateOneRequiredWithoutCall_call_receiver_idTouserNestedInputSchema).optional(),
  user_call_assigner_idTouser: z.lazy(() => userUpdateOneWithoutCall_call_assigner_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.callUncheckedUpdateWithoutClient_branchInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateManyWithoutClient_branchInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutClient_branchInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const locationUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.locationUpdateWithoutClient_branchInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUpdateManyWithoutLocationNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateOneWithoutLocationNestedInputSchema).optional()
}).strict();

export const locationUncheckedUpdateWithoutClient_branchInputSchema: z.ZodType<Prisma.locationUncheckedUpdateWithoutClient_branchInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUncheckedUpdateManyWithoutLocationNestedInputSchema).optional()
}).strict();

export const locationUncheckedUpdateManyWithoutClient_branchInputSchema: z.ZodType<Prisma.locationUncheckedUpdateManyWithoutClient_branchInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const clientCreateManyClient_rateInputSchema: z.ZodType<Prisma.clientCreateManyClient_rateInput> = z.object({
  client_id: z.coerce.number(),
  parent_client_id: z.coerce.number().nullable().optional().nullable(),
  client_name: z.string().max(45),
  remote_support: z.coerce.number().nullable().optional().nullable(),
  push_alert: z.coerce.number().nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional()
}).strict();

export const client_branchCreateManyClient_rateInputSchema: z.ZodType<Prisma.client_branchCreateManyClient_rateInput> = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional()
}).strict();

export const clientUpdateWithoutClient_rateInputSchema: z.ZodType<Prisma.clientUpdateWithoutClient_rateInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client: z.lazy(() => clientUpdateOneWithoutOther_clientNestedInputSchema).optional(),
  other_client: z.lazy(() => clientUpdateManyWithoutClientNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutClientNestedInputSchema).optional()
}).strict();

export const clientUncheckedUpdateWithoutClient_rateInputSchema: z.ZodType<Prisma.clientUncheckedUpdateWithoutClient_rateInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  other_client: z.lazy(() => clientUncheckedUpdateManyWithoutClientNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutClientNestedInputSchema).optional()
}).strict();

export const clientUncheckedUpdateManyWithoutClient_rateInputSchema: z.ZodType<Prisma.clientUncheckedUpdateManyWithoutClient_rateInput> = z.object({
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  parent_client_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  client_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  push_alert: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const client_branchUpdateWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchUpdateWithoutClient_rateInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  client: z.lazy(() => clientUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  sigungu: z.lazy(() => sigunguUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateWithoutClient_rateInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateManyWithoutClient_rateInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateManyWithoutClient_rateInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_consumable_compatibilityCreateManyConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateManyConsumable_modelInput> = z.object({
  device_model_id: z.coerce.number()
}).strict();

export const device_consumable_compatibilityUpdateWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateWithoutConsumable_modelInput> = z.object({
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDevice_consumable_compatibilityNestedInputSchema).optional()
}).strict();

export const device_consumable_compatibilityUncheckedUpdateWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedUpdateWithoutConsumable_modelInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_consumable_compatibilityUncheckedUpdateManyWithoutConsumable_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedUpdateManyWithoutConsumable_modelInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const callCreateManyDeptInputSchema: z.ZodType<Prisma.callCreateManyDeptInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable()
}).strict();

export const client_branchCreateManyDeptInputSchema: z.ZodType<Prisma.client_branchCreateManyDeptInput> = z.object({
  client_branch_id: z.coerce.number(),
  sigungu_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional()
}).strict();

export const deptCreateManyDeptInputSchema: z.ZodType<Prisma.deptCreateManyDeptInput> = z.object({
  dept_id: z.coerce.number(),
  dept_name: z.string().max(100)
}).strict();

export const deviceCreateManyDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceCreateManyDept_device_owner_dept_idTodeptInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number()
}).strict();

export const deviceCreateManyDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceCreateManyDept_device_mgmt_dept_idTodeptInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number()
}).strict();

export const userCreateManyDeptInputSchema: z.ZodType<Prisma.userCreateManyDeptInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  position_id: z.coerce.number(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional()
}).strict();

export const warehouseCreateManyDeptInputSchema: z.ZodType<Prisma.warehouseCreateManyDeptInput> = z.object({
  warehouse_id: z.coerce.number(),
  warehouse_name: z.string().max(100)
}).strict();

export const callUpdateWithoutDeptInputSchema: z.ZodType<Prisma.callUpdateWithoutDeptInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  call_type: z.lazy(() => call_typeUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  device: z.lazy(() => deviceUpdateOneWithoutCallNestedInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userUpdateOneRequiredWithoutCall_call_receiver_idTouserNestedInputSchema).optional(),
  user_call_assigner_idTouser: z.lazy(() => userUpdateOneWithoutCall_call_assigner_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateWithoutDeptInputSchema: z.ZodType<Prisma.callUncheckedUpdateWithoutDeptInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateManyWithoutDeptInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutDeptInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const client_branchUpdateWithoutDeptInputSchema: z.ZodType<Prisma.client_branchUpdateWithoutDeptInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  client: z.lazy(() => clientUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  client_rate: z.lazy(() => client_rateUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  sigungu: z.lazy(() => sigunguUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateWithoutDeptInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateWithoutDeptInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateManyWithoutDeptInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateManyWithoutDeptInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deptUpdateWithoutDeptInputSchema: z.ZodType<Prisma.deptUpdateWithoutDeptInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutDeptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUncheckedUpdateWithoutDeptInputSchema: z.ZodType<Prisma.deptUncheckedUpdateWithoutDeptInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  other_dept: z.lazy(() => deptUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  device_device_owner_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_device_mgmt_dept_idTodept: z.lazy(() => deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  user: z.lazy(() => userUncheckedUpdateManyWithoutDeptNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUncheckedUpdateManyWithoutDeptNestedInputSchema).optional()
}).strict();

export const deptUncheckedUpdateManyWithoutDeptInputSchema: z.ZodType<Prisma.deptUncheckedUpdateManyWithoutDeptInput> = z.object({
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dept_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deviceUpdateWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUpdateWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDept_device_owner_dept_idTodeptInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deviceUpdateWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUpdateWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDept_device_mgmt_dept_idTodeptInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const userUpdateWithoutDeptInputSchema: z.ZodType<Prisma.userUpdateWithoutDeptInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  user_position: z.lazy(() => user_positionUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutDeptInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutDeptInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateManyWithoutDeptInputSchema: z.ZodType<Prisma.userUncheckedUpdateManyWithoutDeptInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  position_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const warehouseUpdateWithoutDeptInputSchema: z.ZodType<Prisma.warehouseUpdateWithoutDeptInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutWarehouseNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateManyWithoutWarehouseNestedInputSchema).optional()
}).strict();

export const warehouseUncheckedUpdateWithoutDeptInputSchema: z.ZodType<Prisma.warehouseUncheckedUpdateWithoutDeptInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutWarehouseNestedInputSchema).optional(),
  location: z.lazy(() => locationUncheckedUpdateManyWithoutWarehouseNestedInputSchema).optional()
}).strict();

export const warehouseUncheckedUpdateManyWithoutDeptInputSchema: z.ZodType<Prisma.warehouseUncheckedUpdateManyWithoutDeptInput> = z.object({
  warehouse_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  warehouse_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const callCreateManyDeviceInputSchema: z.ZodType<Prisma.callCreateManyDeviceInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable()
}).strict();

export const device_inspection_logCreateManyDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logCreateManyDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  inspector_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  call_id: z.coerce.number().nullable().optional().nullable(),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable()
}).strict();

export const device_location_logCreateManyDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logCreateManyDevice_device_location_log_device_idTodeviceInput> = z.object({
  device_location_log_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_id: z.coerce.number(),
  location_detail: z.string().max(200).nullable().optional().nullable()
}).strict();

export const device_optionCreateManyDeviceInputSchema: z.ZodType<Prisma.device_optionCreateManyDeviceInput> = z.object({
  device_option_id: z.coerce.number(),
  option_model_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  location_warehouse_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const callUpdateWithoutDeviceInputSchema: z.ZodType<Prisma.callUpdateWithoutDeviceInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  call_type: z.lazy(() => call_typeUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutCallNestedInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userUpdateOneRequiredWithoutCall_call_receiver_idTouserNestedInputSchema).optional(),
  user_call_assigner_idTouser: z.lazy(() => userUpdateOneWithoutCall_call_assigner_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateWithoutDeviceInputSchema: z.ZodType<Prisma.callUncheckedUpdateWithoutDeviceInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateManyWithoutDeviceInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutDeviceInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_inspection_logUpdateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logUpdateWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  user: z.lazy(() => userUpdateOneRequiredWithoutDevice_inspection_logNestedInputSchema).optional(),
  call: z.lazy(() => callUpdateOneWithoutDevice_inspection_logNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedUpdateWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspector_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspector_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_location_logUpdateWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logUpdateWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateOneRequiredWithoutDevice_location_logNestedInputSchema).optional()
}).strict();

export const device_location_logUncheckedUpdateWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logUncheckedUpdateWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logNestedInputSchema).optional()
}).strict();

export const device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceInputSchema: z.ZodType<Prisma.device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_optionUpdateWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionUpdateWithoutDeviceInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  option_model: z.lazy(() => option_modelUpdateOneRequiredWithoutDevice_optionNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateOneWithoutDevice_optionNestedInputSchema).optional()
}).strict();

export const device_optionUncheckedUpdateWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateWithoutDeviceInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  location_warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_optionUncheckedUpdateManyWithoutDeviceInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateManyWithoutDeviceInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  location_warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_approvalCreateManyDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalCreateManyDevice_approvalInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_approvalUpdateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalUpdateWithoutDevice_approvalInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalUpdateManyWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutDevice_approval_device_approval_requester_idTouserNestedInputSchema).optional(),
  user_device_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutDevice_approval_device_approval_approver_idTouserNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateWithoutDevice_approvalInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approvalNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateManyWithoutDevice_approvalInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutDevice_approvalInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_approvalCreateManyDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalCreateManyDevice_approval_typeInput> = z.object({
  approval_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_approvalUpdateWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalUpdateWithoutDevice_approval_typeInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateOneWithoutOther_device_approvalNestedInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalUpdateManyWithoutDevice_approvalNestedInputSchema).optional(),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutDevice_approval_device_approval_requester_idTouserNestedInputSchema).optional(),
  user_device_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutDevice_approval_device_approval_approver_idTouserNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateWithoutDevice_approval_typeInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approvalNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateManyWithoutDevice_approval_typeInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutDevice_approval_typeInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const deviceCreateManyDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceCreateManyDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number()
}).strict();

export const inspection_approvalCreateManyDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalCreateManyDevice_inspection_logInput> = z.object({
  approval_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const deviceUpdateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceUpdateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const inspection_approvalUpdateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalUpdateWithoutDevice_inspection_logInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutInspection_approvalNestedInputSchema).optional(),
  user_inspection_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutInspection_approval_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  user_inspection_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutInspection_approval_inspection_approval_requester_idTouserNestedInputSchema).optional()
}).strict();

export const inspection_approvalUncheckedUpdateWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateWithoutDevice_inspection_logInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const inspection_approvalUncheckedUpdateManyWithoutDevice_inspection_logInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateManyWithoutDevice_inspection_logInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const deviceCreateManyDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceCreateManyDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number()
}).strict();

export const deviceUpdateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceUpdateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deviceCreateManyDevice_modelInputSchema: z.ZodType<Prisma.deviceCreateManyDevice_modelInput> = z.object({
  device_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable(),
  status_id: z.coerce.number()
}).strict();

export const device_consumable_compatibilityCreateManyDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateManyDevice_modelInput> = z.object({
  consumable_model_id: z.coerce.number()
}).strict();

export const device_driverCreateManyDevice_modelInputSchema: z.ZodType<Prisma.device_driverCreateManyDevice_modelInput> = z.object({
  device_driver_id: z.coerce.number(),
  manufacturer: z.string().max(100).nullable().optional().nullable(),
  printer_language: z.string().max(45).nullable().optional().nullable(),
  install_file_address: z.string().max(200).nullable().optional().nullable()
}).strict();

export const device_option_compatibilityCreateManyDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityCreateManyDevice_modelInput> = z.object({
  option_model_id: z.coerce.number()
}).strict();

export const deviceUpdateWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceUpdateWithoutDevice_modelInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_status: z.lazy(() => device_statusUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutDevice_modelInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDevice_modelInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_consumable_compatibilityUpdateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateWithoutDevice_modelInput> = z.object({
  consumable_model: z.lazy(() => consumable_modelUpdateOneRequiredWithoutDevice_consumable_compatibilityNestedInputSchema).optional()
}).strict();

export const device_consumable_compatibilityUncheckedUpdateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedUpdateWithoutDevice_modelInput> = z.object({
  consumable_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_consumable_compatibilityUncheckedUpdateManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_consumable_compatibilityUncheckedUpdateManyWithoutDevice_modelInput> = z.object({
  consumable_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_driverUpdateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverUpdateWithoutDevice_modelInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_driverUncheckedUpdateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverUncheckedUpdateWithoutDevice_modelInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_driverUncheckedUpdateManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_driverUncheckedUpdateManyWithoutDevice_modelInput> = z.object({
  device_driver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  manufacturer: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  printer_language: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  install_file_address: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_option_compatibilityUpdateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUpdateWithoutDevice_modelInput> = z.object({
  option_model: z.lazy(() => option_modelUpdateOneRequiredWithoutDevice_option_compatibilityNestedInputSchema).optional()
}).strict();

export const device_option_compatibilityUncheckedUpdateWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedUpdateWithoutDevice_modelInput> = z.object({
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_option_compatibilityUncheckedUpdateManyWithoutDevice_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedUpdateManyWithoutDevice_modelInput> = z.object({
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const deviceCreateManyDevice_statusInputSchema: z.ZodType<Prisma.deviceCreateManyDevice_statusInput> = z.object({
  device_id: z.coerce.number(),
  device_model_id: z.coerce.number(),
  owner_dept_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  serial: z.string().max(50),
  regi_date: z.coerce.date(),
  mac: z.string().max(50),
  last_inspection_log_id: z.coerce.number().nullable().optional().nullable(),
  last_location_log_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const deviceUpdateWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceUpdateWithoutDevice_statusInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutDeviceNestedInputSchema).optional(),
  dept_device_owner_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_owner_dept_idTodeptNestedInputSchema).optional(),
  dept_device_mgmt_dept_idTodept: z.lazy(() => deptUpdateOneRequiredWithoutDevice_device_mgmt_dept_idTodeptNestedInputSchema).optional(),
  device_location_log_device_last_location_log_idTodevice_location_log: z.lazy(() => device_location_logUpdateOneWithoutDevice_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_inspection_log_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => device_inspection_logUpdateOneWithoutDevice_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateWithoutDevice_statusInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional(),
  device_inspection_log_device_inspection_log_device_idTodevice: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutDevice_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateOneWithoutDeviceNestedInputSchema).optional(),
  device_location_log_device_location_log_device_idTodevice: z.lazy(() => device_location_logUncheckedUpdateManyWithoutDevice_device_location_log_device_idTodeviceNestedInputSchema).optional(),
  device_option: z.lazy(() => device_optionUncheckedUpdateManyWithoutDeviceNestedInputSchema).optional()
}).strict();

export const deviceUncheckedUpdateManyWithoutDevice_statusInputSchema: z.ZodType<Prisma.deviceUncheckedUpdateManyWithoutDevice_statusInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  owner_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  regi_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mac: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  last_inspection_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_location_log_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_approvalCreateManyLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalCreateManyLocation_device_approval_origin_location_idTolocationInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_approvalCreateManyLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalCreateManyLocation_device_approval_destination_location_idTolocationInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_location_logCreateManyLocationInputSchema: z.ZodType<Prisma.device_location_logCreateManyLocationInput> = z.object({
  device_location_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  location_date: z.coerce.date(),
  location_detail: z.string().max(200).nullable().optional().nullable()
}).strict();

export const device_approvalUpdateWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUpdateWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateOneWithoutOther_device_approvalNestedInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalUpdateManyWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutDevice_approval_device_approval_requester_idTouserNestedInputSchema).optional(),
  user_device_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutDevice_approval_device_approval_approver_idTouserNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approvalNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateManyWithoutLocation_device_approval_origin_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutLocation_device_approval_origin_location_idTolocationInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_approvalUpdateWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUpdateWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateOneWithoutOther_device_approvalNestedInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalUpdateManyWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutDevice_approval_device_approval_requester_idTouserNestedInputSchema).optional(),
  user_device_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutDevice_approval_device_approval_approver_idTouserNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approvalNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateManyWithoutLocation_device_approval_destination_location_idTolocationInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutLocation_device_approval_destination_location_idTolocationInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_location_logUpdateWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logUpdateWithoutLocationInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logNestedInputSchema).optional(),
  device_device_location_log_device_idTodevice: z.lazy(() => deviceUpdateOneRequiredWithoutDevice_location_log_device_location_log_device_idTodeviceNestedInputSchema).optional()
}).strict();

export const device_location_logUncheckedUpdateWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logUncheckedUpdateWithoutLocationInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_location_log_idTodevice_location_log: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_location_log_device_last_location_log_idTodevice_location_logNestedInputSchema).optional()
}).strict();

export const device_location_logUncheckedUpdateManyWithoutLocationInputSchema: z.ZodType<Prisma.device_location_logUncheckedUpdateManyWithoutLocationInput> = z.object({
  device_location_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  location_detail: z.union([ z.string().max(200).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_optionCreateManyOption_modelInputSchema: z.ZodType<Prisma.device_optionCreateManyOption_modelInput> = z.object({
  device_option_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  location_warehouse_id: z.coerce.number().nullable().optional().nullable(),
  location_device_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_option_compatibilityCreateManyOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityCreateManyOption_modelInput> = z.object({
  device_model_id: z.coerce.number()
}).strict();

export const device_optionUpdateWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionUpdateWithoutOption_modelInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUpdateOneWithoutDevice_optionNestedInputSchema).optional(),
  warehouse: z.lazy(() => warehouseUpdateOneWithoutDevice_optionNestedInputSchema).optional()
}).strict();

export const device_optionUncheckedUpdateWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateWithoutOption_modelInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  location_warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location_device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_optionUncheckedUpdateManyWithoutOption_modelInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateManyWithoutOption_modelInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  location_warehouse_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location_device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_option_compatibilityUpdateWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUpdateWithoutOption_modelInput> = z.object({
  device_model: z.lazy(() => device_modelUpdateOneRequiredWithoutDevice_option_compatibilityNestedInputSchema).optional()
}).strict();

export const device_option_compatibilityUncheckedUpdateWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedUpdateWithoutOption_modelInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_option_compatibilityUncheckedUpdateManyWithoutOption_modelInputSchema: z.ZodType<Prisma.device_option_compatibilityUncheckedUpdateManyWithoutOption_modelInput> = z.object({
  device_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const sigunguCreateManySidoInputSchema: z.ZodType<Prisma.sigunguCreateManySidoInput> = z.object({
  sigungu_id: z.coerce.number(),
  sigungu_name: z.string().max(45)
}).strict();

export const sigunguUpdateWithoutSidoInputSchema: z.ZodType<Prisma.sigunguUpdateWithoutSidoInput> = z.object({
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch: z.lazy(() => client_branchUpdateManyWithoutSigunguNestedInputSchema).optional()
}).strict();

export const sigunguUncheckedUpdateWithoutSidoInputSchema: z.ZodType<Prisma.sigunguUncheckedUpdateWithoutSidoInput> = z.object({
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch: z.lazy(() => client_branchUncheckedUpdateManyWithoutSigunguNestedInputSchema).optional()
}).strict();

export const sigunguUncheckedUpdateManyWithoutSidoInputSchema: z.ZodType<Prisma.sigunguUncheckedUpdateManyWithoutSidoInput> = z.object({
  sigungu_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sigungu_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const client_branchCreateManySigunguInputSchema: z.ZodType<Prisma.client_branchCreateManySigunguInput> = z.object({
  client_branch_id: z.coerce.number(),
  mgmt_dept_id: z.coerce.number(),
  client_id: z.coerce.number(),
  client_branch_name: z.string().max(100),
  client_branch_rate_id: z.coerce.number(),
  branch_mgr_name: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_mobile_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_office_num: z.string().max(45).nullable().optional().nullable(),
  branch_mgr_email: z.string().max(45).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  remote_support: z.coerce.number().default(0).optional(),
  push_alert: z.coerce.number().default(0).optional()
}).strict();

export const client_branchUpdateWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchUpdateWithoutSigunguInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  client: z.lazy(() => clientUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  client_rate: z.lazy(() => client_rateUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateWithoutSigunguInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call: z.lazy(() => callUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional(),
  location: z.lazy(() => locationUncheckedUpdateManyWithoutClient_branchNestedInputSchema).optional()
}).strict();

export const client_branchUncheckedUpdateManyWithoutSigunguInputSchema: z.ZodType<Prisma.client_branchUncheckedUpdateManyWithoutSigunguInput> = z.object({
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_name: z.union([ z.string().max(100),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_rate_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  branch_mgr_name: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_mobile_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_office_num: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  branch_mgr_email: z.union([ z.string().max(45).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  remote_support: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  push_alert: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const callCreateManyUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callCreateManyUser_call_receiver_idTouserInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  assigner_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable()
}).strict();

export const callCreateManyUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callCreateManyUser_call_assigner_idTouserInput> = z.object({
  call_id: z.coerce.number(),
  call_type_id: z.coerce.number(),
  client_branch_id: z.coerce.number(),
  requester_name: z.string().max(50),
  requester_num: z.string().max(20),
  requester_black_consumer: z.coerce.number().default(0).optional(),
  device_id: z.coerce.number().nullable().optional().nullable(),
  detail: z.string().max(200),
  state: z.string().max(45),
  received_at: z.coerce.date(),
  receiver_id: z.coerce.number(),
  transferred_at: z.coerce.date().optional().nullable(),
  transferred_dept_id: z.coerce.number().nullable().optional().nullable(),
  completed_at: z.coerce.date().optional().nullable()
}).strict();

export const device_approvalCreateManyUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalCreateManyUser_device_approval_requester_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_approvalCreateManyUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalCreateManyUser_device_approval_approver_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  approval_type_id: z.coerce.number(),
  sub_approval_id: z.coerce.number().nullable().optional().nullable(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number(),
  origin_location_id: z.coerce.number().nullable().optional().nullable(),
  destination_location_id: z.coerce.number().nullable().optional().nullable(),
  approve_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_inspection_logCreateManyUserInputSchema: z.ZodType<Prisma.device_inspection_logCreateManyUserInput> = z.object({
  device_inspection_log_id: z.coerce.number(),
  device_id: z.coerce.number(),
  inspection_date: z.coerce.date(),
  visit_type: z.string().max(45),
  call_id: z.coerce.number().nullable().optional().nullable(),
  FL: z.coerce.number().nullable().optional().nullable(),
  FS: z.coerce.number().nullable().optional().nullable(),
  BL: z.coerce.number().nullable().optional().nullable(),
  BS: z.coerce.number().nullable().optional().nullable(),
  toner_count_YE: z.coerce.number().nullable().optional().nullable(),
  toner_count_MA: z.coerce.number().nullable().optional().nullable(),
  toner_count_CY: z.coerce.number().nullable().optional().nullable(),
  toner_count_BK: z.coerce.number().nullable().optional().nullable(),
  toner_stock_YE: z.coerce.number().nullable().optional().nullable(),
  toner_stock_MA: z.coerce.number().nullable().optional().nullable(),
  toner_stock_CY: z.coerce.number().nullable().optional().nullable(),
  toner_stock_BK: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_YE: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_CY: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_MA: z.coerce.number().nullable().optional().nullable(),
  toner_deliver_BK: z.coerce.number().nullable().optional().nullable(),
  drum_count_YE: z.coerce.number().nullable().optional().nullable(),
  drum_count_MA: z.coerce.number().nullable().optional().nullable(),
  drum_count_CY: z.coerce.number().nullable().optional().nullable(),
  drum_count_BK: z.coerce.number().nullable().optional().nullable(),
  drum_replacement_detail: z.string().max(50).nullable().optional().nullable(),
  status: z.lazy(() => device_inspection_log_statusSchema).optional().nullable()
}).strict();

export const device_install_infoCreateManyUserInputSchema: z.ZodType<Prisma.device_install_infoCreateManyUserInput> = z.object({
  device_id: z.coerce.number(),
  mgmt_num: z.string().max(50),
  ip_address: z.string().max(50).nullable().optional().nullable(),
  subnet_mask: z.string().max(50).nullable().optional().nullable(),
  gateway: z.string().max(50).nullable().optional().nullable(),
  dns1: z.string().max(50).nullable().optional().nullable(),
  dns2: z.string().max(50).nullable().optional().nullable()
}).strict();

export const inspection_approvalCreateManyUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalCreateManyUser_inspection_approval_approver_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  requester_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number().nullable().optional().nullable(),
  device_inspection_log_id: z.coerce.number(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const inspection_approvalCreateManyUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalCreateManyUser_inspection_approval_requester_idTouserInput> = z.object({
  approval_id: z.coerce.number(),
  request_at: z.coerce.date(),
  approver_role_id: z.coerce.number().nullable().optional().nullable(),
  device_inspection_log_id: z.coerce.number(),
  approver_id: z.coerce.number().nullable().optional().nullable(),
  approved_at: z.coerce.date().optional().nullable(),
  is_approved: z.coerce.number().nullable().optional().nullable()
}).strict();

export const user_role_assignmentCreateManyUserInputSchema: z.ZodType<Prisma.user_role_assignmentCreateManyUserInput> = z.object({
  role_id: z.coerce.number()
}).strict();

export const callUpdateWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callUpdateWithoutUser_call_receiver_idTouserInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  call_type: z.lazy(() => call_typeUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutCallNestedInputSchema).optional(),
  device: z.lazy(() => deviceUpdateOneWithoutCallNestedInputSchema).optional(),
  user_call_assigner_idTouser: z.lazy(() => userUpdateOneWithoutCall_call_assigner_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callUncheckedUpdateWithoutUser_call_receiver_idTouserInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateManyWithoutUser_call_receiver_idTouserInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutUser_call_receiver_idTouserInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assigner_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const callUpdateWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callUpdateWithoutUser_call_assigner_idTouserInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  call_type: z.lazy(() => call_typeUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneRequiredWithoutCallNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneWithoutCallNestedInputSchema).optional(),
  device: z.lazy(() => deviceUpdateOneWithoutCallNestedInputSchema).optional(),
  user_call_receiver_idTouser: z.lazy(() => userUpdateOneRequiredWithoutCall_call_receiver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callUncheckedUpdateWithoutUser_call_assigner_idTouserInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutCallNestedInputSchema).optional()
}).strict();

export const callUncheckedUpdateManyWithoutUser_call_assigner_idTouserInputSchema: z.ZodType<Prisma.callUncheckedUpdateManyWithoutUser_call_assigner_idTouserInput> = z.object({
  call_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  call_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_name: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_num: z.union([ z.string().max(20),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  requester_black_consumer: z.union([ z.coerce.number().default(0),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  detail: z.union([ z.string().max(200),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  transferred_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transferred_dept_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  completed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_approvalUpdateWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalUpdateWithoutUser_device_approval_requester_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateOneWithoutOther_device_approvalNestedInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalUpdateManyWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  user_device_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutDevice_approval_device_approval_approver_idTouserNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateWithoutUser_device_approval_requester_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approvalNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_approvalUpdateWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalUpdateWithoutUser_device_approval_approver_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval: z.lazy(() => device_approvalUpdateOneWithoutOther_device_approvalNestedInputSchema).optional(),
  other_device_approval: z.lazy(() => device_approvalUpdateManyWithoutDevice_approvalNestedInputSchema).optional(),
  device_approval_type: z.lazy(() => device_approval_typeUpdateOneRequiredWithoutDevice_approvalNestedInputSchema).optional(),
  location_device_approval_origin_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  location_device_approval_destination_location_idTolocation: z.lazy(() => locationUpdateOneWithoutDevice_approval_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  user_device_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutDevice_approval_device_approval_requester_idTouserNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateWithoutUser_device_approval_approver_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  other_device_approval: z.lazy(() => device_approvalUncheckedUpdateManyWithoutDevice_approvalNestedInputSchema).optional()
}).strict();

export const device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserInputSchema: z.ZodType<Prisma.device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_type_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  sub_approval_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  origin_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  destination_location_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approve_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_inspection_logUpdateWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logUpdateWithoutUserInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  device_device_inspection_log_device_idTodevice: z.lazy(() => deviceUpdateOneRequiredWithoutDevice_inspection_log_device_inspection_log_device_idTodeviceNestedInputSchema).optional(),
  call: z.lazy(() => callUpdateOneWithoutDevice_inspection_logNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUpdateManyWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateWithoutUserInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_device_last_inspection_log_idTodevice_inspection_log: z.lazy(() => deviceUncheckedUpdateManyWithoutDevice_inspection_log_device_last_inspection_log_idTodevice_inspection_logNestedInputSchema).optional(),
  inspection_approval: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutDevice_inspection_logNestedInputSchema).optional()
}).strict();

export const device_inspection_logUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.device_inspection_logUncheckedUpdateManyWithoutUserInput> = z.object({
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inspection_date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  visit_type: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  call_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BL: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  BS: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_stock_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  toner_deliver_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_YE: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_MA: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_CY: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_count_BK: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  drum_replacement_detail: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => device_inspection_log_statusSchema),z.lazy(() => NullableEnumdevice_inspection_log_statusFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_install_infoUpdateWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoUpdateWithoutUserInput> = z.object({
  mgmt_num: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ip_address: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subnet_mask: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gateway: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns1: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns2: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device: z.lazy(() => deviceUpdateOneRequiredWithoutDevice_install_infoNestedInputSchema).optional()
}).strict();

export const device_install_infoUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoUncheckedUpdateWithoutUserInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_num: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ip_address: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subnet_mask: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gateway: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns1: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns2: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_install_infoUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.device_install_infoUncheckedUpdateManyWithoutUserInput> = z.object({
  device_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mgmt_num: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ip_address: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subnet_mask: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gateway: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns1: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dns2: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const inspection_approvalUpdateWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUpdateWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutInspection_approvalNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateOneRequiredWithoutInspection_approvalNestedInputSchema).optional(),
  user_inspection_approval_requester_idTouser: z.lazy(() => userUpdateOneRequiredWithoutInspection_approval_inspection_approval_requester_idTouserNestedInputSchema).optional()
}).strict();

export const inspection_approvalUncheckedUpdateWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  requester_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const inspection_approvalUpdateWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUpdateWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutInspection_approvalNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateOneRequiredWithoutInspection_approvalNestedInputSchema).optional(),
  user_inspection_approval_approver_idTouser: z.lazy(() => userUpdateOneWithoutInspection_approval_inspection_approval_approver_idTouserNestedInputSchema).optional()
}).strict();

export const inspection_approvalUncheckedUpdateWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserInputSchema: z.ZodType<Prisma.inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserInput> = z.object({
  approval_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  request_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  approver_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_inspection_log_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approver_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approved_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_approved: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const user_role_assignmentUpdateWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentUpdateWithoutUserInput> = z.object({
  approval_role: z.lazy(() => approval_roleUpdateOneRequiredWithoutUser_role_assignmentNestedInputSchema).optional()
}).strict();

export const user_role_assignmentUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedUpdateWithoutUserInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const user_role_assignmentUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.user_role_assignmentUncheckedUpdateManyWithoutUserInput> = z.object({
  role_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const userCreateManyUser_positionInputSchema: z.ZodType<Prisma.userCreateManyUser_positionInput> = z.object({
  user_id: z.coerce.number(),
  user_name: z.string().max(45),
  login_id: z.string().max(45),
  password: z.string().max(50),
  mobile_num: z.string().max(20).nullable().optional().nullable(),
  office_num: z.string().max(20).nullable().optional().nullable(),
  email: z.string().max(100).nullable().optional().nullable(),
  modified_at: z.coerce.date().optional().nullable(),
  dept_id: z.coerce.number(),
  approval_role_id: z.coerce.number().nullable().optional().nullable(),
  created_at: z.coerce.date(),
  is_active: z.coerce.number().default(1).optional(),
  permission: z.lazy(() => user_permissionSchema).optional()
}).strict();

export const userUpdateWithoutUser_positionInputSchema: z.ZodType<Prisma.userUpdateWithoutUser_positionInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  approval_role: z.lazy(() => approval_roleUpdateOneWithoutUserNestedInputSchema).optional(),
  dept: z.lazy(() => deptUpdateOneRequiredWithoutUserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateWithoutUser_positionInputSchema: z.ZodType<Prisma.userUncheckedUpdateWithoutUser_positionInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
  call_call_receiver_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_receiver_idTouserNestedInputSchema).optional(),
  call_call_assigner_idTouser: z.lazy(() => callUncheckedUpdateManyWithoutUser_call_assigner_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_requester_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_requester_idTouserNestedInputSchema).optional(),
  device_approval_device_approval_approver_idTouser: z.lazy(() => device_approvalUncheckedUpdateManyWithoutUser_device_approval_approver_idTouserNestedInputSchema).optional(),
  device_inspection_log: z.lazy(() => device_inspection_logUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  device_install_info: z.lazy(() => device_install_infoUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_approver_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_approver_idTouserNestedInputSchema).optional(),
  inspection_approval_inspection_approval_requester_idTouser: z.lazy(() => inspection_approvalUncheckedUpdateManyWithoutUser_inspection_approval_requester_idTouserNestedInputSchema).optional(),
  user_role_assignment: z.lazy(() => user_role_assignmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const userUncheckedUpdateManyWithoutUser_positionInputSchema: z.ZodType<Prisma.userUncheckedUpdateManyWithoutUser_positionInput> = z.object({
  user_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  user_name: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  login_id: z.union([ z.string().max(45),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string().max(50),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mobile_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  office_num: z.union([ z.string().max(20).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string().max(100).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modified_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dept_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approval_role_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.lazy(() => user_permissionSchema),z.lazy(() => Enumuser_permissionFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const device_optionCreateManyWarehouseInputSchema: z.ZodType<Prisma.device_optionCreateManyWarehouseInput> = z.object({
  device_option_id: z.coerce.number(),
  option_model_id: z.coerce.number(),
  serial: z.string().max(50).nullable().optional().nullable(),
  is_active: z.coerce.number().default(1).optional(),
  location_type: z.lazy(() => device_option_location_typeSchema),
  location_device_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const locationCreateManyWarehouseInputSchema: z.ZodType<Prisma.locationCreateManyWarehouseInput> = z.object({
  location_id: z.coerce.number(),
  location_type: z.lazy(() => location_location_typeSchema),
  client_branch_id: z.coerce.number().nullable().optional().nullable()
}).strict();

export const device_optionUpdateWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionUpdateWithoutWarehouseInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  device: z.lazy(() => deviceUpdateOneWithoutDevice_optionNestedInputSchema).optional(),
  option_model: z.lazy(() => option_modelUpdateOneRequiredWithoutDevice_optionNestedInputSchema).optional()
}).strict();

export const device_optionUncheckedUpdateWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateWithoutWarehouseInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  location_device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const device_optionUncheckedUpdateManyWithoutWarehouseInputSchema: z.ZodType<Prisma.device_optionUncheckedUpdateManyWithoutWarehouseInput> = z.object({
  device_option_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  option_model_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  serial: z.union([ z.string().max(50).nullable(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_active: z.union([ z.coerce.number().default(1),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => device_option_location_typeSchema),z.lazy(() => Enumdevice_option_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  location_device_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const locationUpdateWithoutWarehouseInputSchema: z.ZodType<Prisma.locationUpdateWithoutWarehouseInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUpdateManyWithoutLocationNestedInputSchema).optional(),
  client_branch: z.lazy(() => client_branchUpdateOneWithoutLocationNestedInputSchema).optional()
}).strict();

export const locationUncheckedUpdateWithoutWarehouseInputSchema: z.ZodType<Prisma.locationUncheckedUpdateWithoutWarehouseInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  device_approval_device_approval_origin_location_idTolocation: z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_origin_location_idTolocationNestedInputSchema).optional(),
  device_approval_device_approval_destination_location_idTolocation: z.lazy(() => device_approvalUncheckedUpdateManyWithoutLocation_device_approval_destination_location_idTolocationNestedInputSchema).optional(),
  device_location_log: z.lazy(() => device_location_logUncheckedUpdateManyWithoutLocationNestedInputSchema).optional()
}).strict();

export const locationUncheckedUpdateManyWithoutWarehouseInputSchema: z.ZodType<Prisma.locationUncheckedUpdateManyWithoutWarehouseInput> = z.object({
  location_id: z.union([ z.coerce.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  location_type: z.union([ z.lazy(() => location_location_typeSchema),z.lazy(() => Enumlocation_location_typeFieldUpdateOperationsInputSchema) ]).optional(),
  client_branch_id: z.union([ z.coerce.number().nullable(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const approval_roleFindFirstArgsSchema: z.ZodType<Prisma.approval_roleFindFirstArgs> = z.object({
  select: approval_roleSelectSchema.optional(),
  include: approval_roleIncludeSchema.optional(),
  where: approval_roleWhereInputSchema.optional(),
  orderBy: z.union([ approval_roleOrderByWithRelationInputSchema.array(),approval_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: approval_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Approval_roleScalarFieldEnumSchema,Approval_roleScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const approval_roleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.approval_roleFindFirstOrThrowArgs> = z.object({
  select: approval_roleSelectSchema.optional(),
  include: approval_roleIncludeSchema.optional(),
  where: approval_roleWhereInputSchema.optional(),
  orderBy: z.union([ approval_roleOrderByWithRelationInputSchema.array(),approval_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: approval_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Approval_roleScalarFieldEnumSchema,Approval_roleScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const approval_roleFindManyArgsSchema: z.ZodType<Prisma.approval_roleFindManyArgs> = z.object({
  select: approval_roleSelectSchema.optional(),
  include: approval_roleIncludeSchema.optional(),
  where: approval_roleWhereInputSchema.optional(),
  orderBy: z.union([ approval_roleOrderByWithRelationInputSchema.array(),approval_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: approval_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Approval_roleScalarFieldEnumSchema,Approval_roleScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const approval_roleAggregateArgsSchema: z.ZodType<Prisma.approval_roleAggregateArgs> = z.object({
  where: approval_roleWhereInputSchema.optional(),
  orderBy: z.union([ approval_roleOrderByWithRelationInputSchema.array(),approval_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: approval_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const approval_roleGroupByArgsSchema: z.ZodType<Prisma.approval_roleGroupByArgs> = z.object({
  where: approval_roleWhereInputSchema.optional(),
  orderBy: z.union([ approval_roleOrderByWithAggregationInputSchema.array(),approval_roleOrderByWithAggregationInputSchema ]).optional(),
  by: Approval_roleScalarFieldEnumSchema.array(),
  having: approval_roleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const approval_roleFindUniqueArgsSchema: z.ZodType<Prisma.approval_roleFindUniqueArgs> = z.object({
  select: approval_roleSelectSchema.optional(),
  include: approval_roleIncludeSchema.optional(),
  where: approval_roleWhereUniqueInputSchema,
}).strict()

export const approval_roleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.approval_roleFindUniqueOrThrowArgs> = z.object({
  select: approval_roleSelectSchema.optional(),
  include: approval_roleIncludeSchema.optional(),
  where: approval_roleWhereUniqueInputSchema,
}).strict()

export const callFindFirstArgsSchema: z.ZodType<Prisma.callFindFirstArgs> = z.object({
  select: callSelectSchema.optional(),
  include: callIncludeSchema.optional(),
  where: callWhereInputSchema.optional(),
  orderBy: z.union([ callOrderByWithRelationInputSchema.array(),callOrderByWithRelationInputSchema ]).optional(),
  cursor: callWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CallScalarFieldEnumSchema,CallScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const callFindFirstOrThrowArgsSchema: z.ZodType<Prisma.callFindFirstOrThrowArgs> = z.object({
  select: callSelectSchema.optional(),
  include: callIncludeSchema.optional(),
  where: callWhereInputSchema.optional(),
  orderBy: z.union([ callOrderByWithRelationInputSchema.array(),callOrderByWithRelationInputSchema ]).optional(),
  cursor: callWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CallScalarFieldEnumSchema,CallScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const callFindManyArgsSchema: z.ZodType<Prisma.callFindManyArgs> = z.object({
  select: callSelectSchema.optional(),
  include: callIncludeSchema.optional(),
  where: callWhereInputSchema.optional(),
  orderBy: z.union([ callOrderByWithRelationInputSchema.array(),callOrderByWithRelationInputSchema ]).optional(),
  cursor: callWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CallScalarFieldEnumSchema,CallScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const callAggregateArgsSchema: z.ZodType<Prisma.callAggregateArgs> = z.object({
  where: callWhereInputSchema.optional(),
  orderBy: z.union([ callOrderByWithRelationInputSchema.array(),callOrderByWithRelationInputSchema ]).optional(),
  cursor: callWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const callGroupByArgsSchema: z.ZodType<Prisma.callGroupByArgs> = z.object({
  where: callWhereInputSchema.optional(),
  orderBy: z.union([ callOrderByWithAggregationInputSchema.array(),callOrderByWithAggregationInputSchema ]).optional(),
  by: CallScalarFieldEnumSchema.array(),
  having: callScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const callFindUniqueArgsSchema: z.ZodType<Prisma.callFindUniqueArgs> = z.object({
  select: callSelectSchema.optional(),
  include: callIncludeSchema.optional(),
  where: callWhereUniqueInputSchema,
}).strict()

export const callFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.callFindUniqueOrThrowArgs> = z.object({
  select: callSelectSchema.optional(),
  include: callIncludeSchema.optional(),
  where: callWhereUniqueInputSchema,
}).strict()

export const call_typeFindFirstArgsSchema: z.ZodType<Prisma.call_typeFindFirstArgs> = z.object({
  select: call_typeSelectSchema.optional(),
  include: call_typeIncludeSchema.optional(),
  where: call_typeWhereInputSchema.optional(),
  orderBy: z.union([ call_typeOrderByWithRelationInputSchema.array(),call_typeOrderByWithRelationInputSchema ]).optional(),
  cursor: call_typeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Call_typeScalarFieldEnumSchema,Call_typeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const call_typeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.call_typeFindFirstOrThrowArgs> = z.object({
  select: call_typeSelectSchema.optional(),
  include: call_typeIncludeSchema.optional(),
  where: call_typeWhereInputSchema.optional(),
  orderBy: z.union([ call_typeOrderByWithRelationInputSchema.array(),call_typeOrderByWithRelationInputSchema ]).optional(),
  cursor: call_typeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Call_typeScalarFieldEnumSchema,Call_typeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const call_typeFindManyArgsSchema: z.ZodType<Prisma.call_typeFindManyArgs> = z.object({
  select: call_typeSelectSchema.optional(),
  include: call_typeIncludeSchema.optional(),
  where: call_typeWhereInputSchema.optional(),
  orderBy: z.union([ call_typeOrderByWithRelationInputSchema.array(),call_typeOrderByWithRelationInputSchema ]).optional(),
  cursor: call_typeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Call_typeScalarFieldEnumSchema,Call_typeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const call_typeAggregateArgsSchema: z.ZodType<Prisma.call_typeAggregateArgs> = z.object({
  where: call_typeWhereInputSchema.optional(),
  orderBy: z.union([ call_typeOrderByWithRelationInputSchema.array(),call_typeOrderByWithRelationInputSchema ]).optional(),
  cursor: call_typeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const call_typeGroupByArgsSchema: z.ZodType<Prisma.call_typeGroupByArgs> = z.object({
  where: call_typeWhereInputSchema.optional(),
  orderBy: z.union([ call_typeOrderByWithAggregationInputSchema.array(),call_typeOrderByWithAggregationInputSchema ]).optional(),
  by: Call_typeScalarFieldEnumSchema.array(),
  having: call_typeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const call_typeFindUniqueArgsSchema: z.ZodType<Prisma.call_typeFindUniqueArgs> = z.object({
  select: call_typeSelectSchema.optional(),
  include: call_typeIncludeSchema.optional(),
  where: call_typeWhereUniqueInputSchema,
}).strict()

export const call_typeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.call_typeFindUniqueOrThrowArgs> = z.object({
  select: call_typeSelectSchema.optional(),
  include: call_typeIncludeSchema.optional(),
  where: call_typeWhereUniqueInputSchema,
}).strict()

export const clientFindFirstArgsSchema: z.ZodType<Prisma.clientFindFirstArgs> = z.object({
  select: clientSelectSchema.optional(),
  include: clientIncludeSchema.optional(),
  where: clientWhereInputSchema.optional(),
  orderBy: z.union([ clientOrderByWithRelationInputSchema.array(),clientOrderByWithRelationInputSchema ]).optional(),
  cursor: clientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ClientScalarFieldEnumSchema,ClientScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const clientFindFirstOrThrowArgsSchema: z.ZodType<Prisma.clientFindFirstOrThrowArgs> = z.object({
  select: clientSelectSchema.optional(),
  include: clientIncludeSchema.optional(),
  where: clientWhereInputSchema.optional(),
  orderBy: z.union([ clientOrderByWithRelationInputSchema.array(),clientOrderByWithRelationInputSchema ]).optional(),
  cursor: clientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ClientScalarFieldEnumSchema,ClientScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const clientFindManyArgsSchema: z.ZodType<Prisma.clientFindManyArgs> = z.object({
  select: clientSelectSchema.optional(),
  include: clientIncludeSchema.optional(),
  where: clientWhereInputSchema.optional(),
  orderBy: z.union([ clientOrderByWithRelationInputSchema.array(),clientOrderByWithRelationInputSchema ]).optional(),
  cursor: clientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ClientScalarFieldEnumSchema,ClientScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const clientAggregateArgsSchema: z.ZodType<Prisma.clientAggregateArgs> = z.object({
  where: clientWhereInputSchema.optional(),
  orderBy: z.union([ clientOrderByWithRelationInputSchema.array(),clientOrderByWithRelationInputSchema ]).optional(),
  cursor: clientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const clientGroupByArgsSchema: z.ZodType<Prisma.clientGroupByArgs> = z.object({
  where: clientWhereInputSchema.optional(),
  orderBy: z.union([ clientOrderByWithAggregationInputSchema.array(),clientOrderByWithAggregationInputSchema ]).optional(),
  by: ClientScalarFieldEnumSchema.array(),
  having: clientScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const clientFindUniqueArgsSchema: z.ZodType<Prisma.clientFindUniqueArgs> = z.object({
  select: clientSelectSchema.optional(),
  include: clientIncludeSchema.optional(),
  where: clientWhereUniqueInputSchema,
}).strict()

export const clientFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.clientFindUniqueOrThrowArgs> = z.object({
  select: clientSelectSchema.optional(),
  include: clientIncludeSchema.optional(),
  where: clientWhereUniqueInputSchema,
}).strict()

export const client_branchFindFirstArgsSchema: z.ZodType<Prisma.client_branchFindFirstArgs> = z.object({
  select: client_branchSelectSchema.optional(),
  include: client_branchIncludeSchema.optional(),
  where: client_branchWhereInputSchema.optional(),
  orderBy: z.union([ client_branchOrderByWithRelationInputSchema.array(),client_branchOrderByWithRelationInputSchema ]).optional(),
  cursor: client_branchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Client_branchScalarFieldEnumSchema,Client_branchScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const client_branchFindFirstOrThrowArgsSchema: z.ZodType<Prisma.client_branchFindFirstOrThrowArgs> = z.object({
  select: client_branchSelectSchema.optional(),
  include: client_branchIncludeSchema.optional(),
  where: client_branchWhereInputSchema.optional(),
  orderBy: z.union([ client_branchOrderByWithRelationInputSchema.array(),client_branchOrderByWithRelationInputSchema ]).optional(),
  cursor: client_branchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Client_branchScalarFieldEnumSchema,Client_branchScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const client_branchFindManyArgsSchema: z.ZodType<Prisma.client_branchFindManyArgs> = z.object({
  select: client_branchSelectSchema.optional(),
  include: client_branchIncludeSchema.optional(),
  where: client_branchWhereInputSchema.optional(),
  orderBy: z.union([ client_branchOrderByWithRelationInputSchema.array(),client_branchOrderByWithRelationInputSchema ]).optional(),
  cursor: client_branchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Client_branchScalarFieldEnumSchema,Client_branchScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const client_branchAggregateArgsSchema: z.ZodType<Prisma.client_branchAggregateArgs> = z.object({
  where: client_branchWhereInputSchema.optional(),
  orderBy: z.union([ client_branchOrderByWithRelationInputSchema.array(),client_branchOrderByWithRelationInputSchema ]).optional(),
  cursor: client_branchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const client_branchGroupByArgsSchema: z.ZodType<Prisma.client_branchGroupByArgs> = z.object({
  where: client_branchWhereInputSchema.optional(),
  orderBy: z.union([ client_branchOrderByWithAggregationInputSchema.array(),client_branchOrderByWithAggregationInputSchema ]).optional(),
  by: Client_branchScalarFieldEnumSchema.array(),
  having: client_branchScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const client_branchFindUniqueArgsSchema: z.ZodType<Prisma.client_branchFindUniqueArgs> = z.object({
  select: client_branchSelectSchema.optional(),
  include: client_branchIncludeSchema.optional(),
  where: client_branchWhereUniqueInputSchema,
}).strict()

export const client_branchFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.client_branchFindUniqueOrThrowArgs> = z.object({
  select: client_branchSelectSchema.optional(),
  include: client_branchIncludeSchema.optional(),
  where: client_branchWhereUniqueInputSchema,
}).strict()

export const client_rateFindFirstArgsSchema: z.ZodType<Prisma.client_rateFindFirstArgs> = z.object({
  select: client_rateSelectSchema.optional(),
  include: client_rateIncludeSchema.optional(),
  where: client_rateWhereInputSchema.optional(),
  orderBy: z.union([ client_rateOrderByWithRelationInputSchema.array(),client_rateOrderByWithRelationInputSchema ]).optional(),
  cursor: client_rateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Client_rateScalarFieldEnumSchema,Client_rateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const client_rateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.client_rateFindFirstOrThrowArgs> = z.object({
  select: client_rateSelectSchema.optional(),
  include: client_rateIncludeSchema.optional(),
  where: client_rateWhereInputSchema.optional(),
  orderBy: z.union([ client_rateOrderByWithRelationInputSchema.array(),client_rateOrderByWithRelationInputSchema ]).optional(),
  cursor: client_rateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Client_rateScalarFieldEnumSchema,Client_rateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const client_rateFindManyArgsSchema: z.ZodType<Prisma.client_rateFindManyArgs> = z.object({
  select: client_rateSelectSchema.optional(),
  include: client_rateIncludeSchema.optional(),
  where: client_rateWhereInputSchema.optional(),
  orderBy: z.union([ client_rateOrderByWithRelationInputSchema.array(),client_rateOrderByWithRelationInputSchema ]).optional(),
  cursor: client_rateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Client_rateScalarFieldEnumSchema,Client_rateScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const client_rateAggregateArgsSchema: z.ZodType<Prisma.client_rateAggregateArgs> = z.object({
  where: client_rateWhereInputSchema.optional(),
  orderBy: z.union([ client_rateOrderByWithRelationInputSchema.array(),client_rateOrderByWithRelationInputSchema ]).optional(),
  cursor: client_rateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const client_rateGroupByArgsSchema: z.ZodType<Prisma.client_rateGroupByArgs> = z.object({
  where: client_rateWhereInputSchema.optional(),
  orderBy: z.union([ client_rateOrderByWithAggregationInputSchema.array(),client_rateOrderByWithAggregationInputSchema ]).optional(),
  by: Client_rateScalarFieldEnumSchema.array(),
  having: client_rateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const client_rateFindUniqueArgsSchema: z.ZodType<Prisma.client_rateFindUniqueArgs> = z.object({
  select: client_rateSelectSchema.optional(),
  include: client_rateIncludeSchema.optional(),
  where: client_rateWhereUniqueInputSchema,
}).strict()

export const client_rateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.client_rateFindUniqueOrThrowArgs> = z.object({
  select: client_rateSelectSchema.optional(),
  include: client_rateIncludeSchema.optional(),
  where: client_rateWhereUniqueInputSchema,
}).strict()

export const consumable_modelFindFirstArgsSchema: z.ZodType<Prisma.consumable_modelFindFirstArgs> = z.object({
  select: consumable_modelSelectSchema.optional(),
  include: consumable_modelIncludeSchema.optional(),
  where: consumable_modelWhereInputSchema.optional(),
  orderBy: z.union([ consumable_modelOrderByWithRelationInputSchema.array(),consumable_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: consumable_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Consumable_modelScalarFieldEnumSchema,Consumable_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const consumable_modelFindFirstOrThrowArgsSchema: z.ZodType<Prisma.consumable_modelFindFirstOrThrowArgs> = z.object({
  select: consumable_modelSelectSchema.optional(),
  include: consumable_modelIncludeSchema.optional(),
  where: consumable_modelWhereInputSchema.optional(),
  orderBy: z.union([ consumable_modelOrderByWithRelationInputSchema.array(),consumable_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: consumable_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Consumable_modelScalarFieldEnumSchema,Consumable_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const consumable_modelFindManyArgsSchema: z.ZodType<Prisma.consumable_modelFindManyArgs> = z.object({
  select: consumable_modelSelectSchema.optional(),
  include: consumable_modelIncludeSchema.optional(),
  where: consumable_modelWhereInputSchema.optional(),
  orderBy: z.union([ consumable_modelOrderByWithRelationInputSchema.array(),consumable_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: consumable_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Consumable_modelScalarFieldEnumSchema,Consumable_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const consumable_modelAggregateArgsSchema: z.ZodType<Prisma.consumable_modelAggregateArgs> = z.object({
  where: consumable_modelWhereInputSchema.optional(),
  orderBy: z.union([ consumable_modelOrderByWithRelationInputSchema.array(),consumable_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: consumable_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const consumable_modelGroupByArgsSchema: z.ZodType<Prisma.consumable_modelGroupByArgs> = z.object({
  where: consumable_modelWhereInputSchema.optional(),
  orderBy: z.union([ consumable_modelOrderByWithAggregationInputSchema.array(),consumable_modelOrderByWithAggregationInputSchema ]).optional(),
  by: Consumable_modelScalarFieldEnumSchema.array(),
  having: consumable_modelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const consumable_modelFindUniqueArgsSchema: z.ZodType<Prisma.consumable_modelFindUniqueArgs> = z.object({
  select: consumable_modelSelectSchema.optional(),
  include: consumable_modelIncludeSchema.optional(),
  where: consumable_modelWhereUniqueInputSchema,
}).strict()

export const consumable_modelFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.consumable_modelFindUniqueOrThrowArgs> = z.object({
  select: consumable_modelSelectSchema.optional(),
  include: consumable_modelIncludeSchema.optional(),
  where: consumable_modelWhereUniqueInputSchema,
}).strict()

export const deptFindFirstArgsSchema: z.ZodType<Prisma.deptFindFirstArgs> = z.object({
  select: deptSelectSchema.optional(),
  include: deptIncludeSchema.optional(),
  where: deptWhereInputSchema.optional(),
  orderBy: z.union([ deptOrderByWithRelationInputSchema.array(),deptOrderByWithRelationInputSchema ]).optional(),
  cursor: deptWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeptScalarFieldEnumSchema,DeptScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const deptFindFirstOrThrowArgsSchema: z.ZodType<Prisma.deptFindFirstOrThrowArgs> = z.object({
  select: deptSelectSchema.optional(),
  include: deptIncludeSchema.optional(),
  where: deptWhereInputSchema.optional(),
  orderBy: z.union([ deptOrderByWithRelationInputSchema.array(),deptOrderByWithRelationInputSchema ]).optional(),
  cursor: deptWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeptScalarFieldEnumSchema,DeptScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const deptFindManyArgsSchema: z.ZodType<Prisma.deptFindManyArgs> = z.object({
  select: deptSelectSchema.optional(),
  include: deptIncludeSchema.optional(),
  where: deptWhereInputSchema.optional(),
  orderBy: z.union([ deptOrderByWithRelationInputSchema.array(),deptOrderByWithRelationInputSchema ]).optional(),
  cursor: deptWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeptScalarFieldEnumSchema,DeptScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const deptAggregateArgsSchema: z.ZodType<Prisma.deptAggregateArgs> = z.object({
  where: deptWhereInputSchema.optional(),
  orderBy: z.union([ deptOrderByWithRelationInputSchema.array(),deptOrderByWithRelationInputSchema ]).optional(),
  cursor: deptWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const deptGroupByArgsSchema: z.ZodType<Prisma.deptGroupByArgs> = z.object({
  where: deptWhereInputSchema.optional(),
  orderBy: z.union([ deptOrderByWithAggregationInputSchema.array(),deptOrderByWithAggregationInputSchema ]).optional(),
  by: DeptScalarFieldEnumSchema.array(),
  having: deptScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const deptFindUniqueArgsSchema: z.ZodType<Prisma.deptFindUniqueArgs> = z.object({
  select: deptSelectSchema.optional(),
  include: deptIncludeSchema.optional(),
  where: deptWhereUniqueInputSchema,
}).strict()

export const deptFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.deptFindUniqueOrThrowArgs> = z.object({
  select: deptSelectSchema.optional(),
  include: deptIncludeSchema.optional(),
  where: deptWhereUniqueInputSchema,
}).strict()

export const deviceFindFirstArgsSchema: z.ZodType<Prisma.deviceFindFirstArgs> = z.object({
  select: deviceSelectSchema.optional(),
  include: deviceIncludeSchema.optional(),
  where: deviceWhereInputSchema.optional(),
  orderBy: z.union([ deviceOrderByWithRelationInputSchema.array(),deviceOrderByWithRelationInputSchema ]).optional(),
  cursor: deviceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeviceScalarFieldEnumSchema,DeviceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const deviceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.deviceFindFirstOrThrowArgs> = z.object({
  select: deviceSelectSchema.optional(),
  include: deviceIncludeSchema.optional(),
  where: deviceWhereInputSchema.optional(),
  orderBy: z.union([ deviceOrderByWithRelationInputSchema.array(),deviceOrderByWithRelationInputSchema ]).optional(),
  cursor: deviceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeviceScalarFieldEnumSchema,DeviceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const deviceFindManyArgsSchema: z.ZodType<Prisma.deviceFindManyArgs> = z.object({
  select: deviceSelectSchema.optional(),
  include: deviceIncludeSchema.optional(),
  where: deviceWhereInputSchema.optional(),
  orderBy: z.union([ deviceOrderByWithRelationInputSchema.array(),deviceOrderByWithRelationInputSchema ]).optional(),
  cursor: deviceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeviceScalarFieldEnumSchema,DeviceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const deviceAggregateArgsSchema: z.ZodType<Prisma.deviceAggregateArgs> = z.object({
  where: deviceWhereInputSchema.optional(),
  orderBy: z.union([ deviceOrderByWithRelationInputSchema.array(),deviceOrderByWithRelationInputSchema ]).optional(),
  cursor: deviceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const deviceGroupByArgsSchema: z.ZodType<Prisma.deviceGroupByArgs> = z.object({
  where: deviceWhereInputSchema.optional(),
  orderBy: z.union([ deviceOrderByWithAggregationInputSchema.array(),deviceOrderByWithAggregationInputSchema ]).optional(),
  by: DeviceScalarFieldEnumSchema.array(),
  having: deviceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const deviceFindUniqueArgsSchema: z.ZodType<Prisma.deviceFindUniqueArgs> = z.object({
  select: deviceSelectSchema.optional(),
  include: deviceIncludeSchema.optional(),
  where: deviceWhereUniqueInputSchema,
}).strict()

export const deviceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.deviceFindUniqueOrThrowArgs> = z.object({
  select: deviceSelectSchema.optional(),
  include: deviceIncludeSchema.optional(),
  where: deviceWhereUniqueInputSchema,
}).strict()

export const device_approvalFindFirstArgsSchema: z.ZodType<Prisma.device_approvalFindFirstArgs> = z.object({
  select: device_approvalSelectSchema.optional(),
  include: device_approvalIncludeSchema.optional(),
  where: device_approvalWhereInputSchema.optional(),
  orderBy: z.union([ device_approvalOrderByWithRelationInputSchema.array(),device_approvalOrderByWithRelationInputSchema ]).optional(),
  cursor: device_approvalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_approvalScalarFieldEnumSchema,Device_approvalScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_approvalFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_approvalFindFirstOrThrowArgs> = z.object({
  select: device_approvalSelectSchema.optional(),
  include: device_approvalIncludeSchema.optional(),
  where: device_approvalWhereInputSchema.optional(),
  orderBy: z.union([ device_approvalOrderByWithRelationInputSchema.array(),device_approvalOrderByWithRelationInputSchema ]).optional(),
  cursor: device_approvalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_approvalScalarFieldEnumSchema,Device_approvalScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_approvalFindManyArgsSchema: z.ZodType<Prisma.device_approvalFindManyArgs> = z.object({
  select: device_approvalSelectSchema.optional(),
  include: device_approvalIncludeSchema.optional(),
  where: device_approvalWhereInputSchema.optional(),
  orderBy: z.union([ device_approvalOrderByWithRelationInputSchema.array(),device_approvalOrderByWithRelationInputSchema ]).optional(),
  cursor: device_approvalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_approvalScalarFieldEnumSchema,Device_approvalScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_approvalAggregateArgsSchema: z.ZodType<Prisma.device_approvalAggregateArgs> = z.object({
  where: device_approvalWhereInputSchema.optional(),
  orderBy: z.union([ device_approvalOrderByWithRelationInputSchema.array(),device_approvalOrderByWithRelationInputSchema ]).optional(),
  cursor: device_approvalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_approvalGroupByArgsSchema: z.ZodType<Prisma.device_approvalGroupByArgs> = z.object({
  where: device_approvalWhereInputSchema.optional(),
  orderBy: z.union([ device_approvalOrderByWithAggregationInputSchema.array(),device_approvalOrderByWithAggregationInputSchema ]).optional(),
  by: Device_approvalScalarFieldEnumSchema.array(),
  having: device_approvalScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_approvalFindUniqueArgsSchema: z.ZodType<Prisma.device_approvalFindUniqueArgs> = z.object({
  select: device_approvalSelectSchema.optional(),
  include: device_approvalIncludeSchema.optional(),
  where: device_approvalWhereUniqueInputSchema,
}).strict()

export const device_approvalFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_approvalFindUniqueOrThrowArgs> = z.object({
  select: device_approvalSelectSchema.optional(),
  include: device_approvalIncludeSchema.optional(),
  where: device_approvalWhereUniqueInputSchema,
}).strict()

export const device_approval_typeFindFirstArgsSchema: z.ZodType<Prisma.device_approval_typeFindFirstArgs> = z.object({
  select: device_approval_typeSelectSchema.optional(),
  include: device_approval_typeIncludeSchema.optional(),
  where: device_approval_typeWhereInputSchema.optional(),
  orderBy: z.union([ device_approval_typeOrderByWithRelationInputSchema.array(),device_approval_typeOrderByWithRelationInputSchema ]).optional(),
  cursor: device_approval_typeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_approval_typeScalarFieldEnumSchema,Device_approval_typeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_approval_typeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_approval_typeFindFirstOrThrowArgs> = z.object({
  select: device_approval_typeSelectSchema.optional(),
  include: device_approval_typeIncludeSchema.optional(),
  where: device_approval_typeWhereInputSchema.optional(),
  orderBy: z.union([ device_approval_typeOrderByWithRelationInputSchema.array(),device_approval_typeOrderByWithRelationInputSchema ]).optional(),
  cursor: device_approval_typeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_approval_typeScalarFieldEnumSchema,Device_approval_typeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_approval_typeFindManyArgsSchema: z.ZodType<Prisma.device_approval_typeFindManyArgs> = z.object({
  select: device_approval_typeSelectSchema.optional(),
  include: device_approval_typeIncludeSchema.optional(),
  where: device_approval_typeWhereInputSchema.optional(),
  orderBy: z.union([ device_approval_typeOrderByWithRelationInputSchema.array(),device_approval_typeOrderByWithRelationInputSchema ]).optional(),
  cursor: device_approval_typeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_approval_typeScalarFieldEnumSchema,Device_approval_typeScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_approval_typeAggregateArgsSchema: z.ZodType<Prisma.device_approval_typeAggregateArgs> = z.object({
  where: device_approval_typeWhereInputSchema.optional(),
  orderBy: z.union([ device_approval_typeOrderByWithRelationInputSchema.array(),device_approval_typeOrderByWithRelationInputSchema ]).optional(),
  cursor: device_approval_typeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_approval_typeGroupByArgsSchema: z.ZodType<Prisma.device_approval_typeGroupByArgs> = z.object({
  where: device_approval_typeWhereInputSchema.optional(),
  orderBy: z.union([ device_approval_typeOrderByWithAggregationInputSchema.array(),device_approval_typeOrderByWithAggregationInputSchema ]).optional(),
  by: Device_approval_typeScalarFieldEnumSchema.array(),
  having: device_approval_typeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_approval_typeFindUniqueArgsSchema: z.ZodType<Prisma.device_approval_typeFindUniqueArgs> = z.object({
  select: device_approval_typeSelectSchema.optional(),
  include: device_approval_typeIncludeSchema.optional(),
  where: device_approval_typeWhereUniqueInputSchema,
}).strict()

export const device_approval_typeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_approval_typeFindUniqueOrThrowArgs> = z.object({
  select: device_approval_typeSelectSchema.optional(),
  include: device_approval_typeIncludeSchema.optional(),
  where: device_approval_typeWhereUniqueInputSchema,
}).strict()

export const device_consumable_compatibilityFindFirstArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityFindFirstArgs> = z.object({
  select: device_consumable_compatibilitySelectSchema.optional(),
  include: device_consumable_compatibilityIncludeSchema.optional(),
  where: device_consumable_compatibilityWhereInputSchema.optional(),
  orderBy: z.union([ device_consumable_compatibilityOrderByWithRelationInputSchema.array(),device_consumable_compatibilityOrderByWithRelationInputSchema ]).optional(),
  cursor: device_consumable_compatibilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_consumable_compatibilityScalarFieldEnumSchema,Device_consumable_compatibilityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_consumable_compatibilityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityFindFirstOrThrowArgs> = z.object({
  select: device_consumable_compatibilitySelectSchema.optional(),
  include: device_consumable_compatibilityIncludeSchema.optional(),
  where: device_consumable_compatibilityWhereInputSchema.optional(),
  orderBy: z.union([ device_consumable_compatibilityOrderByWithRelationInputSchema.array(),device_consumable_compatibilityOrderByWithRelationInputSchema ]).optional(),
  cursor: device_consumable_compatibilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_consumable_compatibilityScalarFieldEnumSchema,Device_consumable_compatibilityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_consumable_compatibilityFindManyArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityFindManyArgs> = z.object({
  select: device_consumable_compatibilitySelectSchema.optional(),
  include: device_consumable_compatibilityIncludeSchema.optional(),
  where: device_consumable_compatibilityWhereInputSchema.optional(),
  orderBy: z.union([ device_consumable_compatibilityOrderByWithRelationInputSchema.array(),device_consumable_compatibilityOrderByWithRelationInputSchema ]).optional(),
  cursor: device_consumable_compatibilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_consumable_compatibilityScalarFieldEnumSchema,Device_consumable_compatibilityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_consumable_compatibilityAggregateArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityAggregateArgs> = z.object({
  where: device_consumable_compatibilityWhereInputSchema.optional(),
  orderBy: z.union([ device_consumable_compatibilityOrderByWithRelationInputSchema.array(),device_consumable_compatibilityOrderByWithRelationInputSchema ]).optional(),
  cursor: device_consumable_compatibilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_consumable_compatibilityGroupByArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityGroupByArgs> = z.object({
  where: device_consumable_compatibilityWhereInputSchema.optional(),
  orderBy: z.union([ device_consumable_compatibilityOrderByWithAggregationInputSchema.array(),device_consumable_compatibilityOrderByWithAggregationInputSchema ]).optional(),
  by: Device_consumable_compatibilityScalarFieldEnumSchema.array(),
  having: device_consumable_compatibilityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_consumable_compatibilityFindUniqueArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityFindUniqueArgs> = z.object({
  select: device_consumable_compatibilitySelectSchema.optional(),
  include: device_consumable_compatibilityIncludeSchema.optional(),
  where: device_consumable_compatibilityWhereUniqueInputSchema,
}).strict()

export const device_consumable_compatibilityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityFindUniqueOrThrowArgs> = z.object({
  select: device_consumable_compatibilitySelectSchema.optional(),
  include: device_consumable_compatibilityIncludeSchema.optional(),
  where: device_consumable_compatibilityWhereUniqueInputSchema,
}).strict()

export const device_driverFindFirstArgsSchema: z.ZodType<Prisma.device_driverFindFirstArgs> = z.object({
  select: device_driverSelectSchema.optional(),
  include: device_driverIncludeSchema.optional(),
  where: device_driverWhereInputSchema.optional(),
  orderBy: z.union([ device_driverOrderByWithRelationInputSchema.array(),device_driverOrderByWithRelationInputSchema ]).optional(),
  cursor: device_driverWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_driverScalarFieldEnumSchema,Device_driverScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_driverFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_driverFindFirstOrThrowArgs> = z.object({
  select: device_driverSelectSchema.optional(),
  include: device_driverIncludeSchema.optional(),
  where: device_driverWhereInputSchema.optional(),
  orderBy: z.union([ device_driverOrderByWithRelationInputSchema.array(),device_driverOrderByWithRelationInputSchema ]).optional(),
  cursor: device_driverWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_driverScalarFieldEnumSchema,Device_driverScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_driverFindManyArgsSchema: z.ZodType<Prisma.device_driverFindManyArgs> = z.object({
  select: device_driverSelectSchema.optional(),
  include: device_driverIncludeSchema.optional(),
  where: device_driverWhereInputSchema.optional(),
  orderBy: z.union([ device_driverOrderByWithRelationInputSchema.array(),device_driverOrderByWithRelationInputSchema ]).optional(),
  cursor: device_driverWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_driverScalarFieldEnumSchema,Device_driverScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_driverAggregateArgsSchema: z.ZodType<Prisma.device_driverAggregateArgs> = z.object({
  where: device_driverWhereInputSchema.optional(),
  orderBy: z.union([ device_driverOrderByWithRelationInputSchema.array(),device_driverOrderByWithRelationInputSchema ]).optional(),
  cursor: device_driverWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_driverGroupByArgsSchema: z.ZodType<Prisma.device_driverGroupByArgs> = z.object({
  where: device_driverWhereInputSchema.optional(),
  orderBy: z.union([ device_driverOrderByWithAggregationInputSchema.array(),device_driverOrderByWithAggregationInputSchema ]).optional(),
  by: Device_driverScalarFieldEnumSchema.array(),
  having: device_driverScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_driverFindUniqueArgsSchema: z.ZodType<Prisma.device_driverFindUniqueArgs> = z.object({
  select: device_driverSelectSchema.optional(),
  include: device_driverIncludeSchema.optional(),
  where: device_driverWhereUniqueInputSchema,
}).strict()

export const device_driverFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_driverFindUniqueOrThrowArgs> = z.object({
  select: device_driverSelectSchema.optional(),
  include: device_driverIncludeSchema.optional(),
  where: device_driverWhereUniqueInputSchema,
}).strict()

export const device_inspection_logFindFirstArgsSchema: z.ZodType<Prisma.device_inspection_logFindFirstArgs> = z.object({
  select: device_inspection_logSelectSchema.optional(),
  include: device_inspection_logIncludeSchema.optional(),
  where: device_inspection_logWhereInputSchema.optional(),
  orderBy: z.union([ device_inspection_logOrderByWithRelationInputSchema.array(),device_inspection_logOrderByWithRelationInputSchema ]).optional(),
  cursor: device_inspection_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_inspection_logScalarFieldEnumSchema,Device_inspection_logScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_inspection_logFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_inspection_logFindFirstOrThrowArgs> = z.object({
  select: device_inspection_logSelectSchema.optional(),
  include: device_inspection_logIncludeSchema.optional(),
  where: device_inspection_logWhereInputSchema.optional(),
  orderBy: z.union([ device_inspection_logOrderByWithRelationInputSchema.array(),device_inspection_logOrderByWithRelationInputSchema ]).optional(),
  cursor: device_inspection_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_inspection_logScalarFieldEnumSchema,Device_inspection_logScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_inspection_logFindManyArgsSchema: z.ZodType<Prisma.device_inspection_logFindManyArgs> = z.object({
  select: device_inspection_logSelectSchema.optional(),
  include: device_inspection_logIncludeSchema.optional(),
  where: device_inspection_logWhereInputSchema.optional(),
  orderBy: z.union([ device_inspection_logOrderByWithRelationInputSchema.array(),device_inspection_logOrderByWithRelationInputSchema ]).optional(),
  cursor: device_inspection_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_inspection_logScalarFieldEnumSchema,Device_inspection_logScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_inspection_logAggregateArgsSchema: z.ZodType<Prisma.device_inspection_logAggregateArgs> = z.object({
  where: device_inspection_logWhereInputSchema.optional(),
  orderBy: z.union([ device_inspection_logOrderByWithRelationInputSchema.array(),device_inspection_logOrderByWithRelationInputSchema ]).optional(),
  cursor: device_inspection_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_inspection_logGroupByArgsSchema: z.ZodType<Prisma.device_inspection_logGroupByArgs> = z.object({
  where: device_inspection_logWhereInputSchema.optional(),
  orderBy: z.union([ device_inspection_logOrderByWithAggregationInputSchema.array(),device_inspection_logOrderByWithAggregationInputSchema ]).optional(),
  by: Device_inspection_logScalarFieldEnumSchema.array(),
  having: device_inspection_logScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_inspection_logFindUniqueArgsSchema: z.ZodType<Prisma.device_inspection_logFindUniqueArgs> = z.object({
  select: device_inspection_logSelectSchema.optional(),
  include: device_inspection_logIncludeSchema.optional(),
  where: device_inspection_logWhereUniqueInputSchema,
}).strict()

export const device_inspection_logFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_inspection_logFindUniqueOrThrowArgs> = z.object({
  select: device_inspection_logSelectSchema.optional(),
  include: device_inspection_logIncludeSchema.optional(),
  where: device_inspection_logWhereUniqueInputSchema,
}).strict()

export const device_install_infoFindFirstArgsSchema: z.ZodType<Prisma.device_install_infoFindFirstArgs> = z.object({
  select: device_install_infoSelectSchema.optional(),
  include: device_install_infoIncludeSchema.optional(),
  where: device_install_infoWhereInputSchema.optional(),
  orderBy: z.union([ device_install_infoOrderByWithRelationInputSchema.array(),device_install_infoOrderByWithRelationInputSchema ]).optional(),
  cursor: device_install_infoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_install_infoScalarFieldEnumSchema,Device_install_infoScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_install_infoFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_install_infoFindFirstOrThrowArgs> = z.object({
  select: device_install_infoSelectSchema.optional(),
  include: device_install_infoIncludeSchema.optional(),
  where: device_install_infoWhereInputSchema.optional(),
  orderBy: z.union([ device_install_infoOrderByWithRelationInputSchema.array(),device_install_infoOrderByWithRelationInputSchema ]).optional(),
  cursor: device_install_infoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_install_infoScalarFieldEnumSchema,Device_install_infoScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_install_infoFindManyArgsSchema: z.ZodType<Prisma.device_install_infoFindManyArgs> = z.object({
  select: device_install_infoSelectSchema.optional(),
  include: device_install_infoIncludeSchema.optional(),
  where: device_install_infoWhereInputSchema.optional(),
  orderBy: z.union([ device_install_infoOrderByWithRelationInputSchema.array(),device_install_infoOrderByWithRelationInputSchema ]).optional(),
  cursor: device_install_infoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_install_infoScalarFieldEnumSchema,Device_install_infoScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_install_infoAggregateArgsSchema: z.ZodType<Prisma.device_install_infoAggregateArgs> = z.object({
  where: device_install_infoWhereInputSchema.optional(),
  orderBy: z.union([ device_install_infoOrderByWithRelationInputSchema.array(),device_install_infoOrderByWithRelationInputSchema ]).optional(),
  cursor: device_install_infoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_install_infoGroupByArgsSchema: z.ZodType<Prisma.device_install_infoGroupByArgs> = z.object({
  where: device_install_infoWhereInputSchema.optional(),
  orderBy: z.union([ device_install_infoOrderByWithAggregationInputSchema.array(),device_install_infoOrderByWithAggregationInputSchema ]).optional(),
  by: Device_install_infoScalarFieldEnumSchema.array(),
  having: device_install_infoScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_install_infoFindUniqueArgsSchema: z.ZodType<Prisma.device_install_infoFindUniqueArgs> = z.object({
  select: device_install_infoSelectSchema.optional(),
  include: device_install_infoIncludeSchema.optional(),
  where: device_install_infoWhereUniqueInputSchema,
}).strict()

export const device_install_infoFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_install_infoFindUniqueOrThrowArgs> = z.object({
  select: device_install_infoSelectSchema.optional(),
  include: device_install_infoIncludeSchema.optional(),
  where: device_install_infoWhereUniqueInputSchema,
}).strict()

export const device_location_logFindFirstArgsSchema: z.ZodType<Prisma.device_location_logFindFirstArgs> = z.object({
  select: device_location_logSelectSchema.optional(),
  include: device_location_logIncludeSchema.optional(),
  where: device_location_logWhereInputSchema.optional(),
  orderBy: z.union([ device_location_logOrderByWithRelationInputSchema.array(),device_location_logOrderByWithRelationInputSchema ]).optional(),
  cursor: device_location_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_location_logScalarFieldEnumSchema,Device_location_logScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_location_logFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_location_logFindFirstOrThrowArgs> = z.object({
  select: device_location_logSelectSchema.optional(),
  include: device_location_logIncludeSchema.optional(),
  where: device_location_logWhereInputSchema.optional(),
  orderBy: z.union([ device_location_logOrderByWithRelationInputSchema.array(),device_location_logOrderByWithRelationInputSchema ]).optional(),
  cursor: device_location_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_location_logScalarFieldEnumSchema,Device_location_logScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_location_logFindManyArgsSchema: z.ZodType<Prisma.device_location_logFindManyArgs> = z.object({
  select: device_location_logSelectSchema.optional(),
  include: device_location_logIncludeSchema.optional(),
  where: device_location_logWhereInputSchema.optional(),
  orderBy: z.union([ device_location_logOrderByWithRelationInputSchema.array(),device_location_logOrderByWithRelationInputSchema ]).optional(),
  cursor: device_location_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_location_logScalarFieldEnumSchema,Device_location_logScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_location_logAggregateArgsSchema: z.ZodType<Prisma.device_location_logAggregateArgs> = z.object({
  where: device_location_logWhereInputSchema.optional(),
  orderBy: z.union([ device_location_logOrderByWithRelationInputSchema.array(),device_location_logOrderByWithRelationInputSchema ]).optional(),
  cursor: device_location_logWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_location_logGroupByArgsSchema: z.ZodType<Prisma.device_location_logGroupByArgs> = z.object({
  where: device_location_logWhereInputSchema.optional(),
  orderBy: z.union([ device_location_logOrderByWithAggregationInputSchema.array(),device_location_logOrderByWithAggregationInputSchema ]).optional(),
  by: Device_location_logScalarFieldEnumSchema.array(),
  having: device_location_logScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_location_logFindUniqueArgsSchema: z.ZodType<Prisma.device_location_logFindUniqueArgs> = z.object({
  select: device_location_logSelectSchema.optional(),
  include: device_location_logIncludeSchema.optional(),
  where: device_location_logWhereUniqueInputSchema,
}).strict()

export const device_location_logFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_location_logFindUniqueOrThrowArgs> = z.object({
  select: device_location_logSelectSchema.optional(),
  include: device_location_logIncludeSchema.optional(),
  where: device_location_logWhereUniqueInputSchema,
}).strict()

export const device_modelFindFirstArgsSchema: z.ZodType<Prisma.device_modelFindFirstArgs> = z.object({
  select: device_modelSelectSchema.optional(),
  include: device_modelIncludeSchema.optional(),
  where: device_modelWhereInputSchema.optional(),
  orderBy: z.union([ device_modelOrderByWithRelationInputSchema.array(),device_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: device_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_modelScalarFieldEnumSchema,Device_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_modelFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_modelFindFirstOrThrowArgs> = z.object({
  select: device_modelSelectSchema.optional(),
  include: device_modelIncludeSchema.optional(),
  where: device_modelWhereInputSchema.optional(),
  orderBy: z.union([ device_modelOrderByWithRelationInputSchema.array(),device_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: device_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_modelScalarFieldEnumSchema,Device_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_modelFindManyArgsSchema: z.ZodType<Prisma.device_modelFindManyArgs> = z.object({
  select: device_modelSelectSchema.optional(),
  include: device_modelIncludeSchema.optional(),
  where: device_modelWhereInputSchema.optional(),
  orderBy: z.union([ device_modelOrderByWithRelationInputSchema.array(),device_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: device_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_modelScalarFieldEnumSchema,Device_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_modelAggregateArgsSchema: z.ZodType<Prisma.device_modelAggregateArgs> = z.object({
  where: device_modelWhereInputSchema.optional(),
  orderBy: z.union([ device_modelOrderByWithRelationInputSchema.array(),device_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: device_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_modelGroupByArgsSchema: z.ZodType<Prisma.device_modelGroupByArgs> = z.object({
  where: device_modelWhereInputSchema.optional(),
  orderBy: z.union([ device_modelOrderByWithAggregationInputSchema.array(),device_modelOrderByWithAggregationInputSchema ]).optional(),
  by: Device_modelScalarFieldEnumSchema.array(),
  having: device_modelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_modelFindUniqueArgsSchema: z.ZodType<Prisma.device_modelFindUniqueArgs> = z.object({
  select: device_modelSelectSchema.optional(),
  include: device_modelIncludeSchema.optional(),
  where: device_modelWhereUniqueInputSchema,
}).strict()

export const device_modelFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_modelFindUniqueOrThrowArgs> = z.object({
  select: device_modelSelectSchema.optional(),
  include: device_modelIncludeSchema.optional(),
  where: device_modelWhereUniqueInputSchema,
}).strict()

export const device_optionFindFirstArgsSchema: z.ZodType<Prisma.device_optionFindFirstArgs> = z.object({
  select: device_optionSelectSchema.optional(),
  include: device_optionIncludeSchema.optional(),
  where: device_optionWhereInputSchema.optional(),
  orderBy: z.union([ device_optionOrderByWithRelationInputSchema.array(),device_optionOrderByWithRelationInputSchema ]).optional(),
  cursor: device_optionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_optionScalarFieldEnumSchema,Device_optionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_optionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_optionFindFirstOrThrowArgs> = z.object({
  select: device_optionSelectSchema.optional(),
  include: device_optionIncludeSchema.optional(),
  where: device_optionWhereInputSchema.optional(),
  orderBy: z.union([ device_optionOrderByWithRelationInputSchema.array(),device_optionOrderByWithRelationInputSchema ]).optional(),
  cursor: device_optionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_optionScalarFieldEnumSchema,Device_optionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_optionFindManyArgsSchema: z.ZodType<Prisma.device_optionFindManyArgs> = z.object({
  select: device_optionSelectSchema.optional(),
  include: device_optionIncludeSchema.optional(),
  where: device_optionWhereInputSchema.optional(),
  orderBy: z.union([ device_optionOrderByWithRelationInputSchema.array(),device_optionOrderByWithRelationInputSchema ]).optional(),
  cursor: device_optionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_optionScalarFieldEnumSchema,Device_optionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_optionAggregateArgsSchema: z.ZodType<Prisma.device_optionAggregateArgs> = z.object({
  where: device_optionWhereInputSchema.optional(),
  orderBy: z.union([ device_optionOrderByWithRelationInputSchema.array(),device_optionOrderByWithRelationInputSchema ]).optional(),
  cursor: device_optionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_optionGroupByArgsSchema: z.ZodType<Prisma.device_optionGroupByArgs> = z.object({
  where: device_optionWhereInputSchema.optional(),
  orderBy: z.union([ device_optionOrderByWithAggregationInputSchema.array(),device_optionOrderByWithAggregationInputSchema ]).optional(),
  by: Device_optionScalarFieldEnumSchema.array(),
  having: device_optionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_optionFindUniqueArgsSchema: z.ZodType<Prisma.device_optionFindUniqueArgs> = z.object({
  select: device_optionSelectSchema.optional(),
  include: device_optionIncludeSchema.optional(),
  where: device_optionWhereUniqueInputSchema,
}).strict()

export const device_optionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_optionFindUniqueOrThrowArgs> = z.object({
  select: device_optionSelectSchema.optional(),
  include: device_optionIncludeSchema.optional(),
  where: device_optionWhereUniqueInputSchema,
}).strict()

export const device_option_compatibilityFindFirstArgsSchema: z.ZodType<Prisma.device_option_compatibilityFindFirstArgs> = z.object({
  select: device_option_compatibilitySelectSchema.optional(),
  include: device_option_compatibilityIncludeSchema.optional(),
  where: device_option_compatibilityWhereInputSchema.optional(),
  orderBy: z.union([ device_option_compatibilityOrderByWithRelationInputSchema.array(),device_option_compatibilityOrderByWithRelationInputSchema ]).optional(),
  cursor: device_option_compatibilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_option_compatibilityScalarFieldEnumSchema,Device_option_compatibilityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_option_compatibilityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_option_compatibilityFindFirstOrThrowArgs> = z.object({
  select: device_option_compatibilitySelectSchema.optional(),
  include: device_option_compatibilityIncludeSchema.optional(),
  where: device_option_compatibilityWhereInputSchema.optional(),
  orderBy: z.union([ device_option_compatibilityOrderByWithRelationInputSchema.array(),device_option_compatibilityOrderByWithRelationInputSchema ]).optional(),
  cursor: device_option_compatibilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_option_compatibilityScalarFieldEnumSchema,Device_option_compatibilityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_option_compatibilityFindManyArgsSchema: z.ZodType<Prisma.device_option_compatibilityFindManyArgs> = z.object({
  select: device_option_compatibilitySelectSchema.optional(),
  include: device_option_compatibilityIncludeSchema.optional(),
  where: device_option_compatibilityWhereInputSchema.optional(),
  orderBy: z.union([ device_option_compatibilityOrderByWithRelationInputSchema.array(),device_option_compatibilityOrderByWithRelationInputSchema ]).optional(),
  cursor: device_option_compatibilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_option_compatibilityScalarFieldEnumSchema,Device_option_compatibilityScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_option_compatibilityAggregateArgsSchema: z.ZodType<Prisma.device_option_compatibilityAggregateArgs> = z.object({
  where: device_option_compatibilityWhereInputSchema.optional(),
  orderBy: z.union([ device_option_compatibilityOrderByWithRelationInputSchema.array(),device_option_compatibilityOrderByWithRelationInputSchema ]).optional(),
  cursor: device_option_compatibilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_option_compatibilityGroupByArgsSchema: z.ZodType<Prisma.device_option_compatibilityGroupByArgs> = z.object({
  where: device_option_compatibilityWhereInputSchema.optional(),
  orderBy: z.union([ device_option_compatibilityOrderByWithAggregationInputSchema.array(),device_option_compatibilityOrderByWithAggregationInputSchema ]).optional(),
  by: Device_option_compatibilityScalarFieldEnumSchema.array(),
  having: device_option_compatibilityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_option_compatibilityFindUniqueArgsSchema: z.ZodType<Prisma.device_option_compatibilityFindUniqueArgs> = z.object({
  select: device_option_compatibilitySelectSchema.optional(),
  include: device_option_compatibilityIncludeSchema.optional(),
  where: device_option_compatibilityWhereUniqueInputSchema,
}).strict()

export const device_option_compatibilityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_option_compatibilityFindUniqueOrThrowArgs> = z.object({
  select: device_option_compatibilitySelectSchema.optional(),
  include: device_option_compatibilityIncludeSchema.optional(),
  where: device_option_compatibilityWhereUniqueInputSchema,
}).strict()

export const device_statusFindFirstArgsSchema: z.ZodType<Prisma.device_statusFindFirstArgs> = z.object({
  select: device_statusSelectSchema.optional(),
  include: device_statusIncludeSchema.optional(),
  where: device_statusWhereInputSchema.optional(),
  orderBy: z.union([ device_statusOrderByWithRelationInputSchema.array(),device_statusOrderByWithRelationInputSchema ]).optional(),
  cursor: device_statusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_statusScalarFieldEnumSchema,Device_statusScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_statusFindFirstOrThrowArgsSchema: z.ZodType<Prisma.device_statusFindFirstOrThrowArgs> = z.object({
  select: device_statusSelectSchema.optional(),
  include: device_statusIncludeSchema.optional(),
  where: device_statusWhereInputSchema.optional(),
  orderBy: z.union([ device_statusOrderByWithRelationInputSchema.array(),device_statusOrderByWithRelationInputSchema ]).optional(),
  cursor: device_statusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_statusScalarFieldEnumSchema,Device_statusScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_statusFindManyArgsSchema: z.ZodType<Prisma.device_statusFindManyArgs> = z.object({
  select: device_statusSelectSchema.optional(),
  include: device_statusIncludeSchema.optional(),
  where: device_statusWhereInputSchema.optional(),
  orderBy: z.union([ device_statusOrderByWithRelationInputSchema.array(),device_statusOrderByWithRelationInputSchema ]).optional(),
  cursor: device_statusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Device_statusScalarFieldEnumSchema,Device_statusScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const device_statusAggregateArgsSchema: z.ZodType<Prisma.device_statusAggregateArgs> = z.object({
  where: device_statusWhereInputSchema.optional(),
  orderBy: z.union([ device_statusOrderByWithRelationInputSchema.array(),device_statusOrderByWithRelationInputSchema ]).optional(),
  cursor: device_statusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_statusGroupByArgsSchema: z.ZodType<Prisma.device_statusGroupByArgs> = z.object({
  where: device_statusWhereInputSchema.optional(),
  orderBy: z.union([ device_statusOrderByWithAggregationInputSchema.array(),device_statusOrderByWithAggregationInputSchema ]).optional(),
  by: Device_statusScalarFieldEnumSchema.array(),
  having: device_statusScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const device_statusFindUniqueArgsSchema: z.ZodType<Prisma.device_statusFindUniqueArgs> = z.object({
  select: device_statusSelectSchema.optional(),
  include: device_statusIncludeSchema.optional(),
  where: device_statusWhereUniqueInputSchema,
}).strict()

export const device_statusFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.device_statusFindUniqueOrThrowArgs> = z.object({
  select: device_statusSelectSchema.optional(),
  include: device_statusIncludeSchema.optional(),
  where: device_statusWhereUniqueInputSchema,
}).strict()

export const inspection_approvalFindFirstArgsSchema: z.ZodType<Prisma.inspection_approvalFindFirstArgs> = z.object({
  select: inspection_approvalSelectSchema.optional(),
  include: inspection_approvalIncludeSchema.optional(),
  where: inspection_approvalWhereInputSchema.optional(),
  orderBy: z.union([ inspection_approvalOrderByWithRelationInputSchema.array(),inspection_approvalOrderByWithRelationInputSchema ]).optional(),
  cursor: inspection_approvalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Inspection_approvalScalarFieldEnumSchema,Inspection_approvalScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const inspection_approvalFindFirstOrThrowArgsSchema: z.ZodType<Prisma.inspection_approvalFindFirstOrThrowArgs> = z.object({
  select: inspection_approvalSelectSchema.optional(),
  include: inspection_approvalIncludeSchema.optional(),
  where: inspection_approvalWhereInputSchema.optional(),
  orderBy: z.union([ inspection_approvalOrderByWithRelationInputSchema.array(),inspection_approvalOrderByWithRelationInputSchema ]).optional(),
  cursor: inspection_approvalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Inspection_approvalScalarFieldEnumSchema,Inspection_approvalScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const inspection_approvalFindManyArgsSchema: z.ZodType<Prisma.inspection_approvalFindManyArgs> = z.object({
  select: inspection_approvalSelectSchema.optional(),
  include: inspection_approvalIncludeSchema.optional(),
  where: inspection_approvalWhereInputSchema.optional(),
  orderBy: z.union([ inspection_approvalOrderByWithRelationInputSchema.array(),inspection_approvalOrderByWithRelationInputSchema ]).optional(),
  cursor: inspection_approvalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Inspection_approvalScalarFieldEnumSchema,Inspection_approvalScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const inspection_approvalAggregateArgsSchema: z.ZodType<Prisma.inspection_approvalAggregateArgs> = z.object({
  where: inspection_approvalWhereInputSchema.optional(),
  orderBy: z.union([ inspection_approvalOrderByWithRelationInputSchema.array(),inspection_approvalOrderByWithRelationInputSchema ]).optional(),
  cursor: inspection_approvalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const inspection_approvalGroupByArgsSchema: z.ZodType<Prisma.inspection_approvalGroupByArgs> = z.object({
  where: inspection_approvalWhereInputSchema.optional(),
  orderBy: z.union([ inspection_approvalOrderByWithAggregationInputSchema.array(),inspection_approvalOrderByWithAggregationInputSchema ]).optional(),
  by: Inspection_approvalScalarFieldEnumSchema.array(),
  having: inspection_approvalScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const inspection_approvalFindUniqueArgsSchema: z.ZodType<Prisma.inspection_approvalFindUniqueArgs> = z.object({
  select: inspection_approvalSelectSchema.optional(),
  include: inspection_approvalIncludeSchema.optional(),
  where: inspection_approvalWhereUniqueInputSchema,
}).strict()

export const inspection_approvalFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.inspection_approvalFindUniqueOrThrowArgs> = z.object({
  select: inspection_approvalSelectSchema.optional(),
  include: inspection_approvalIncludeSchema.optional(),
  where: inspection_approvalWhereUniqueInputSchema,
}).strict()

export const locationFindFirstArgsSchema: z.ZodType<Prisma.locationFindFirstArgs> = z.object({
  select: locationSelectSchema.optional(),
  include: locationIncludeSchema.optional(),
  where: locationWhereInputSchema.optional(),
  orderBy: z.union([ locationOrderByWithRelationInputSchema.array(),locationOrderByWithRelationInputSchema ]).optional(),
  cursor: locationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LocationScalarFieldEnumSchema,LocationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const locationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.locationFindFirstOrThrowArgs> = z.object({
  select: locationSelectSchema.optional(),
  include: locationIncludeSchema.optional(),
  where: locationWhereInputSchema.optional(),
  orderBy: z.union([ locationOrderByWithRelationInputSchema.array(),locationOrderByWithRelationInputSchema ]).optional(),
  cursor: locationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LocationScalarFieldEnumSchema,LocationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const locationFindManyArgsSchema: z.ZodType<Prisma.locationFindManyArgs> = z.object({
  select: locationSelectSchema.optional(),
  include: locationIncludeSchema.optional(),
  where: locationWhereInputSchema.optional(),
  orderBy: z.union([ locationOrderByWithRelationInputSchema.array(),locationOrderByWithRelationInputSchema ]).optional(),
  cursor: locationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LocationScalarFieldEnumSchema,LocationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const locationAggregateArgsSchema: z.ZodType<Prisma.locationAggregateArgs> = z.object({
  where: locationWhereInputSchema.optional(),
  orderBy: z.union([ locationOrderByWithRelationInputSchema.array(),locationOrderByWithRelationInputSchema ]).optional(),
  cursor: locationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const locationGroupByArgsSchema: z.ZodType<Prisma.locationGroupByArgs> = z.object({
  where: locationWhereInputSchema.optional(),
  orderBy: z.union([ locationOrderByWithAggregationInputSchema.array(),locationOrderByWithAggregationInputSchema ]).optional(),
  by: LocationScalarFieldEnumSchema.array(),
  having: locationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const locationFindUniqueArgsSchema: z.ZodType<Prisma.locationFindUniqueArgs> = z.object({
  select: locationSelectSchema.optional(),
  include: locationIncludeSchema.optional(),
  where: locationWhereUniqueInputSchema,
}).strict()

export const locationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.locationFindUniqueOrThrowArgs> = z.object({
  select: locationSelectSchema.optional(),
  include: locationIncludeSchema.optional(),
  where: locationWhereUniqueInputSchema,
}).strict()

export const option_modelFindFirstArgsSchema: z.ZodType<Prisma.option_modelFindFirstArgs> = z.object({
  select: option_modelSelectSchema.optional(),
  include: option_modelIncludeSchema.optional(),
  where: option_modelWhereInputSchema.optional(),
  orderBy: z.union([ option_modelOrderByWithRelationInputSchema.array(),option_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: option_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Option_modelScalarFieldEnumSchema,Option_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const option_modelFindFirstOrThrowArgsSchema: z.ZodType<Prisma.option_modelFindFirstOrThrowArgs> = z.object({
  select: option_modelSelectSchema.optional(),
  include: option_modelIncludeSchema.optional(),
  where: option_modelWhereInputSchema.optional(),
  orderBy: z.union([ option_modelOrderByWithRelationInputSchema.array(),option_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: option_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Option_modelScalarFieldEnumSchema,Option_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const option_modelFindManyArgsSchema: z.ZodType<Prisma.option_modelFindManyArgs> = z.object({
  select: option_modelSelectSchema.optional(),
  include: option_modelIncludeSchema.optional(),
  where: option_modelWhereInputSchema.optional(),
  orderBy: z.union([ option_modelOrderByWithRelationInputSchema.array(),option_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: option_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Option_modelScalarFieldEnumSchema,Option_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const option_modelAggregateArgsSchema: z.ZodType<Prisma.option_modelAggregateArgs> = z.object({
  where: option_modelWhereInputSchema.optional(),
  orderBy: z.union([ option_modelOrderByWithRelationInputSchema.array(),option_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: option_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const option_modelGroupByArgsSchema: z.ZodType<Prisma.option_modelGroupByArgs> = z.object({
  where: option_modelWhereInputSchema.optional(),
  orderBy: z.union([ option_modelOrderByWithAggregationInputSchema.array(),option_modelOrderByWithAggregationInputSchema ]).optional(),
  by: Option_modelScalarFieldEnumSchema.array(),
  having: option_modelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const option_modelFindUniqueArgsSchema: z.ZodType<Prisma.option_modelFindUniqueArgs> = z.object({
  select: option_modelSelectSchema.optional(),
  include: option_modelIncludeSchema.optional(),
  where: option_modelWhereUniqueInputSchema,
}).strict()

export const option_modelFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.option_modelFindUniqueOrThrowArgs> = z.object({
  select: option_modelSelectSchema.optional(),
  include: option_modelIncludeSchema.optional(),
  where: option_modelWhereUniqueInputSchema,
}).strict()

export const sidoFindFirstArgsSchema: z.ZodType<Prisma.sidoFindFirstArgs> = z.object({
  select: sidoSelectSchema.optional(),
  include: sidoIncludeSchema.optional(),
  where: sidoWhereInputSchema.optional(),
  orderBy: z.union([ sidoOrderByWithRelationInputSchema.array(),sidoOrderByWithRelationInputSchema ]).optional(),
  cursor: sidoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SidoScalarFieldEnumSchema,SidoScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const sidoFindFirstOrThrowArgsSchema: z.ZodType<Prisma.sidoFindFirstOrThrowArgs> = z.object({
  select: sidoSelectSchema.optional(),
  include: sidoIncludeSchema.optional(),
  where: sidoWhereInputSchema.optional(),
  orderBy: z.union([ sidoOrderByWithRelationInputSchema.array(),sidoOrderByWithRelationInputSchema ]).optional(),
  cursor: sidoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SidoScalarFieldEnumSchema,SidoScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const sidoFindManyArgsSchema: z.ZodType<Prisma.sidoFindManyArgs> = z.object({
  select: sidoSelectSchema.optional(),
  include: sidoIncludeSchema.optional(),
  where: sidoWhereInputSchema.optional(),
  orderBy: z.union([ sidoOrderByWithRelationInputSchema.array(),sidoOrderByWithRelationInputSchema ]).optional(),
  cursor: sidoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SidoScalarFieldEnumSchema,SidoScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const sidoAggregateArgsSchema: z.ZodType<Prisma.sidoAggregateArgs> = z.object({
  where: sidoWhereInputSchema.optional(),
  orderBy: z.union([ sidoOrderByWithRelationInputSchema.array(),sidoOrderByWithRelationInputSchema ]).optional(),
  cursor: sidoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const sidoGroupByArgsSchema: z.ZodType<Prisma.sidoGroupByArgs> = z.object({
  where: sidoWhereInputSchema.optional(),
  orderBy: z.union([ sidoOrderByWithAggregationInputSchema.array(),sidoOrderByWithAggregationInputSchema ]).optional(),
  by: SidoScalarFieldEnumSchema.array(),
  having: sidoScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const sidoFindUniqueArgsSchema: z.ZodType<Prisma.sidoFindUniqueArgs> = z.object({
  select: sidoSelectSchema.optional(),
  include: sidoIncludeSchema.optional(),
  where: sidoWhereUniqueInputSchema,
}).strict()

export const sidoFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.sidoFindUniqueOrThrowArgs> = z.object({
  select: sidoSelectSchema.optional(),
  include: sidoIncludeSchema.optional(),
  where: sidoWhereUniqueInputSchema,
}).strict()

export const sigunguFindFirstArgsSchema: z.ZodType<Prisma.sigunguFindFirstArgs> = z.object({
  select: sigunguSelectSchema.optional(),
  include: sigunguIncludeSchema.optional(),
  where: sigunguWhereInputSchema.optional(),
  orderBy: z.union([ sigunguOrderByWithRelationInputSchema.array(),sigunguOrderByWithRelationInputSchema ]).optional(),
  cursor: sigunguWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SigunguScalarFieldEnumSchema,SigunguScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const sigunguFindFirstOrThrowArgsSchema: z.ZodType<Prisma.sigunguFindFirstOrThrowArgs> = z.object({
  select: sigunguSelectSchema.optional(),
  include: sigunguIncludeSchema.optional(),
  where: sigunguWhereInputSchema.optional(),
  orderBy: z.union([ sigunguOrderByWithRelationInputSchema.array(),sigunguOrderByWithRelationInputSchema ]).optional(),
  cursor: sigunguWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SigunguScalarFieldEnumSchema,SigunguScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const sigunguFindManyArgsSchema: z.ZodType<Prisma.sigunguFindManyArgs> = z.object({
  select: sigunguSelectSchema.optional(),
  include: sigunguIncludeSchema.optional(),
  where: sigunguWhereInputSchema.optional(),
  orderBy: z.union([ sigunguOrderByWithRelationInputSchema.array(),sigunguOrderByWithRelationInputSchema ]).optional(),
  cursor: sigunguWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SigunguScalarFieldEnumSchema,SigunguScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const sigunguAggregateArgsSchema: z.ZodType<Prisma.sigunguAggregateArgs> = z.object({
  where: sigunguWhereInputSchema.optional(),
  orderBy: z.union([ sigunguOrderByWithRelationInputSchema.array(),sigunguOrderByWithRelationInputSchema ]).optional(),
  cursor: sigunguWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const sigunguGroupByArgsSchema: z.ZodType<Prisma.sigunguGroupByArgs> = z.object({
  where: sigunguWhereInputSchema.optional(),
  orderBy: z.union([ sigunguOrderByWithAggregationInputSchema.array(),sigunguOrderByWithAggregationInputSchema ]).optional(),
  by: SigunguScalarFieldEnumSchema.array(),
  having: sigunguScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const sigunguFindUniqueArgsSchema: z.ZodType<Prisma.sigunguFindUniqueArgs> = z.object({
  select: sigunguSelectSchema.optional(),
  include: sigunguIncludeSchema.optional(),
  where: sigunguWhereUniqueInputSchema,
}).strict()

export const sigunguFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.sigunguFindUniqueOrThrowArgs> = z.object({
  select: sigunguSelectSchema.optional(),
  include: sigunguIncludeSchema.optional(),
  where: sigunguWhereUniqueInputSchema,
}).strict()

export const userFindFirstArgsSchema: z.ZodType<Prisma.userFindFirstArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereInputSchema.optional(),
  orderBy: z.union([ userOrderByWithRelationInputSchema.array(),userOrderByWithRelationInputSchema ]).optional(),
  cursor: userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const userFindFirstOrThrowArgsSchema: z.ZodType<Prisma.userFindFirstOrThrowArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereInputSchema.optional(),
  orderBy: z.union([ userOrderByWithRelationInputSchema.array(),userOrderByWithRelationInputSchema ]).optional(),
  cursor: userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const userFindManyArgsSchema: z.ZodType<Prisma.userFindManyArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereInputSchema.optional(),
  orderBy: z.union([ userOrderByWithRelationInputSchema.array(),userOrderByWithRelationInputSchema ]).optional(),
  cursor: userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const userAggregateArgsSchema: z.ZodType<Prisma.userAggregateArgs> = z.object({
  where: userWhereInputSchema.optional(),
  orderBy: z.union([ userOrderByWithRelationInputSchema.array(),userOrderByWithRelationInputSchema ]).optional(),
  cursor: userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const userGroupByArgsSchema: z.ZodType<Prisma.userGroupByArgs> = z.object({
  where: userWhereInputSchema.optional(),
  orderBy: z.union([ userOrderByWithAggregationInputSchema.array(),userOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: userScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const userFindUniqueArgsSchema: z.ZodType<Prisma.userFindUniqueArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereUniqueInputSchema,
}).strict()

export const userFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.userFindUniqueOrThrowArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereUniqueInputSchema,
}).strict()

export const user_positionFindFirstArgsSchema: z.ZodType<Prisma.user_positionFindFirstArgs> = z.object({
  select: user_positionSelectSchema.optional(),
  include: user_positionIncludeSchema.optional(),
  where: user_positionWhereInputSchema.optional(),
  orderBy: z.union([ user_positionOrderByWithRelationInputSchema.array(),user_positionOrderByWithRelationInputSchema ]).optional(),
  cursor: user_positionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ User_positionScalarFieldEnumSchema,User_positionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const user_positionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.user_positionFindFirstOrThrowArgs> = z.object({
  select: user_positionSelectSchema.optional(),
  include: user_positionIncludeSchema.optional(),
  where: user_positionWhereInputSchema.optional(),
  orderBy: z.union([ user_positionOrderByWithRelationInputSchema.array(),user_positionOrderByWithRelationInputSchema ]).optional(),
  cursor: user_positionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ User_positionScalarFieldEnumSchema,User_positionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const user_positionFindManyArgsSchema: z.ZodType<Prisma.user_positionFindManyArgs> = z.object({
  select: user_positionSelectSchema.optional(),
  include: user_positionIncludeSchema.optional(),
  where: user_positionWhereInputSchema.optional(),
  orderBy: z.union([ user_positionOrderByWithRelationInputSchema.array(),user_positionOrderByWithRelationInputSchema ]).optional(),
  cursor: user_positionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ User_positionScalarFieldEnumSchema,User_positionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const user_positionAggregateArgsSchema: z.ZodType<Prisma.user_positionAggregateArgs> = z.object({
  where: user_positionWhereInputSchema.optional(),
  orderBy: z.union([ user_positionOrderByWithRelationInputSchema.array(),user_positionOrderByWithRelationInputSchema ]).optional(),
  cursor: user_positionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const user_positionGroupByArgsSchema: z.ZodType<Prisma.user_positionGroupByArgs> = z.object({
  where: user_positionWhereInputSchema.optional(),
  orderBy: z.union([ user_positionOrderByWithAggregationInputSchema.array(),user_positionOrderByWithAggregationInputSchema ]).optional(),
  by: User_positionScalarFieldEnumSchema.array(),
  having: user_positionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const user_positionFindUniqueArgsSchema: z.ZodType<Prisma.user_positionFindUniqueArgs> = z.object({
  select: user_positionSelectSchema.optional(),
  include: user_positionIncludeSchema.optional(),
  where: user_positionWhereUniqueInputSchema,
}).strict()

export const user_positionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.user_positionFindUniqueOrThrowArgs> = z.object({
  select: user_positionSelectSchema.optional(),
  include: user_positionIncludeSchema.optional(),
  where: user_positionWhereUniqueInputSchema,
}).strict()

export const user_role_assignmentFindFirstArgsSchema: z.ZodType<Prisma.user_role_assignmentFindFirstArgs> = z.object({
  select: user_role_assignmentSelectSchema.optional(),
  include: user_role_assignmentIncludeSchema.optional(),
  where: user_role_assignmentWhereInputSchema.optional(),
  orderBy: z.union([ user_role_assignmentOrderByWithRelationInputSchema.array(),user_role_assignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: user_role_assignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ User_role_assignmentScalarFieldEnumSchema,User_role_assignmentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const user_role_assignmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.user_role_assignmentFindFirstOrThrowArgs> = z.object({
  select: user_role_assignmentSelectSchema.optional(),
  include: user_role_assignmentIncludeSchema.optional(),
  where: user_role_assignmentWhereInputSchema.optional(),
  orderBy: z.union([ user_role_assignmentOrderByWithRelationInputSchema.array(),user_role_assignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: user_role_assignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ User_role_assignmentScalarFieldEnumSchema,User_role_assignmentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const user_role_assignmentFindManyArgsSchema: z.ZodType<Prisma.user_role_assignmentFindManyArgs> = z.object({
  select: user_role_assignmentSelectSchema.optional(),
  include: user_role_assignmentIncludeSchema.optional(),
  where: user_role_assignmentWhereInputSchema.optional(),
  orderBy: z.union([ user_role_assignmentOrderByWithRelationInputSchema.array(),user_role_assignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: user_role_assignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ User_role_assignmentScalarFieldEnumSchema,User_role_assignmentScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const user_role_assignmentAggregateArgsSchema: z.ZodType<Prisma.user_role_assignmentAggregateArgs> = z.object({
  where: user_role_assignmentWhereInputSchema.optional(),
  orderBy: z.union([ user_role_assignmentOrderByWithRelationInputSchema.array(),user_role_assignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: user_role_assignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const user_role_assignmentGroupByArgsSchema: z.ZodType<Prisma.user_role_assignmentGroupByArgs> = z.object({
  where: user_role_assignmentWhereInputSchema.optional(),
  orderBy: z.union([ user_role_assignmentOrderByWithAggregationInputSchema.array(),user_role_assignmentOrderByWithAggregationInputSchema ]).optional(),
  by: User_role_assignmentScalarFieldEnumSchema.array(),
  having: user_role_assignmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const user_role_assignmentFindUniqueArgsSchema: z.ZodType<Prisma.user_role_assignmentFindUniqueArgs> = z.object({
  select: user_role_assignmentSelectSchema.optional(),
  include: user_role_assignmentIncludeSchema.optional(),
  where: user_role_assignmentWhereUniqueInputSchema,
}).strict()

export const user_role_assignmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.user_role_assignmentFindUniqueOrThrowArgs> = z.object({
  select: user_role_assignmentSelectSchema.optional(),
  include: user_role_assignmentIncludeSchema.optional(),
  where: user_role_assignmentWhereUniqueInputSchema,
}).strict()

export const warehouseFindFirstArgsSchema: z.ZodType<Prisma.warehouseFindFirstArgs> = z.object({
  select: warehouseSelectSchema.optional(),
  include: warehouseIncludeSchema.optional(),
  where: warehouseWhereInputSchema.optional(),
  orderBy: z.union([ warehouseOrderByWithRelationInputSchema.array(),warehouseOrderByWithRelationInputSchema ]).optional(),
  cursor: warehouseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WarehouseScalarFieldEnumSchema,WarehouseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const warehouseFindFirstOrThrowArgsSchema: z.ZodType<Prisma.warehouseFindFirstOrThrowArgs> = z.object({
  select: warehouseSelectSchema.optional(),
  include: warehouseIncludeSchema.optional(),
  where: warehouseWhereInputSchema.optional(),
  orderBy: z.union([ warehouseOrderByWithRelationInputSchema.array(),warehouseOrderByWithRelationInputSchema ]).optional(),
  cursor: warehouseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WarehouseScalarFieldEnumSchema,WarehouseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const warehouseFindManyArgsSchema: z.ZodType<Prisma.warehouseFindManyArgs> = z.object({
  select: warehouseSelectSchema.optional(),
  include: warehouseIncludeSchema.optional(),
  where: warehouseWhereInputSchema.optional(),
  orderBy: z.union([ warehouseOrderByWithRelationInputSchema.array(),warehouseOrderByWithRelationInputSchema ]).optional(),
  cursor: warehouseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WarehouseScalarFieldEnumSchema,WarehouseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const warehouseAggregateArgsSchema: z.ZodType<Prisma.warehouseAggregateArgs> = z.object({
  where: warehouseWhereInputSchema.optional(),
  orderBy: z.union([ warehouseOrderByWithRelationInputSchema.array(),warehouseOrderByWithRelationInputSchema ]).optional(),
  cursor: warehouseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const warehouseGroupByArgsSchema: z.ZodType<Prisma.warehouseGroupByArgs> = z.object({
  where: warehouseWhereInputSchema.optional(),
  orderBy: z.union([ warehouseOrderByWithAggregationInputSchema.array(),warehouseOrderByWithAggregationInputSchema ]).optional(),
  by: WarehouseScalarFieldEnumSchema.array(),
  having: warehouseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const warehouseFindUniqueArgsSchema: z.ZodType<Prisma.warehouseFindUniqueArgs> = z.object({
  select: warehouseSelectSchema.optional(),
  include: warehouseIncludeSchema.optional(),
  where: warehouseWhereUniqueInputSchema,
}).strict()

export const warehouseFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.warehouseFindUniqueOrThrowArgs> = z.object({
  select: warehouseSelectSchema.optional(),
  include: warehouseIncludeSchema.optional(),
  where: warehouseWhereUniqueInputSchema,
}).strict()

export const deleteneededFindFirstArgsSchema: z.ZodType<Prisma.deleteneededFindFirstArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  where: deleteneededWhereInputSchema.optional(),
  orderBy: z.union([ deleteneededOrderByWithRelationInputSchema.array(),deleteneededOrderByWithRelationInputSchema ]).optional(),
  cursor: deleteneededWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeleteneededScalarFieldEnumSchema,DeleteneededScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const deleteneededFindFirstOrThrowArgsSchema: z.ZodType<Prisma.deleteneededFindFirstOrThrowArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  where: deleteneededWhereInputSchema.optional(),
  orderBy: z.union([ deleteneededOrderByWithRelationInputSchema.array(),deleteneededOrderByWithRelationInputSchema ]).optional(),
  cursor: deleteneededWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeleteneededScalarFieldEnumSchema,DeleteneededScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const deleteneededFindManyArgsSchema: z.ZodType<Prisma.deleteneededFindManyArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  where: deleteneededWhereInputSchema.optional(),
  orderBy: z.union([ deleteneededOrderByWithRelationInputSchema.array(),deleteneededOrderByWithRelationInputSchema ]).optional(),
  cursor: deleteneededWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DeleteneededScalarFieldEnumSchema,DeleteneededScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const deleteneededAggregateArgsSchema: z.ZodType<Prisma.deleteneededAggregateArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  where: deleteneededWhereInputSchema.optional(),
  orderBy: z.union([ deleteneededOrderByWithRelationInputSchema.array(),deleteneededOrderByWithRelationInputSchema ]).optional(),
  cursor: deleteneededWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const deleteneededGroupByArgsSchema: z.ZodType<Prisma.deleteneededGroupByArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  where: deleteneededWhereInputSchema.optional(),
  orderBy: z.union([ deleteneededOrderByWithAggregationInputSchema.array(),deleteneededOrderByWithAggregationInputSchema ]).optional(),
  by: DeleteneededScalarFieldEnumSchema.array(),
  having: deleteneededScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const deleteneededFindUniqueArgsSchema: z.ZodType<Prisma.deleteneededFindUniqueArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  where: deleteneededWhereUniqueInputSchema,
}).strict()

export const deleteneededFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.deleteneededFindUniqueOrThrowArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  where: deleteneededWhereUniqueInputSchema,
}).strict()

export const v_clientFindFirstArgsSchema: z.ZodType<Prisma.v_clientFindFirstArgs> = z.object({
  select: v_clientSelectSchema.optional(),
  where: v_clientWhereInputSchema.optional(),
  orderBy: z.union([ v_clientOrderByWithRelationInputSchema.array(),v_clientOrderByWithRelationInputSchema ]).optional(),
  cursor: v_clientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_clientScalarFieldEnumSchema,V_clientScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_clientFindFirstOrThrowArgsSchema: z.ZodType<Prisma.v_clientFindFirstOrThrowArgs> = z.object({
  select: v_clientSelectSchema.optional(),
  where: v_clientWhereInputSchema.optional(),
  orderBy: z.union([ v_clientOrderByWithRelationInputSchema.array(),v_clientOrderByWithRelationInputSchema ]).optional(),
  cursor: v_clientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_clientScalarFieldEnumSchema,V_clientScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_clientFindManyArgsSchema: z.ZodType<Prisma.v_clientFindManyArgs> = z.object({
  select: v_clientSelectSchema.optional(),
  where: v_clientWhereInputSchema.optional(),
  orderBy: z.union([ v_clientOrderByWithRelationInputSchema.array(),v_clientOrderByWithRelationInputSchema ]).optional(),
  cursor: v_clientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_clientScalarFieldEnumSchema,V_clientScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_clientAggregateArgsSchema: z.ZodType<Prisma.v_clientAggregateArgs> = z.object({
  where: v_clientWhereInputSchema.optional(),
  orderBy: z.union([ v_clientOrderByWithRelationInputSchema.array(),v_clientOrderByWithRelationInputSchema ]).optional(),
  cursor: v_clientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_clientGroupByArgsSchema: z.ZodType<Prisma.v_clientGroupByArgs> = z.object({
  where: v_clientWhereInputSchema.optional(),
  orderBy: z.union([ v_clientOrderByWithAggregationInputSchema.array(),v_clientOrderByWithAggregationInputSchema ]).optional(),
  by: V_clientScalarFieldEnumSchema.array(),
  having: v_clientScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_clientFindUniqueArgsSchema: z.ZodType<Prisma.v_clientFindUniqueArgs> = z.object({
  select: v_clientSelectSchema.optional(),
  where: v_clientWhereUniqueInputSchema,
}).strict()

export const v_clientFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.v_clientFindUniqueOrThrowArgs> = z.object({
  select: v_clientSelectSchema.optional(),
  where: v_clientWhereUniqueInputSchema,
}).strict()

export const v_client_branchFindFirstArgsSchema: z.ZodType<Prisma.v_client_branchFindFirstArgs> = z.object({
  select: v_client_branchSelectSchema.optional(),
  where: v_client_branchWhereInputSchema.optional(),
  orderBy: z.union([ v_client_branchOrderByWithRelationInputSchema.array(),v_client_branchOrderByWithRelationInputSchema ]).optional(),
  cursor: v_client_branchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_client_branchScalarFieldEnumSchema,V_client_branchScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_client_branchFindFirstOrThrowArgsSchema: z.ZodType<Prisma.v_client_branchFindFirstOrThrowArgs> = z.object({
  select: v_client_branchSelectSchema.optional(),
  where: v_client_branchWhereInputSchema.optional(),
  orderBy: z.union([ v_client_branchOrderByWithRelationInputSchema.array(),v_client_branchOrderByWithRelationInputSchema ]).optional(),
  cursor: v_client_branchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_client_branchScalarFieldEnumSchema,V_client_branchScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_client_branchFindManyArgsSchema: z.ZodType<Prisma.v_client_branchFindManyArgs> = z.object({
  select: v_client_branchSelectSchema.optional(),
  where: v_client_branchWhereInputSchema.optional(),
  orderBy: z.union([ v_client_branchOrderByWithRelationInputSchema.array(),v_client_branchOrderByWithRelationInputSchema ]).optional(),
  cursor: v_client_branchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_client_branchScalarFieldEnumSchema,V_client_branchScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_client_branchAggregateArgsSchema: z.ZodType<Prisma.v_client_branchAggregateArgs> = z.object({
  where: v_client_branchWhereInputSchema.optional(),
  orderBy: z.union([ v_client_branchOrderByWithRelationInputSchema.array(),v_client_branchOrderByWithRelationInputSchema ]).optional(),
  cursor: v_client_branchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_client_branchGroupByArgsSchema: z.ZodType<Prisma.v_client_branchGroupByArgs> = z.object({
  where: v_client_branchWhereInputSchema.optional(),
  orderBy: z.union([ v_client_branchOrderByWithAggregationInputSchema.array(),v_client_branchOrderByWithAggregationInputSchema ]).optional(),
  by: V_client_branchScalarFieldEnumSchema.array(),
  having: v_client_branchScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_client_branchFindUniqueArgsSchema: z.ZodType<Prisma.v_client_branchFindUniqueArgs> = z.object({
  select: v_client_branchSelectSchema.optional(),
  where: v_client_branchWhereUniqueInputSchema,
}).strict()

export const v_client_branchFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.v_client_branchFindUniqueOrThrowArgs> = z.object({
  select: v_client_branchSelectSchema.optional(),
  where: v_client_branchWhereUniqueInputSchema,
}).strict()

export const v_consumable_modelFindFirstArgsSchema: z.ZodType<Prisma.v_consumable_modelFindFirstArgs> = z.object({
  select: v_consumable_modelSelectSchema.optional(),
  where: v_consumable_modelWhereInputSchema.optional(),
  orderBy: z.union([ v_consumable_modelOrderByWithRelationInputSchema.array(),v_consumable_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: v_consumable_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_consumable_modelScalarFieldEnumSchema,V_consumable_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_consumable_modelFindFirstOrThrowArgsSchema: z.ZodType<Prisma.v_consumable_modelFindFirstOrThrowArgs> = z.object({
  select: v_consumable_modelSelectSchema.optional(),
  where: v_consumable_modelWhereInputSchema.optional(),
  orderBy: z.union([ v_consumable_modelOrderByWithRelationInputSchema.array(),v_consumable_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: v_consumable_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_consumable_modelScalarFieldEnumSchema,V_consumable_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_consumable_modelFindManyArgsSchema: z.ZodType<Prisma.v_consumable_modelFindManyArgs> = z.object({
  select: v_consumable_modelSelectSchema.optional(),
  where: v_consumable_modelWhereInputSchema.optional(),
  orderBy: z.union([ v_consumable_modelOrderByWithRelationInputSchema.array(),v_consumable_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: v_consumable_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_consumable_modelScalarFieldEnumSchema,V_consumable_modelScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_consumable_modelAggregateArgsSchema: z.ZodType<Prisma.v_consumable_modelAggregateArgs> = z.object({
  where: v_consumable_modelWhereInputSchema.optional(),
  orderBy: z.union([ v_consumable_modelOrderByWithRelationInputSchema.array(),v_consumable_modelOrderByWithRelationInputSchema ]).optional(),
  cursor: v_consumable_modelWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_consumable_modelGroupByArgsSchema: z.ZodType<Prisma.v_consumable_modelGroupByArgs> = z.object({
  where: v_consumable_modelWhereInputSchema.optional(),
  orderBy: z.union([ v_consumable_modelOrderByWithAggregationInputSchema.array(),v_consumable_modelOrderByWithAggregationInputSchema ]).optional(),
  by: V_consumable_modelScalarFieldEnumSchema.array(),
  having: v_consumable_modelScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_consumable_modelFindUniqueArgsSchema: z.ZodType<Prisma.v_consumable_modelFindUniqueArgs> = z.object({
  select: v_consumable_modelSelectSchema.optional(),
  where: v_consumable_modelWhereUniqueInputSchema,
}).strict()

export const v_consumable_modelFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.v_consumable_modelFindUniqueOrThrowArgs> = z.object({
  select: v_consumable_modelSelectSchema.optional(),
  where: v_consumable_modelWhereUniqueInputSchema,
}).strict()

export const v_deptFindFirstArgsSchema: z.ZodType<Prisma.v_deptFindFirstArgs> = z.object({
  select: v_deptSelectSchema.optional(),
  where: v_deptWhereInputSchema.optional(),
  orderBy: z.union([ v_deptOrderByWithRelationInputSchema.array(),v_deptOrderByWithRelationInputSchema ]).optional(),
  cursor: v_deptWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_deptScalarFieldEnumSchema,V_deptScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_deptFindFirstOrThrowArgsSchema: z.ZodType<Prisma.v_deptFindFirstOrThrowArgs> = z.object({
  select: v_deptSelectSchema.optional(),
  where: v_deptWhereInputSchema.optional(),
  orderBy: z.union([ v_deptOrderByWithRelationInputSchema.array(),v_deptOrderByWithRelationInputSchema ]).optional(),
  cursor: v_deptWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_deptScalarFieldEnumSchema,V_deptScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_deptFindManyArgsSchema: z.ZodType<Prisma.v_deptFindManyArgs> = z.object({
  select: v_deptSelectSchema.optional(),
  where: v_deptWhereInputSchema.optional(),
  orderBy: z.union([ v_deptOrderByWithRelationInputSchema.array(),v_deptOrderByWithRelationInputSchema ]).optional(),
  cursor: v_deptWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_deptScalarFieldEnumSchema,V_deptScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_deptAggregateArgsSchema: z.ZodType<Prisma.v_deptAggregateArgs> = z.object({
  where: v_deptWhereInputSchema.optional(),
  orderBy: z.union([ v_deptOrderByWithRelationInputSchema.array(),v_deptOrderByWithRelationInputSchema ]).optional(),
  cursor: v_deptWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_deptGroupByArgsSchema: z.ZodType<Prisma.v_deptGroupByArgs> = z.object({
  where: v_deptWhereInputSchema.optional(),
  orderBy: z.union([ v_deptOrderByWithAggregationInputSchema.array(),v_deptOrderByWithAggregationInputSchema ]).optional(),
  by: V_deptScalarFieldEnumSchema.array(),
  having: v_deptScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_deptFindUniqueArgsSchema: z.ZodType<Prisma.v_deptFindUniqueArgs> = z.object({
  select: v_deptSelectSchema.optional(),
  where: v_deptWhereUniqueInputSchema,
}).strict()

export const v_deptFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.v_deptFindUniqueOrThrowArgs> = z.object({
  select: v_deptSelectSchema.optional(),
  where: v_deptWhereUniqueInputSchema,
}).strict()

export const v_device_driverFindFirstArgsSchema: z.ZodType<Prisma.v_device_driverFindFirstArgs> = z.object({
  select: v_device_driverSelectSchema.optional(),
  where: v_device_driverWhereInputSchema.optional(),
  orderBy: z.union([ v_device_driverOrderByWithRelationInputSchema.array(),v_device_driverOrderByWithRelationInputSchema ]).optional(),
  cursor: v_device_driverWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_device_driverScalarFieldEnumSchema,V_device_driverScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_device_driverFindFirstOrThrowArgsSchema: z.ZodType<Prisma.v_device_driverFindFirstOrThrowArgs> = z.object({
  select: v_device_driverSelectSchema.optional(),
  where: v_device_driverWhereInputSchema.optional(),
  orderBy: z.union([ v_device_driverOrderByWithRelationInputSchema.array(),v_device_driverOrderByWithRelationInputSchema ]).optional(),
  cursor: v_device_driverWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_device_driverScalarFieldEnumSchema,V_device_driverScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_device_driverFindManyArgsSchema: z.ZodType<Prisma.v_device_driverFindManyArgs> = z.object({
  select: v_device_driverSelectSchema.optional(),
  where: v_device_driverWhereInputSchema.optional(),
  orderBy: z.union([ v_device_driverOrderByWithRelationInputSchema.array(),v_device_driverOrderByWithRelationInputSchema ]).optional(),
  cursor: v_device_driverWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_device_driverScalarFieldEnumSchema,V_device_driverScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_device_driverAggregateArgsSchema: z.ZodType<Prisma.v_device_driverAggregateArgs> = z.object({
  where: v_device_driverWhereInputSchema.optional(),
  orderBy: z.union([ v_device_driverOrderByWithRelationInputSchema.array(),v_device_driverOrderByWithRelationInputSchema ]).optional(),
  cursor: v_device_driverWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_device_driverGroupByArgsSchema: z.ZodType<Prisma.v_device_driverGroupByArgs> = z.object({
  where: v_device_driverWhereInputSchema.optional(),
  orderBy: z.union([ v_device_driverOrderByWithAggregationInputSchema.array(),v_device_driverOrderByWithAggregationInputSchema ]).optional(),
  by: V_device_driverScalarFieldEnumSchema.array(),
  having: v_device_driverScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_device_driverFindUniqueArgsSchema: z.ZodType<Prisma.v_device_driverFindUniqueArgs> = z.object({
  select: v_device_driverSelectSchema.optional(),
  where: v_device_driverWhereUniqueInputSchema,
}).strict()

export const v_device_driverFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.v_device_driverFindUniqueOrThrowArgs> = z.object({
  select: v_device_driverSelectSchema.optional(),
  where: v_device_driverWhereUniqueInputSchema,
}).strict()

export const v_userFindFirstArgsSchema: z.ZodType<Prisma.v_userFindFirstArgs> = z.object({
  select: v_userSelectSchema.optional(),
  where: v_userWhereInputSchema.optional(),
  orderBy: z.union([ v_userOrderByWithRelationInputSchema.array(),v_userOrderByWithRelationInputSchema ]).optional(),
  cursor: v_userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_userScalarFieldEnumSchema,V_userScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_userFindFirstOrThrowArgsSchema: z.ZodType<Prisma.v_userFindFirstOrThrowArgs> = z.object({
  select: v_userSelectSchema.optional(),
  where: v_userWhereInputSchema.optional(),
  orderBy: z.union([ v_userOrderByWithRelationInputSchema.array(),v_userOrderByWithRelationInputSchema ]).optional(),
  cursor: v_userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_userScalarFieldEnumSchema,V_userScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_userFindManyArgsSchema: z.ZodType<Prisma.v_userFindManyArgs> = z.object({
  select: v_userSelectSchema.optional(),
  where: v_userWhereInputSchema.optional(),
  orderBy: z.union([ v_userOrderByWithRelationInputSchema.array(),v_userOrderByWithRelationInputSchema ]).optional(),
  cursor: v_userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_userScalarFieldEnumSchema,V_userScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_userAggregateArgsSchema: z.ZodType<Prisma.v_userAggregateArgs> = z.object({
  where: v_userWhereInputSchema.optional(),
  orderBy: z.union([ v_userOrderByWithRelationInputSchema.array(),v_userOrderByWithRelationInputSchema ]).optional(),
  cursor: v_userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_userGroupByArgsSchema: z.ZodType<Prisma.v_userGroupByArgs> = z.object({
  where: v_userWhereInputSchema.optional(),
  orderBy: z.union([ v_userOrderByWithAggregationInputSchema.array(),v_userOrderByWithAggregationInputSchema ]).optional(),
  by: V_userScalarFieldEnumSchema.array(),
  having: v_userScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_userFindUniqueArgsSchema: z.ZodType<Prisma.v_userFindUniqueArgs> = z.object({
  select: v_userSelectSchema.optional(),
  where: v_userWhereUniqueInputSchema,
}).strict()

export const v_userFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.v_userFindUniqueOrThrowArgs> = z.object({
  select: v_userSelectSchema.optional(),
  where: v_userWhereUniqueInputSchema,
}).strict()

export const v_warehouseFindFirstArgsSchema: z.ZodType<Prisma.v_warehouseFindFirstArgs> = z.object({
  select: v_warehouseSelectSchema.optional(),
  where: v_warehouseWhereInputSchema.optional(),
  orderBy: z.union([ v_warehouseOrderByWithRelationInputSchema.array(),v_warehouseOrderByWithRelationInputSchema ]).optional(),
  cursor: v_warehouseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_warehouseScalarFieldEnumSchema,V_warehouseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_warehouseFindFirstOrThrowArgsSchema: z.ZodType<Prisma.v_warehouseFindFirstOrThrowArgs> = z.object({
  select: v_warehouseSelectSchema.optional(),
  where: v_warehouseWhereInputSchema.optional(),
  orderBy: z.union([ v_warehouseOrderByWithRelationInputSchema.array(),v_warehouseOrderByWithRelationInputSchema ]).optional(),
  cursor: v_warehouseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_warehouseScalarFieldEnumSchema,V_warehouseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_warehouseFindManyArgsSchema: z.ZodType<Prisma.v_warehouseFindManyArgs> = z.object({
  select: v_warehouseSelectSchema.optional(),
  where: v_warehouseWhereInputSchema.optional(),
  orderBy: z.union([ v_warehouseOrderByWithRelationInputSchema.array(),v_warehouseOrderByWithRelationInputSchema ]).optional(),
  cursor: v_warehouseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_warehouseScalarFieldEnumSchema,V_warehouseScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_warehouseAggregateArgsSchema: z.ZodType<Prisma.v_warehouseAggregateArgs> = z.object({
  where: v_warehouseWhereInputSchema.optional(),
  orderBy: z.union([ v_warehouseOrderByWithRelationInputSchema.array(),v_warehouseOrderByWithRelationInputSchema ]).optional(),
  cursor: v_warehouseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_warehouseGroupByArgsSchema: z.ZodType<Prisma.v_warehouseGroupByArgs> = z.object({
  where: v_warehouseWhereInputSchema.optional(),
  orderBy: z.union([ v_warehouseOrderByWithAggregationInputSchema.array(),v_warehouseOrderByWithAggregationInputSchema ]).optional(),
  by: V_warehouseScalarFieldEnumSchema.array(),
  having: v_warehouseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_warehouseFindUniqueArgsSchema: z.ZodType<Prisma.v_warehouseFindUniqueArgs> = z.object({
  select: v_warehouseSelectSchema.optional(),
  where: v_warehouseWhereUniqueInputSchema,
}).strict()

export const v_warehouseFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.v_warehouseFindUniqueOrThrowArgs> = z.object({
  select: v_warehouseSelectSchema.optional(),
  where: v_warehouseWhereUniqueInputSchema,
}).strict()

export const v_deviceFindFirstArgsSchema: z.ZodType<Prisma.v_deviceFindFirstArgs> = z.object({
  select: v_deviceSelectSchema.optional(),
  where: v_deviceWhereInputSchema.optional(),
  orderBy: z.union([ v_deviceOrderByWithRelationInputSchema.array(),v_deviceOrderByWithRelationInputSchema ]).optional(),
  cursor: v_deviceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_deviceScalarFieldEnumSchema,V_deviceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_deviceFindFirstOrThrowArgsSchema: z.ZodType<Prisma.v_deviceFindFirstOrThrowArgs> = z.object({
  select: v_deviceSelectSchema.optional(),
  where: v_deviceWhereInputSchema.optional(),
  orderBy: z.union([ v_deviceOrderByWithRelationInputSchema.array(),v_deviceOrderByWithRelationInputSchema ]).optional(),
  cursor: v_deviceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_deviceScalarFieldEnumSchema,V_deviceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_deviceFindManyArgsSchema: z.ZodType<Prisma.v_deviceFindManyArgs> = z.object({
  select: v_deviceSelectSchema.optional(),
  where: v_deviceWhereInputSchema.optional(),
  orderBy: z.union([ v_deviceOrderByWithRelationInputSchema.array(),v_deviceOrderByWithRelationInputSchema ]).optional(),
  cursor: v_deviceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ V_deviceScalarFieldEnumSchema,V_deviceScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const v_deviceAggregateArgsSchema: z.ZodType<Prisma.v_deviceAggregateArgs> = z.object({
  where: v_deviceWhereInputSchema.optional(),
  orderBy: z.union([ v_deviceOrderByWithRelationInputSchema.array(),v_deviceOrderByWithRelationInputSchema ]).optional(),
  cursor: v_deviceWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_deviceGroupByArgsSchema: z.ZodType<Prisma.v_deviceGroupByArgs> = z.object({
  where: v_deviceWhereInputSchema.optional(),
  orderBy: z.union([ v_deviceOrderByWithAggregationInputSchema.array(),v_deviceOrderByWithAggregationInputSchema ]).optional(),
  by: V_deviceScalarFieldEnumSchema.array(),
  having: v_deviceScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const v_deviceFindUniqueArgsSchema: z.ZodType<Prisma.v_deviceFindUniqueArgs> = z.object({
  select: v_deviceSelectSchema.optional(),
  where: v_deviceWhereUniqueInputSchema,
}).strict()

export const v_deviceFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.v_deviceFindUniqueOrThrowArgs> = z.object({
  select: v_deviceSelectSchema.optional(),
  where: v_deviceWhereUniqueInputSchema,
}).strict()

export const approval_roleCreateArgsSchema: z.ZodType<Prisma.approval_roleCreateArgs> = z.object({
  select: approval_roleSelectSchema.optional(),
  include: approval_roleIncludeSchema.optional(),
  data: z.union([ approval_roleCreateInputSchema,approval_roleUncheckedCreateInputSchema ]),
}).strict()

export const approval_roleUpsertArgsSchema: z.ZodType<Prisma.approval_roleUpsertArgs> = z.object({
  select: approval_roleSelectSchema.optional(),
  include: approval_roleIncludeSchema.optional(),
  where: approval_roleWhereUniqueInputSchema,
  create: z.union([ approval_roleCreateInputSchema,approval_roleUncheckedCreateInputSchema ]),
  update: z.union([ approval_roleUpdateInputSchema,approval_roleUncheckedUpdateInputSchema ]),
}).strict()

export const approval_roleCreateManyArgsSchema: z.ZodType<Prisma.approval_roleCreateManyArgs> = z.object({
  data: z.union([ approval_roleCreateManyInputSchema,approval_roleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const approval_roleDeleteArgsSchema: z.ZodType<Prisma.approval_roleDeleteArgs> = z.object({
  select: approval_roleSelectSchema.optional(),
  include: approval_roleIncludeSchema.optional(),
  where: approval_roleWhereUniqueInputSchema,
}).strict()

export const approval_roleUpdateArgsSchema: z.ZodType<Prisma.approval_roleUpdateArgs> = z.object({
  select: approval_roleSelectSchema.optional(),
  include: approval_roleIncludeSchema.optional(),
  data: z.union([ approval_roleUpdateInputSchema,approval_roleUncheckedUpdateInputSchema ]),
  where: approval_roleWhereUniqueInputSchema,
}).strict()

export const approval_roleUpdateManyArgsSchema: z.ZodType<Prisma.approval_roleUpdateManyArgs> = z.object({
  data: z.union([ approval_roleUpdateManyMutationInputSchema,approval_roleUncheckedUpdateManyInputSchema ]),
  where: approval_roleWhereInputSchema.optional(),
}).strict()

export const approval_roleDeleteManyArgsSchema: z.ZodType<Prisma.approval_roleDeleteManyArgs> = z.object({
  where: approval_roleWhereInputSchema.optional(),
}).strict()

export const callCreateArgsSchema: z.ZodType<Prisma.callCreateArgs> = z.object({
  select: callSelectSchema.optional(),
  include: callIncludeSchema.optional(),
  data: z.union([ callCreateInputSchema,callUncheckedCreateInputSchema ]),
}).strict()

export const callUpsertArgsSchema: z.ZodType<Prisma.callUpsertArgs> = z.object({
  select: callSelectSchema.optional(),
  include: callIncludeSchema.optional(),
  where: callWhereUniqueInputSchema,
  create: z.union([ callCreateInputSchema,callUncheckedCreateInputSchema ]),
  update: z.union([ callUpdateInputSchema,callUncheckedUpdateInputSchema ]),
}).strict()

export const callCreateManyArgsSchema: z.ZodType<Prisma.callCreateManyArgs> = z.object({
  data: z.union([ callCreateManyInputSchema,callCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const callDeleteArgsSchema: z.ZodType<Prisma.callDeleteArgs> = z.object({
  select: callSelectSchema.optional(),
  include: callIncludeSchema.optional(),
  where: callWhereUniqueInputSchema,
}).strict()

export const callUpdateArgsSchema: z.ZodType<Prisma.callUpdateArgs> = z.object({
  select: callSelectSchema.optional(),
  include: callIncludeSchema.optional(),
  data: z.union([ callUpdateInputSchema,callUncheckedUpdateInputSchema ]),
  where: callWhereUniqueInputSchema,
}).strict()

export const callUpdateManyArgsSchema: z.ZodType<Prisma.callUpdateManyArgs> = z.object({
  data: z.union([ callUpdateManyMutationInputSchema,callUncheckedUpdateManyInputSchema ]),
  where: callWhereInputSchema.optional(),
}).strict()

export const callDeleteManyArgsSchema: z.ZodType<Prisma.callDeleteManyArgs> = z.object({
  where: callWhereInputSchema.optional(),
}).strict()

export const call_typeCreateArgsSchema: z.ZodType<Prisma.call_typeCreateArgs> = z.object({
  select: call_typeSelectSchema.optional(),
  include: call_typeIncludeSchema.optional(),
  data: z.union([ call_typeCreateInputSchema,call_typeUncheckedCreateInputSchema ]),
}).strict()

export const call_typeUpsertArgsSchema: z.ZodType<Prisma.call_typeUpsertArgs> = z.object({
  select: call_typeSelectSchema.optional(),
  include: call_typeIncludeSchema.optional(),
  where: call_typeWhereUniqueInputSchema,
  create: z.union([ call_typeCreateInputSchema,call_typeUncheckedCreateInputSchema ]),
  update: z.union([ call_typeUpdateInputSchema,call_typeUncheckedUpdateInputSchema ]),
}).strict()

export const call_typeCreateManyArgsSchema: z.ZodType<Prisma.call_typeCreateManyArgs> = z.object({
  data: z.union([ call_typeCreateManyInputSchema,call_typeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const call_typeDeleteArgsSchema: z.ZodType<Prisma.call_typeDeleteArgs> = z.object({
  select: call_typeSelectSchema.optional(),
  include: call_typeIncludeSchema.optional(),
  where: call_typeWhereUniqueInputSchema,
}).strict()

export const call_typeUpdateArgsSchema: z.ZodType<Prisma.call_typeUpdateArgs> = z.object({
  select: call_typeSelectSchema.optional(),
  include: call_typeIncludeSchema.optional(),
  data: z.union([ call_typeUpdateInputSchema,call_typeUncheckedUpdateInputSchema ]),
  where: call_typeWhereUniqueInputSchema,
}).strict()

export const call_typeUpdateManyArgsSchema: z.ZodType<Prisma.call_typeUpdateManyArgs> = z.object({
  data: z.union([ call_typeUpdateManyMutationInputSchema,call_typeUncheckedUpdateManyInputSchema ]),
  where: call_typeWhereInputSchema.optional(),
}).strict()

export const call_typeDeleteManyArgsSchema: z.ZodType<Prisma.call_typeDeleteManyArgs> = z.object({
  where: call_typeWhereInputSchema.optional(),
}).strict()

export const clientCreateArgsSchema: z.ZodType<Prisma.clientCreateArgs> = z.object({
  select: clientSelectSchema.optional(),
  include: clientIncludeSchema.optional(),
  data: z.union([ clientCreateInputSchema,clientUncheckedCreateInputSchema ]),
}).strict()

export const clientUpsertArgsSchema: z.ZodType<Prisma.clientUpsertArgs> = z.object({
  select: clientSelectSchema.optional(),
  include: clientIncludeSchema.optional(),
  where: clientWhereUniqueInputSchema,
  create: z.union([ clientCreateInputSchema,clientUncheckedCreateInputSchema ]),
  update: z.union([ clientUpdateInputSchema,clientUncheckedUpdateInputSchema ]),
}).strict()

export const clientCreateManyArgsSchema: z.ZodType<Prisma.clientCreateManyArgs> = z.object({
  data: z.union([ clientCreateManyInputSchema,clientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const clientDeleteArgsSchema: z.ZodType<Prisma.clientDeleteArgs> = z.object({
  select: clientSelectSchema.optional(),
  include: clientIncludeSchema.optional(),
  where: clientWhereUniqueInputSchema,
}).strict()

export const clientUpdateArgsSchema: z.ZodType<Prisma.clientUpdateArgs> = z.object({
  select: clientSelectSchema.optional(),
  include: clientIncludeSchema.optional(),
  data: z.union([ clientUpdateInputSchema,clientUncheckedUpdateInputSchema ]),
  where: clientWhereUniqueInputSchema,
}).strict()

export const clientUpdateManyArgsSchema: z.ZodType<Prisma.clientUpdateManyArgs> = z.object({
  data: z.union([ clientUpdateManyMutationInputSchema,clientUncheckedUpdateManyInputSchema ]),
  where: clientWhereInputSchema.optional(),
}).strict()

export const clientDeleteManyArgsSchema: z.ZodType<Prisma.clientDeleteManyArgs> = z.object({
  where: clientWhereInputSchema.optional(),
}).strict()

export const client_branchCreateArgsSchema: z.ZodType<Prisma.client_branchCreateArgs> = z.object({
  select: client_branchSelectSchema.optional(),
  include: client_branchIncludeSchema.optional(),
  data: z.union([ client_branchCreateInputSchema,client_branchUncheckedCreateInputSchema ]),
}).strict()

export const client_branchUpsertArgsSchema: z.ZodType<Prisma.client_branchUpsertArgs> = z.object({
  select: client_branchSelectSchema.optional(),
  include: client_branchIncludeSchema.optional(),
  where: client_branchWhereUniqueInputSchema,
  create: z.union([ client_branchCreateInputSchema,client_branchUncheckedCreateInputSchema ]),
  update: z.union([ client_branchUpdateInputSchema,client_branchUncheckedUpdateInputSchema ]),
}).strict()

export const client_branchCreateManyArgsSchema: z.ZodType<Prisma.client_branchCreateManyArgs> = z.object({
  data: z.union([ client_branchCreateManyInputSchema,client_branchCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const client_branchDeleteArgsSchema: z.ZodType<Prisma.client_branchDeleteArgs> = z.object({
  select: client_branchSelectSchema.optional(),
  include: client_branchIncludeSchema.optional(),
  where: client_branchWhereUniqueInputSchema,
}).strict()

export const client_branchUpdateArgsSchema: z.ZodType<Prisma.client_branchUpdateArgs> = z.object({
  select: client_branchSelectSchema.optional(),
  include: client_branchIncludeSchema.optional(),
  data: z.union([ client_branchUpdateInputSchema,client_branchUncheckedUpdateInputSchema ]),
  where: client_branchWhereUniqueInputSchema,
}).strict()

export const client_branchUpdateManyArgsSchema: z.ZodType<Prisma.client_branchUpdateManyArgs> = z.object({
  data: z.union([ client_branchUpdateManyMutationInputSchema,client_branchUncheckedUpdateManyInputSchema ]),
  where: client_branchWhereInputSchema.optional(),
}).strict()

export const client_branchDeleteManyArgsSchema: z.ZodType<Prisma.client_branchDeleteManyArgs> = z.object({
  where: client_branchWhereInputSchema.optional(),
}).strict()

export const client_rateCreateArgsSchema: z.ZodType<Prisma.client_rateCreateArgs> = z.object({
  select: client_rateSelectSchema.optional(),
  include: client_rateIncludeSchema.optional(),
  data: z.union([ client_rateCreateInputSchema,client_rateUncheckedCreateInputSchema ]),
}).strict()

export const client_rateUpsertArgsSchema: z.ZodType<Prisma.client_rateUpsertArgs> = z.object({
  select: client_rateSelectSchema.optional(),
  include: client_rateIncludeSchema.optional(),
  where: client_rateWhereUniqueInputSchema,
  create: z.union([ client_rateCreateInputSchema,client_rateUncheckedCreateInputSchema ]),
  update: z.union([ client_rateUpdateInputSchema,client_rateUncheckedUpdateInputSchema ]),
}).strict()

export const client_rateCreateManyArgsSchema: z.ZodType<Prisma.client_rateCreateManyArgs> = z.object({
  data: z.union([ client_rateCreateManyInputSchema,client_rateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const client_rateDeleteArgsSchema: z.ZodType<Prisma.client_rateDeleteArgs> = z.object({
  select: client_rateSelectSchema.optional(),
  include: client_rateIncludeSchema.optional(),
  where: client_rateWhereUniqueInputSchema,
}).strict()

export const client_rateUpdateArgsSchema: z.ZodType<Prisma.client_rateUpdateArgs> = z.object({
  select: client_rateSelectSchema.optional(),
  include: client_rateIncludeSchema.optional(),
  data: z.union([ client_rateUpdateInputSchema,client_rateUncheckedUpdateInputSchema ]),
  where: client_rateWhereUniqueInputSchema,
}).strict()

export const client_rateUpdateManyArgsSchema: z.ZodType<Prisma.client_rateUpdateManyArgs> = z.object({
  data: z.union([ client_rateUpdateManyMutationInputSchema,client_rateUncheckedUpdateManyInputSchema ]),
  where: client_rateWhereInputSchema.optional(),
}).strict()

export const client_rateDeleteManyArgsSchema: z.ZodType<Prisma.client_rateDeleteManyArgs> = z.object({
  where: client_rateWhereInputSchema.optional(),
}).strict()

export const consumable_modelCreateArgsSchema: z.ZodType<Prisma.consumable_modelCreateArgs> = z.object({
  select: consumable_modelSelectSchema.optional(),
  include: consumable_modelIncludeSchema.optional(),
  data: z.union([ consumable_modelCreateInputSchema,consumable_modelUncheckedCreateInputSchema ]),
}).strict()

export const consumable_modelUpsertArgsSchema: z.ZodType<Prisma.consumable_modelUpsertArgs> = z.object({
  select: consumable_modelSelectSchema.optional(),
  include: consumable_modelIncludeSchema.optional(),
  where: consumable_modelWhereUniqueInputSchema,
  create: z.union([ consumable_modelCreateInputSchema,consumable_modelUncheckedCreateInputSchema ]),
  update: z.union([ consumable_modelUpdateInputSchema,consumable_modelUncheckedUpdateInputSchema ]),
}).strict()

export const consumable_modelCreateManyArgsSchema: z.ZodType<Prisma.consumable_modelCreateManyArgs> = z.object({
  data: z.union([ consumable_modelCreateManyInputSchema,consumable_modelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const consumable_modelDeleteArgsSchema: z.ZodType<Prisma.consumable_modelDeleteArgs> = z.object({
  select: consumable_modelSelectSchema.optional(),
  include: consumable_modelIncludeSchema.optional(),
  where: consumable_modelWhereUniqueInputSchema,
}).strict()

export const consumable_modelUpdateArgsSchema: z.ZodType<Prisma.consumable_modelUpdateArgs> = z.object({
  select: consumable_modelSelectSchema.optional(),
  include: consumable_modelIncludeSchema.optional(),
  data: z.union([ consumable_modelUpdateInputSchema,consumable_modelUncheckedUpdateInputSchema ]),
  where: consumable_modelWhereUniqueInputSchema,
}).strict()

export const consumable_modelUpdateManyArgsSchema: z.ZodType<Prisma.consumable_modelUpdateManyArgs> = z.object({
  data: z.union([ consumable_modelUpdateManyMutationInputSchema,consumable_modelUncheckedUpdateManyInputSchema ]),
  where: consumable_modelWhereInputSchema.optional(),
}).strict()

export const consumable_modelDeleteManyArgsSchema: z.ZodType<Prisma.consumable_modelDeleteManyArgs> = z.object({
  where: consumable_modelWhereInputSchema.optional(),
}).strict()

export const deptCreateArgsSchema: z.ZodType<Prisma.deptCreateArgs> = z.object({
  select: deptSelectSchema.optional(),
  include: deptIncludeSchema.optional(),
  data: z.union([ deptCreateInputSchema,deptUncheckedCreateInputSchema ]),
}).strict()

export const deptUpsertArgsSchema: z.ZodType<Prisma.deptUpsertArgs> = z.object({
  select: deptSelectSchema.optional(),
  include: deptIncludeSchema.optional(),
  where: deptWhereUniqueInputSchema,
  create: z.union([ deptCreateInputSchema,deptUncheckedCreateInputSchema ]),
  update: z.union([ deptUpdateInputSchema,deptUncheckedUpdateInputSchema ]),
}).strict()

export const deptCreateManyArgsSchema: z.ZodType<Prisma.deptCreateManyArgs> = z.object({
  data: z.union([ deptCreateManyInputSchema,deptCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const deptDeleteArgsSchema: z.ZodType<Prisma.deptDeleteArgs> = z.object({
  select: deptSelectSchema.optional(),
  include: deptIncludeSchema.optional(),
  where: deptWhereUniqueInputSchema,
}).strict()

export const deptUpdateArgsSchema: z.ZodType<Prisma.deptUpdateArgs> = z.object({
  select: deptSelectSchema.optional(),
  include: deptIncludeSchema.optional(),
  data: z.union([ deptUpdateInputSchema,deptUncheckedUpdateInputSchema ]),
  where: deptWhereUniqueInputSchema,
}).strict()

export const deptUpdateManyArgsSchema: z.ZodType<Prisma.deptUpdateManyArgs> = z.object({
  data: z.union([ deptUpdateManyMutationInputSchema,deptUncheckedUpdateManyInputSchema ]),
  where: deptWhereInputSchema.optional(),
}).strict()

export const deptDeleteManyArgsSchema: z.ZodType<Prisma.deptDeleteManyArgs> = z.object({
  where: deptWhereInputSchema.optional(),
}).strict()

export const deviceCreateArgsSchema: z.ZodType<Prisma.deviceCreateArgs> = z.object({
  select: deviceSelectSchema.optional(),
  include: deviceIncludeSchema.optional(),
  data: z.union([ deviceCreateInputSchema,deviceUncheckedCreateInputSchema ]),
}).strict()

export const deviceUpsertArgsSchema: z.ZodType<Prisma.deviceUpsertArgs> = z.object({
  select: deviceSelectSchema.optional(),
  include: deviceIncludeSchema.optional(),
  where: deviceWhereUniqueInputSchema,
  create: z.union([ deviceCreateInputSchema,deviceUncheckedCreateInputSchema ]),
  update: z.union([ deviceUpdateInputSchema,deviceUncheckedUpdateInputSchema ]),
}).strict()

export const deviceCreateManyArgsSchema: z.ZodType<Prisma.deviceCreateManyArgs> = z.object({
  data: z.union([ deviceCreateManyInputSchema,deviceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const deviceDeleteArgsSchema: z.ZodType<Prisma.deviceDeleteArgs> = z.object({
  select: deviceSelectSchema.optional(),
  include: deviceIncludeSchema.optional(),
  where: deviceWhereUniqueInputSchema,
}).strict()

export const deviceUpdateArgsSchema: z.ZodType<Prisma.deviceUpdateArgs> = z.object({
  select: deviceSelectSchema.optional(),
  include: deviceIncludeSchema.optional(),
  data: z.union([ deviceUpdateInputSchema,deviceUncheckedUpdateInputSchema ]),
  where: deviceWhereUniqueInputSchema,
}).strict()

export const deviceUpdateManyArgsSchema: z.ZodType<Prisma.deviceUpdateManyArgs> = z.object({
  data: z.union([ deviceUpdateManyMutationInputSchema,deviceUncheckedUpdateManyInputSchema ]),
  where: deviceWhereInputSchema.optional(),
}).strict()

export const deviceDeleteManyArgsSchema: z.ZodType<Prisma.deviceDeleteManyArgs> = z.object({
  where: deviceWhereInputSchema.optional(),
}).strict()

export const device_approvalCreateArgsSchema: z.ZodType<Prisma.device_approvalCreateArgs> = z.object({
  select: device_approvalSelectSchema.optional(),
  include: device_approvalIncludeSchema.optional(),
  data: z.union([ device_approvalCreateInputSchema,device_approvalUncheckedCreateInputSchema ]),
}).strict()

export const device_approvalUpsertArgsSchema: z.ZodType<Prisma.device_approvalUpsertArgs> = z.object({
  select: device_approvalSelectSchema.optional(),
  include: device_approvalIncludeSchema.optional(),
  where: device_approvalWhereUniqueInputSchema,
  create: z.union([ device_approvalCreateInputSchema,device_approvalUncheckedCreateInputSchema ]),
  update: z.union([ device_approvalUpdateInputSchema,device_approvalUncheckedUpdateInputSchema ]),
}).strict()

export const device_approvalCreateManyArgsSchema: z.ZodType<Prisma.device_approvalCreateManyArgs> = z.object({
  data: z.union([ device_approvalCreateManyInputSchema,device_approvalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_approvalDeleteArgsSchema: z.ZodType<Prisma.device_approvalDeleteArgs> = z.object({
  select: device_approvalSelectSchema.optional(),
  include: device_approvalIncludeSchema.optional(),
  where: device_approvalWhereUniqueInputSchema,
}).strict()

export const device_approvalUpdateArgsSchema: z.ZodType<Prisma.device_approvalUpdateArgs> = z.object({
  select: device_approvalSelectSchema.optional(),
  include: device_approvalIncludeSchema.optional(),
  data: z.union([ device_approvalUpdateInputSchema,device_approvalUncheckedUpdateInputSchema ]),
  where: device_approvalWhereUniqueInputSchema,
}).strict()

export const device_approvalUpdateManyArgsSchema: z.ZodType<Prisma.device_approvalUpdateManyArgs> = z.object({
  data: z.union([ device_approvalUpdateManyMutationInputSchema,device_approvalUncheckedUpdateManyInputSchema ]),
  where: device_approvalWhereInputSchema.optional(),
}).strict()

export const device_approvalDeleteManyArgsSchema: z.ZodType<Prisma.device_approvalDeleteManyArgs> = z.object({
  where: device_approvalWhereInputSchema.optional(),
}).strict()

export const device_approval_typeCreateArgsSchema: z.ZodType<Prisma.device_approval_typeCreateArgs> = z.object({
  select: device_approval_typeSelectSchema.optional(),
  include: device_approval_typeIncludeSchema.optional(),
  data: z.union([ device_approval_typeCreateInputSchema,device_approval_typeUncheckedCreateInputSchema ]),
}).strict()

export const device_approval_typeUpsertArgsSchema: z.ZodType<Prisma.device_approval_typeUpsertArgs> = z.object({
  select: device_approval_typeSelectSchema.optional(),
  include: device_approval_typeIncludeSchema.optional(),
  where: device_approval_typeWhereUniqueInputSchema,
  create: z.union([ device_approval_typeCreateInputSchema,device_approval_typeUncheckedCreateInputSchema ]),
  update: z.union([ device_approval_typeUpdateInputSchema,device_approval_typeUncheckedUpdateInputSchema ]),
}).strict()

export const device_approval_typeCreateManyArgsSchema: z.ZodType<Prisma.device_approval_typeCreateManyArgs> = z.object({
  data: z.union([ device_approval_typeCreateManyInputSchema,device_approval_typeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_approval_typeDeleteArgsSchema: z.ZodType<Prisma.device_approval_typeDeleteArgs> = z.object({
  select: device_approval_typeSelectSchema.optional(),
  include: device_approval_typeIncludeSchema.optional(),
  where: device_approval_typeWhereUniqueInputSchema,
}).strict()

export const device_approval_typeUpdateArgsSchema: z.ZodType<Prisma.device_approval_typeUpdateArgs> = z.object({
  select: device_approval_typeSelectSchema.optional(),
  include: device_approval_typeIncludeSchema.optional(),
  data: z.union([ device_approval_typeUpdateInputSchema,device_approval_typeUncheckedUpdateInputSchema ]),
  where: device_approval_typeWhereUniqueInputSchema,
}).strict()

export const device_approval_typeUpdateManyArgsSchema: z.ZodType<Prisma.device_approval_typeUpdateManyArgs> = z.object({
  data: z.union([ device_approval_typeUpdateManyMutationInputSchema,device_approval_typeUncheckedUpdateManyInputSchema ]),
  where: device_approval_typeWhereInputSchema.optional(),
}).strict()

export const device_approval_typeDeleteManyArgsSchema: z.ZodType<Prisma.device_approval_typeDeleteManyArgs> = z.object({
  where: device_approval_typeWhereInputSchema.optional(),
}).strict()

export const device_consumable_compatibilityCreateArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateArgs> = z.object({
  select: device_consumable_compatibilitySelectSchema.optional(),
  include: device_consumable_compatibilityIncludeSchema.optional(),
  data: z.union([ device_consumable_compatibilityCreateInputSchema,device_consumable_compatibilityUncheckedCreateInputSchema ]),
}).strict()

export const device_consumable_compatibilityUpsertArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityUpsertArgs> = z.object({
  select: device_consumable_compatibilitySelectSchema.optional(),
  include: device_consumable_compatibilityIncludeSchema.optional(),
  where: device_consumable_compatibilityWhereUniqueInputSchema,
  create: z.union([ device_consumable_compatibilityCreateInputSchema,device_consumable_compatibilityUncheckedCreateInputSchema ]),
  update: z.union([ device_consumable_compatibilityUpdateInputSchema,device_consumable_compatibilityUncheckedUpdateInputSchema ]),
}).strict()

export const device_consumable_compatibilityCreateManyArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityCreateManyArgs> = z.object({
  data: z.union([ device_consumable_compatibilityCreateManyInputSchema,device_consumable_compatibilityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_consumable_compatibilityDeleteArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityDeleteArgs> = z.object({
  select: device_consumable_compatibilitySelectSchema.optional(),
  include: device_consumable_compatibilityIncludeSchema.optional(),
  where: device_consumable_compatibilityWhereUniqueInputSchema,
}).strict()

export const device_consumable_compatibilityUpdateArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateArgs> = z.object({
  select: device_consumable_compatibilitySelectSchema.optional(),
  include: device_consumable_compatibilityIncludeSchema.optional(),
  data: z.union([ device_consumable_compatibilityUpdateInputSchema,device_consumable_compatibilityUncheckedUpdateInputSchema ]),
  where: device_consumable_compatibilityWhereUniqueInputSchema,
}).strict()

export const device_consumable_compatibilityUpdateManyArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityUpdateManyArgs> = z.object({
  data: z.union([ device_consumable_compatibilityUpdateManyMutationInputSchema,device_consumable_compatibilityUncheckedUpdateManyInputSchema ]),
  where: device_consumable_compatibilityWhereInputSchema.optional(),
}).strict()

export const device_consumable_compatibilityDeleteManyArgsSchema: z.ZodType<Prisma.device_consumable_compatibilityDeleteManyArgs> = z.object({
  where: device_consumable_compatibilityWhereInputSchema.optional(),
}).strict()

export const device_driverCreateArgsSchema: z.ZodType<Prisma.device_driverCreateArgs> = z.object({
  select: device_driverSelectSchema.optional(),
  include: device_driverIncludeSchema.optional(),
  data: z.union([ device_driverCreateInputSchema,device_driverUncheckedCreateInputSchema ]),
}).strict()

export const device_driverUpsertArgsSchema: z.ZodType<Prisma.device_driverUpsertArgs> = z.object({
  select: device_driverSelectSchema.optional(),
  include: device_driverIncludeSchema.optional(),
  where: device_driverWhereUniqueInputSchema,
  create: z.union([ device_driverCreateInputSchema,device_driverUncheckedCreateInputSchema ]),
  update: z.union([ device_driverUpdateInputSchema,device_driverUncheckedUpdateInputSchema ]),
}).strict()

export const device_driverCreateManyArgsSchema: z.ZodType<Prisma.device_driverCreateManyArgs> = z.object({
  data: z.union([ device_driverCreateManyInputSchema,device_driverCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_driverDeleteArgsSchema: z.ZodType<Prisma.device_driverDeleteArgs> = z.object({
  select: device_driverSelectSchema.optional(),
  include: device_driverIncludeSchema.optional(),
  where: device_driverWhereUniqueInputSchema,
}).strict()

export const device_driverUpdateArgsSchema: z.ZodType<Prisma.device_driverUpdateArgs> = z.object({
  select: device_driverSelectSchema.optional(),
  include: device_driverIncludeSchema.optional(),
  data: z.union([ device_driverUpdateInputSchema,device_driverUncheckedUpdateInputSchema ]),
  where: device_driverWhereUniqueInputSchema,
}).strict()

export const device_driverUpdateManyArgsSchema: z.ZodType<Prisma.device_driverUpdateManyArgs> = z.object({
  data: z.union([ device_driverUpdateManyMutationInputSchema,device_driverUncheckedUpdateManyInputSchema ]),
  where: device_driverWhereInputSchema.optional(),
}).strict()

export const device_driverDeleteManyArgsSchema: z.ZodType<Prisma.device_driverDeleteManyArgs> = z.object({
  where: device_driverWhereInputSchema.optional(),
}).strict()

export const device_inspection_logCreateArgsSchema: z.ZodType<Prisma.device_inspection_logCreateArgs> = z.object({
  select: device_inspection_logSelectSchema.optional(),
  include: device_inspection_logIncludeSchema.optional(),
  data: z.union([ device_inspection_logCreateInputSchema,device_inspection_logUncheckedCreateInputSchema ]),
}).strict()

export const device_inspection_logUpsertArgsSchema: z.ZodType<Prisma.device_inspection_logUpsertArgs> = z.object({
  select: device_inspection_logSelectSchema.optional(),
  include: device_inspection_logIncludeSchema.optional(),
  where: device_inspection_logWhereUniqueInputSchema,
  create: z.union([ device_inspection_logCreateInputSchema,device_inspection_logUncheckedCreateInputSchema ]),
  update: z.union([ device_inspection_logUpdateInputSchema,device_inspection_logUncheckedUpdateInputSchema ]),
}).strict()

export const device_inspection_logCreateManyArgsSchema: z.ZodType<Prisma.device_inspection_logCreateManyArgs> = z.object({
  data: z.union([ device_inspection_logCreateManyInputSchema,device_inspection_logCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_inspection_logDeleteArgsSchema: z.ZodType<Prisma.device_inspection_logDeleteArgs> = z.object({
  select: device_inspection_logSelectSchema.optional(),
  include: device_inspection_logIncludeSchema.optional(),
  where: device_inspection_logWhereUniqueInputSchema,
}).strict()

export const device_inspection_logUpdateArgsSchema: z.ZodType<Prisma.device_inspection_logUpdateArgs> = z.object({
  select: device_inspection_logSelectSchema.optional(),
  include: device_inspection_logIncludeSchema.optional(),
  data: z.union([ device_inspection_logUpdateInputSchema,device_inspection_logUncheckedUpdateInputSchema ]),
  where: device_inspection_logWhereUniqueInputSchema,
}).strict()

export const device_inspection_logUpdateManyArgsSchema: z.ZodType<Prisma.device_inspection_logUpdateManyArgs> = z.object({
  data: z.union([ device_inspection_logUpdateManyMutationInputSchema,device_inspection_logUncheckedUpdateManyInputSchema ]),
  where: device_inspection_logWhereInputSchema.optional(),
}).strict()

export const device_inspection_logDeleteManyArgsSchema: z.ZodType<Prisma.device_inspection_logDeleteManyArgs> = z.object({
  where: device_inspection_logWhereInputSchema.optional(),
}).strict()

export const device_install_infoCreateArgsSchema: z.ZodType<Prisma.device_install_infoCreateArgs> = z.object({
  select: device_install_infoSelectSchema.optional(),
  include: device_install_infoIncludeSchema.optional(),
  data: z.union([ device_install_infoCreateInputSchema,device_install_infoUncheckedCreateInputSchema ]),
}).strict()

export const device_install_infoUpsertArgsSchema: z.ZodType<Prisma.device_install_infoUpsertArgs> = z.object({
  select: device_install_infoSelectSchema.optional(),
  include: device_install_infoIncludeSchema.optional(),
  where: device_install_infoWhereUniqueInputSchema,
  create: z.union([ device_install_infoCreateInputSchema,device_install_infoUncheckedCreateInputSchema ]),
  update: z.union([ device_install_infoUpdateInputSchema,device_install_infoUncheckedUpdateInputSchema ]),
}).strict()

export const device_install_infoCreateManyArgsSchema: z.ZodType<Prisma.device_install_infoCreateManyArgs> = z.object({
  data: z.union([ device_install_infoCreateManyInputSchema,device_install_infoCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_install_infoDeleteArgsSchema: z.ZodType<Prisma.device_install_infoDeleteArgs> = z.object({
  select: device_install_infoSelectSchema.optional(),
  include: device_install_infoIncludeSchema.optional(),
  where: device_install_infoWhereUniqueInputSchema,
}).strict()

export const device_install_infoUpdateArgsSchema: z.ZodType<Prisma.device_install_infoUpdateArgs> = z.object({
  select: device_install_infoSelectSchema.optional(),
  include: device_install_infoIncludeSchema.optional(),
  data: z.union([ device_install_infoUpdateInputSchema,device_install_infoUncheckedUpdateInputSchema ]),
  where: device_install_infoWhereUniqueInputSchema,
}).strict()

export const device_install_infoUpdateManyArgsSchema: z.ZodType<Prisma.device_install_infoUpdateManyArgs> = z.object({
  data: z.union([ device_install_infoUpdateManyMutationInputSchema,device_install_infoUncheckedUpdateManyInputSchema ]),
  where: device_install_infoWhereInputSchema.optional(),
}).strict()

export const device_install_infoDeleteManyArgsSchema: z.ZodType<Prisma.device_install_infoDeleteManyArgs> = z.object({
  where: device_install_infoWhereInputSchema.optional(),
}).strict()

export const device_location_logCreateArgsSchema: z.ZodType<Prisma.device_location_logCreateArgs> = z.object({
  select: device_location_logSelectSchema.optional(),
  include: device_location_logIncludeSchema.optional(),
  data: z.union([ device_location_logCreateInputSchema,device_location_logUncheckedCreateInputSchema ]),
}).strict()

export const device_location_logUpsertArgsSchema: z.ZodType<Prisma.device_location_logUpsertArgs> = z.object({
  select: device_location_logSelectSchema.optional(),
  include: device_location_logIncludeSchema.optional(),
  where: device_location_logWhereUniqueInputSchema,
  create: z.union([ device_location_logCreateInputSchema,device_location_logUncheckedCreateInputSchema ]),
  update: z.union([ device_location_logUpdateInputSchema,device_location_logUncheckedUpdateInputSchema ]),
}).strict()

export const device_location_logCreateManyArgsSchema: z.ZodType<Prisma.device_location_logCreateManyArgs> = z.object({
  data: z.union([ device_location_logCreateManyInputSchema,device_location_logCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_location_logDeleteArgsSchema: z.ZodType<Prisma.device_location_logDeleteArgs> = z.object({
  select: device_location_logSelectSchema.optional(),
  include: device_location_logIncludeSchema.optional(),
  where: device_location_logWhereUniqueInputSchema,
}).strict()

export const device_location_logUpdateArgsSchema: z.ZodType<Prisma.device_location_logUpdateArgs> = z.object({
  select: device_location_logSelectSchema.optional(),
  include: device_location_logIncludeSchema.optional(),
  data: z.union([ device_location_logUpdateInputSchema,device_location_logUncheckedUpdateInputSchema ]),
  where: device_location_logWhereUniqueInputSchema,
}).strict()

export const device_location_logUpdateManyArgsSchema: z.ZodType<Prisma.device_location_logUpdateManyArgs> = z.object({
  data: z.union([ device_location_logUpdateManyMutationInputSchema,device_location_logUncheckedUpdateManyInputSchema ]),
  where: device_location_logWhereInputSchema.optional(),
}).strict()

export const device_location_logDeleteManyArgsSchema: z.ZodType<Prisma.device_location_logDeleteManyArgs> = z.object({
  where: device_location_logWhereInputSchema.optional(),
}).strict()

export const device_modelCreateArgsSchema: z.ZodType<Prisma.device_modelCreateArgs> = z.object({
  select: device_modelSelectSchema.optional(),
  include: device_modelIncludeSchema.optional(),
  data: z.union([ device_modelCreateInputSchema,device_modelUncheckedCreateInputSchema ]),
}).strict()

export const device_modelUpsertArgsSchema: z.ZodType<Prisma.device_modelUpsertArgs> = z.object({
  select: device_modelSelectSchema.optional(),
  include: device_modelIncludeSchema.optional(),
  where: device_modelWhereUniqueInputSchema,
  create: z.union([ device_modelCreateInputSchema,device_modelUncheckedCreateInputSchema ]),
  update: z.union([ device_modelUpdateInputSchema,device_modelUncheckedUpdateInputSchema ]),
}).strict()

export const device_modelCreateManyArgsSchema: z.ZodType<Prisma.device_modelCreateManyArgs> = z.object({
  data: z.union([ device_modelCreateManyInputSchema,device_modelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_modelDeleteArgsSchema: z.ZodType<Prisma.device_modelDeleteArgs> = z.object({
  select: device_modelSelectSchema.optional(),
  include: device_modelIncludeSchema.optional(),
  where: device_modelWhereUniqueInputSchema,
}).strict()

export const device_modelUpdateArgsSchema: z.ZodType<Prisma.device_modelUpdateArgs> = z.object({
  select: device_modelSelectSchema.optional(),
  include: device_modelIncludeSchema.optional(),
  data: z.union([ device_modelUpdateInputSchema,device_modelUncheckedUpdateInputSchema ]),
  where: device_modelWhereUniqueInputSchema,
}).strict()

export const device_modelUpdateManyArgsSchema: z.ZodType<Prisma.device_modelUpdateManyArgs> = z.object({
  data: z.union([ device_modelUpdateManyMutationInputSchema,device_modelUncheckedUpdateManyInputSchema ]),
  where: device_modelWhereInputSchema.optional(),
}).strict()

export const device_modelDeleteManyArgsSchema: z.ZodType<Prisma.device_modelDeleteManyArgs> = z.object({
  where: device_modelWhereInputSchema.optional(),
}).strict()

export const device_optionCreateArgsSchema: z.ZodType<Prisma.device_optionCreateArgs> = z.object({
  select: device_optionSelectSchema.optional(),
  include: device_optionIncludeSchema.optional(),
  data: z.union([ device_optionCreateInputSchema,device_optionUncheckedCreateInputSchema ]),
}).strict()

export const device_optionUpsertArgsSchema: z.ZodType<Prisma.device_optionUpsertArgs> = z.object({
  select: device_optionSelectSchema.optional(),
  include: device_optionIncludeSchema.optional(),
  where: device_optionWhereUniqueInputSchema,
  create: z.union([ device_optionCreateInputSchema,device_optionUncheckedCreateInputSchema ]),
  update: z.union([ device_optionUpdateInputSchema,device_optionUncheckedUpdateInputSchema ]),
}).strict()

export const device_optionCreateManyArgsSchema: z.ZodType<Prisma.device_optionCreateManyArgs> = z.object({
  data: z.union([ device_optionCreateManyInputSchema,device_optionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_optionDeleteArgsSchema: z.ZodType<Prisma.device_optionDeleteArgs> = z.object({
  select: device_optionSelectSchema.optional(),
  include: device_optionIncludeSchema.optional(),
  where: device_optionWhereUniqueInputSchema,
}).strict()

export const device_optionUpdateArgsSchema: z.ZodType<Prisma.device_optionUpdateArgs> = z.object({
  select: device_optionSelectSchema.optional(),
  include: device_optionIncludeSchema.optional(),
  data: z.union([ device_optionUpdateInputSchema,device_optionUncheckedUpdateInputSchema ]),
  where: device_optionWhereUniqueInputSchema,
}).strict()

export const device_optionUpdateManyArgsSchema: z.ZodType<Prisma.device_optionUpdateManyArgs> = z.object({
  data: z.union([ device_optionUpdateManyMutationInputSchema,device_optionUncheckedUpdateManyInputSchema ]),
  where: device_optionWhereInputSchema.optional(),
}).strict()

export const device_optionDeleteManyArgsSchema: z.ZodType<Prisma.device_optionDeleteManyArgs> = z.object({
  where: device_optionWhereInputSchema.optional(),
}).strict()

export const device_option_compatibilityCreateArgsSchema: z.ZodType<Prisma.device_option_compatibilityCreateArgs> = z.object({
  select: device_option_compatibilitySelectSchema.optional(),
  include: device_option_compatibilityIncludeSchema.optional(),
  data: z.union([ device_option_compatibilityCreateInputSchema,device_option_compatibilityUncheckedCreateInputSchema ]),
}).strict()

export const device_option_compatibilityUpsertArgsSchema: z.ZodType<Prisma.device_option_compatibilityUpsertArgs> = z.object({
  select: device_option_compatibilitySelectSchema.optional(),
  include: device_option_compatibilityIncludeSchema.optional(),
  where: device_option_compatibilityWhereUniqueInputSchema,
  create: z.union([ device_option_compatibilityCreateInputSchema,device_option_compatibilityUncheckedCreateInputSchema ]),
  update: z.union([ device_option_compatibilityUpdateInputSchema,device_option_compatibilityUncheckedUpdateInputSchema ]),
}).strict()

export const device_option_compatibilityCreateManyArgsSchema: z.ZodType<Prisma.device_option_compatibilityCreateManyArgs> = z.object({
  data: z.union([ device_option_compatibilityCreateManyInputSchema,device_option_compatibilityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_option_compatibilityDeleteArgsSchema: z.ZodType<Prisma.device_option_compatibilityDeleteArgs> = z.object({
  select: device_option_compatibilitySelectSchema.optional(),
  include: device_option_compatibilityIncludeSchema.optional(),
  where: device_option_compatibilityWhereUniqueInputSchema,
}).strict()

export const device_option_compatibilityUpdateArgsSchema: z.ZodType<Prisma.device_option_compatibilityUpdateArgs> = z.object({
  select: device_option_compatibilitySelectSchema.optional(),
  include: device_option_compatibilityIncludeSchema.optional(),
  data: z.union([ device_option_compatibilityUpdateInputSchema,device_option_compatibilityUncheckedUpdateInputSchema ]),
  where: device_option_compatibilityWhereUniqueInputSchema,
}).strict()

export const device_option_compatibilityUpdateManyArgsSchema: z.ZodType<Prisma.device_option_compatibilityUpdateManyArgs> = z.object({
  data: z.union([ device_option_compatibilityUpdateManyMutationInputSchema,device_option_compatibilityUncheckedUpdateManyInputSchema ]),
  where: device_option_compatibilityWhereInputSchema.optional(),
}).strict()

export const device_option_compatibilityDeleteManyArgsSchema: z.ZodType<Prisma.device_option_compatibilityDeleteManyArgs> = z.object({
  where: device_option_compatibilityWhereInputSchema.optional(),
}).strict()

export const device_statusCreateArgsSchema: z.ZodType<Prisma.device_statusCreateArgs> = z.object({
  select: device_statusSelectSchema.optional(),
  include: device_statusIncludeSchema.optional(),
  data: z.union([ device_statusCreateInputSchema,device_statusUncheckedCreateInputSchema ]),
}).strict()

export const device_statusUpsertArgsSchema: z.ZodType<Prisma.device_statusUpsertArgs> = z.object({
  select: device_statusSelectSchema.optional(),
  include: device_statusIncludeSchema.optional(),
  where: device_statusWhereUniqueInputSchema,
  create: z.union([ device_statusCreateInputSchema,device_statusUncheckedCreateInputSchema ]),
  update: z.union([ device_statusUpdateInputSchema,device_statusUncheckedUpdateInputSchema ]),
}).strict()

export const device_statusCreateManyArgsSchema: z.ZodType<Prisma.device_statusCreateManyArgs> = z.object({
  data: z.union([ device_statusCreateManyInputSchema,device_statusCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const device_statusDeleteArgsSchema: z.ZodType<Prisma.device_statusDeleteArgs> = z.object({
  select: device_statusSelectSchema.optional(),
  include: device_statusIncludeSchema.optional(),
  where: device_statusWhereUniqueInputSchema,
}).strict()

export const device_statusUpdateArgsSchema: z.ZodType<Prisma.device_statusUpdateArgs> = z.object({
  select: device_statusSelectSchema.optional(),
  include: device_statusIncludeSchema.optional(),
  data: z.union([ device_statusUpdateInputSchema,device_statusUncheckedUpdateInputSchema ]),
  where: device_statusWhereUniqueInputSchema,
}).strict()

export const device_statusUpdateManyArgsSchema: z.ZodType<Prisma.device_statusUpdateManyArgs> = z.object({
  data: z.union([ device_statusUpdateManyMutationInputSchema,device_statusUncheckedUpdateManyInputSchema ]),
  where: device_statusWhereInputSchema.optional(),
}).strict()

export const device_statusDeleteManyArgsSchema: z.ZodType<Prisma.device_statusDeleteManyArgs> = z.object({
  where: device_statusWhereInputSchema.optional(),
}).strict()

export const inspection_approvalCreateArgsSchema: z.ZodType<Prisma.inspection_approvalCreateArgs> = z.object({
  select: inspection_approvalSelectSchema.optional(),
  include: inspection_approvalIncludeSchema.optional(),
  data: z.union([ inspection_approvalCreateInputSchema,inspection_approvalUncheckedCreateInputSchema ]),
}).strict()

export const inspection_approvalUpsertArgsSchema: z.ZodType<Prisma.inspection_approvalUpsertArgs> = z.object({
  select: inspection_approvalSelectSchema.optional(),
  include: inspection_approvalIncludeSchema.optional(),
  where: inspection_approvalWhereUniqueInputSchema,
  create: z.union([ inspection_approvalCreateInputSchema,inspection_approvalUncheckedCreateInputSchema ]),
  update: z.union([ inspection_approvalUpdateInputSchema,inspection_approvalUncheckedUpdateInputSchema ]),
}).strict()

export const inspection_approvalCreateManyArgsSchema: z.ZodType<Prisma.inspection_approvalCreateManyArgs> = z.object({
  data: z.union([ inspection_approvalCreateManyInputSchema,inspection_approvalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const inspection_approvalDeleteArgsSchema: z.ZodType<Prisma.inspection_approvalDeleteArgs> = z.object({
  select: inspection_approvalSelectSchema.optional(),
  include: inspection_approvalIncludeSchema.optional(),
  where: inspection_approvalWhereUniqueInputSchema,
}).strict()

export const inspection_approvalUpdateArgsSchema: z.ZodType<Prisma.inspection_approvalUpdateArgs> = z.object({
  select: inspection_approvalSelectSchema.optional(),
  include: inspection_approvalIncludeSchema.optional(),
  data: z.union([ inspection_approvalUpdateInputSchema,inspection_approvalUncheckedUpdateInputSchema ]),
  where: inspection_approvalWhereUniqueInputSchema,
}).strict()

export const inspection_approvalUpdateManyArgsSchema: z.ZodType<Prisma.inspection_approvalUpdateManyArgs> = z.object({
  data: z.union([ inspection_approvalUpdateManyMutationInputSchema,inspection_approvalUncheckedUpdateManyInputSchema ]),
  where: inspection_approvalWhereInputSchema.optional(),
}).strict()

export const inspection_approvalDeleteManyArgsSchema: z.ZodType<Prisma.inspection_approvalDeleteManyArgs> = z.object({
  where: inspection_approvalWhereInputSchema.optional(),
}).strict()

export const locationCreateArgsSchema: z.ZodType<Prisma.locationCreateArgs> = z.object({
  select: locationSelectSchema.optional(),
  include: locationIncludeSchema.optional(),
  data: z.union([ locationCreateInputSchema,locationUncheckedCreateInputSchema ]),
}).strict()

export const locationUpsertArgsSchema: z.ZodType<Prisma.locationUpsertArgs> = z.object({
  select: locationSelectSchema.optional(),
  include: locationIncludeSchema.optional(),
  where: locationWhereUniqueInputSchema,
  create: z.union([ locationCreateInputSchema,locationUncheckedCreateInputSchema ]),
  update: z.union([ locationUpdateInputSchema,locationUncheckedUpdateInputSchema ]),
}).strict()

export const locationCreateManyArgsSchema: z.ZodType<Prisma.locationCreateManyArgs> = z.object({
  data: z.union([ locationCreateManyInputSchema,locationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const locationDeleteArgsSchema: z.ZodType<Prisma.locationDeleteArgs> = z.object({
  select: locationSelectSchema.optional(),
  include: locationIncludeSchema.optional(),
  where: locationWhereUniqueInputSchema,
}).strict()

export const locationUpdateArgsSchema: z.ZodType<Prisma.locationUpdateArgs> = z.object({
  select: locationSelectSchema.optional(),
  include: locationIncludeSchema.optional(),
  data: z.union([ locationUpdateInputSchema,locationUncheckedUpdateInputSchema ]),
  where: locationWhereUniqueInputSchema,
}).strict()

export const locationUpdateManyArgsSchema: z.ZodType<Prisma.locationUpdateManyArgs> = z.object({
  data: z.union([ locationUpdateManyMutationInputSchema,locationUncheckedUpdateManyInputSchema ]),
  where: locationWhereInputSchema.optional(),
}).strict()

export const locationDeleteManyArgsSchema: z.ZodType<Prisma.locationDeleteManyArgs> = z.object({
  where: locationWhereInputSchema.optional(),
}).strict()

export const option_modelCreateArgsSchema: z.ZodType<Prisma.option_modelCreateArgs> = z.object({
  select: option_modelSelectSchema.optional(),
  include: option_modelIncludeSchema.optional(),
  data: z.union([ option_modelCreateInputSchema,option_modelUncheckedCreateInputSchema ]),
}).strict()

export const option_modelUpsertArgsSchema: z.ZodType<Prisma.option_modelUpsertArgs> = z.object({
  select: option_modelSelectSchema.optional(),
  include: option_modelIncludeSchema.optional(),
  where: option_modelWhereUniqueInputSchema,
  create: z.union([ option_modelCreateInputSchema,option_modelUncheckedCreateInputSchema ]),
  update: z.union([ option_modelUpdateInputSchema,option_modelUncheckedUpdateInputSchema ]),
}).strict()

export const option_modelCreateManyArgsSchema: z.ZodType<Prisma.option_modelCreateManyArgs> = z.object({
  data: z.union([ option_modelCreateManyInputSchema,option_modelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const option_modelDeleteArgsSchema: z.ZodType<Prisma.option_modelDeleteArgs> = z.object({
  select: option_modelSelectSchema.optional(),
  include: option_modelIncludeSchema.optional(),
  where: option_modelWhereUniqueInputSchema,
}).strict()

export const option_modelUpdateArgsSchema: z.ZodType<Prisma.option_modelUpdateArgs> = z.object({
  select: option_modelSelectSchema.optional(),
  include: option_modelIncludeSchema.optional(),
  data: z.union([ option_modelUpdateInputSchema,option_modelUncheckedUpdateInputSchema ]),
  where: option_modelWhereUniqueInputSchema,
}).strict()

export const option_modelUpdateManyArgsSchema: z.ZodType<Prisma.option_modelUpdateManyArgs> = z.object({
  data: z.union([ option_modelUpdateManyMutationInputSchema,option_modelUncheckedUpdateManyInputSchema ]),
  where: option_modelWhereInputSchema.optional(),
}).strict()

export const option_modelDeleteManyArgsSchema: z.ZodType<Prisma.option_modelDeleteManyArgs> = z.object({
  where: option_modelWhereInputSchema.optional(),
}).strict()

export const sidoCreateArgsSchema: z.ZodType<Prisma.sidoCreateArgs> = z.object({
  select: sidoSelectSchema.optional(),
  include: sidoIncludeSchema.optional(),
  data: z.union([ sidoCreateInputSchema,sidoUncheckedCreateInputSchema ]),
}).strict()

export const sidoUpsertArgsSchema: z.ZodType<Prisma.sidoUpsertArgs> = z.object({
  select: sidoSelectSchema.optional(),
  include: sidoIncludeSchema.optional(),
  where: sidoWhereUniqueInputSchema,
  create: z.union([ sidoCreateInputSchema,sidoUncheckedCreateInputSchema ]),
  update: z.union([ sidoUpdateInputSchema,sidoUncheckedUpdateInputSchema ]),
}).strict()

export const sidoCreateManyArgsSchema: z.ZodType<Prisma.sidoCreateManyArgs> = z.object({
  data: z.union([ sidoCreateManyInputSchema,sidoCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const sidoDeleteArgsSchema: z.ZodType<Prisma.sidoDeleteArgs> = z.object({
  select: sidoSelectSchema.optional(),
  include: sidoIncludeSchema.optional(),
  where: sidoWhereUniqueInputSchema,
}).strict()

export const sidoUpdateArgsSchema: z.ZodType<Prisma.sidoUpdateArgs> = z.object({
  select: sidoSelectSchema.optional(),
  include: sidoIncludeSchema.optional(),
  data: z.union([ sidoUpdateInputSchema,sidoUncheckedUpdateInputSchema ]),
  where: sidoWhereUniqueInputSchema,
}).strict()

export const sidoUpdateManyArgsSchema: z.ZodType<Prisma.sidoUpdateManyArgs> = z.object({
  data: z.union([ sidoUpdateManyMutationInputSchema,sidoUncheckedUpdateManyInputSchema ]),
  where: sidoWhereInputSchema.optional(),
}).strict()

export const sidoDeleteManyArgsSchema: z.ZodType<Prisma.sidoDeleteManyArgs> = z.object({
  where: sidoWhereInputSchema.optional(),
}).strict()

export const sigunguCreateArgsSchema: z.ZodType<Prisma.sigunguCreateArgs> = z.object({
  select: sigunguSelectSchema.optional(),
  include: sigunguIncludeSchema.optional(),
  data: z.union([ sigunguCreateInputSchema,sigunguUncheckedCreateInputSchema ]),
}).strict()

export const sigunguUpsertArgsSchema: z.ZodType<Prisma.sigunguUpsertArgs> = z.object({
  select: sigunguSelectSchema.optional(),
  include: sigunguIncludeSchema.optional(),
  where: sigunguWhereUniqueInputSchema,
  create: z.union([ sigunguCreateInputSchema,sigunguUncheckedCreateInputSchema ]),
  update: z.union([ sigunguUpdateInputSchema,sigunguUncheckedUpdateInputSchema ]),
}).strict()

export const sigunguCreateManyArgsSchema: z.ZodType<Prisma.sigunguCreateManyArgs> = z.object({
  data: z.union([ sigunguCreateManyInputSchema,sigunguCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const sigunguDeleteArgsSchema: z.ZodType<Prisma.sigunguDeleteArgs> = z.object({
  select: sigunguSelectSchema.optional(),
  include: sigunguIncludeSchema.optional(),
  where: sigunguWhereUniqueInputSchema,
}).strict()

export const sigunguUpdateArgsSchema: z.ZodType<Prisma.sigunguUpdateArgs> = z.object({
  select: sigunguSelectSchema.optional(),
  include: sigunguIncludeSchema.optional(),
  data: z.union([ sigunguUpdateInputSchema,sigunguUncheckedUpdateInputSchema ]),
  where: sigunguWhereUniqueInputSchema,
}).strict()

export const sigunguUpdateManyArgsSchema: z.ZodType<Prisma.sigunguUpdateManyArgs> = z.object({
  data: z.union([ sigunguUpdateManyMutationInputSchema,sigunguUncheckedUpdateManyInputSchema ]),
  where: sigunguWhereInputSchema.optional(),
}).strict()

export const sigunguDeleteManyArgsSchema: z.ZodType<Prisma.sigunguDeleteManyArgs> = z.object({
  where: sigunguWhereInputSchema.optional(),
}).strict()

export const userCreateArgsSchema: z.ZodType<Prisma.userCreateArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  data: z.union([ userCreateInputSchema,userUncheckedCreateInputSchema ]),
}).strict()

export const userUpsertArgsSchema: z.ZodType<Prisma.userUpsertArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereUniqueInputSchema,
  create: z.union([ userCreateInputSchema,userUncheckedCreateInputSchema ]),
  update: z.union([ userUpdateInputSchema,userUncheckedUpdateInputSchema ]),
}).strict()

export const userCreateManyArgsSchema: z.ZodType<Prisma.userCreateManyArgs> = z.object({
  data: z.union([ userCreateManyInputSchema,userCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const userDeleteArgsSchema: z.ZodType<Prisma.userDeleteArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  where: userWhereUniqueInputSchema,
}).strict()

export const userUpdateArgsSchema: z.ZodType<Prisma.userUpdateArgs> = z.object({
  select: userSelectSchema.optional(),
  include: userIncludeSchema.optional(),
  data: z.union([ userUpdateInputSchema,userUncheckedUpdateInputSchema ]),
  where: userWhereUniqueInputSchema,
}).strict()

export const userUpdateManyArgsSchema: z.ZodType<Prisma.userUpdateManyArgs> = z.object({
  data: z.union([ userUpdateManyMutationInputSchema,userUncheckedUpdateManyInputSchema ]),
  where: userWhereInputSchema.optional(),
}).strict()

export const userDeleteManyArgsSchema: z.ZodType<Prisma.userDeleteManyArgs> = z.object({
  where: userWhereInputSchema.optional(),
}).strict()

export const user_positionCreateArgsSchema: z.ZodType<Prisma.user_positionCreateArgs> = z.object({
  select: user_positionSelectSchema.optional(),
  include: user_positionIncludeSchema.optional(),
  data: z.union([ user_positionCreateInputSchema,user_positionUncheckedCreateInputSchema ]),
}).strict()

export const user_positionUpsertArgsSchema: z.ZodType<Prisma.user_positionUpsertArgs> = z.object({
  select: user_positionSelectSchema.optional(),
  include: user_positionIncludeSchema.optional(),
  where: user_positionWhereUniqueInputSchema,
  create: z.union([ user_positionCreateInputSchema,user_positionUncheckedCreateInputSchema ]),
  update: z.union([ user_positionUpdateInputSchema,user_positionUncheckedUpdateInputSchema ]),
}).strict()

export const user_positionCreateManyArgsSchema: z.ZodType<Prisma.user_positionCreateManyArgs> = z.object({
  data: z.union([ user_positionCreateManyInputSchema,user_positionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const user_positionDeleteArgsSchema: z.ZodType<Prisma.user_positionDeleteArgs> = z.object({
  select: user_positionSelectSchema.optional(),
  include: user_positionIncludeSchema.optional(),
  where: user_positionWhereUniqueInputSchema,
}).strict()

export const user_positionUpdateArgsSchema: z.ZodType<Prisma.user_positionUpdateArgs> = z.object({
  select: user_positionSelectSchema.optional(),
  include: user_positionIncludeSchema.optional(),
  data: z.union([ user_positionUpdateInputSchema,user_positionUncheckedUpdateInputSchema ]),
  where: user_positionWhereUniqueInputSchema,
}).strict()

export const user_positionUpdateManyArgsSchema: z.ZodType<Prisma.user_positionUpdateManyArgs> = z.object({
  data: z.union([ user_positionUpdateManyMutationInputSchema,user_positionUncheckedUpdateManyInputSchema ]),
  where: user_positionWhereInputSchema.optional(),
}).strict()

export const user_positionDeleteManyArgsSchema: z.ZodType<Prisma.user_positionDeleteManyArgs> = z.object({
  where: user_positionWhereInputSchema.optional(),
}).strict()

export const user_role_assignmentCreateArgsSchema: z.ZodType<Prisma.user_role_assignmentCreateArgs> = z.object({
  select: user_role_assignmentSelectSchema.optional(),
  include: user_role_assignmentIncludeSchema.optional(),
  data: z.union([ user_role_assignmentCreateInputSchema,user_role_assignmentUncheckedCreateInputSchema ]),
}).strict()

export const user_role_assignmentUpsertArgsSchema: z.ZodType<Prisma.user_role_assignmentUpsertArgs> = z.object({
  select: user_role_assignmentSelectSchema.optional(),
  include: user_role_assignmentIncludeSchema.optional(),
  where: user_role_assignmentWhereUniqueInputSchema,
  create: z.union([ user_role_assignmentCreateInputSchema,user_role_assignmentUncheckedCreateInputSchema ]),
  update: z.union([ user_role_assignmentUpdateInputSchema,user_role_assignmentUncheckedUpdateInputSchema ]),
}).strict()

export const user_role_assignmentCreateManyArgsSchema: z.ZodType<Prisma.user_role_assignmentCreateManyArgs> = z.object({
  data: z.union([ user_role_assignmentCreateManyInputSchema,user_role_assignmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const user_role_assignmentDeleteArgsSchema: z.ZodType<Prisma.user_role_assignmentDeleteArgs> = z.object({
  select: user_role_assignmentSelectSchema.optional(),
  include: user_role_assignmentIncludeSchema.optional(),
  where: user_role_assignmentWhereUniqueInputSchema,
}).strict()

export const user_role_assignmentUpdateArgsSchema: z.ZodType<Prisma.user_role_assignmentUpdateArgs> = z.object({
  select: user_role_assignmentSelectSchema.optional(),
  include: user_role_assignmentIncludeSchema.optional(),
  data: z.union([ user_role_assignmentUpdateInputSchema,user_role_assignmentUncheckedUpdateInputSchema ]),
  where: user_role_assignmentWhereUniqueInputSchema,
}).strict()

export const user_role_assignmentUpdateManyArgsSchema: z.ZodType<Prisma.user_role_assignmentUpdateManyArgs> = z.object({
  data: z.union([ user_role_assignmentUpdateManyMutationInputSchema,user_role_assignmentUncheckedUpdateManyInputSchema ]),
  where: user_role_assignmentWhereInputSchema.optional(),
}).strict()

export const user_role_assignmentDeleteManyArgsSchema: z.ZodType<Prisma.user_role_assignmentDeleteManyArgs> = z.object({
  where: user_role_assignmentWhereInputSchema.optional(),
}).strict()

export const warehouseCreateArgsSchema: z.ZodType<Prisma.warehouseCreateArgs> = z.object({
  select: warehouseSelectSchema.optional(),
  include: warehouseIncludeSchema.optional(),
  data: z.union([ warehouseCreateInputSchema,warehouseUncheckedCreateInputSchema ]),
}).strict()

export const warehouseUpsertArgsSchema: z.ZodType<Prisma.warehouseUpsertArgs> = z.object({
  select: warehouseSelectSchema.optional(),
  include: warehouseIncludeSchema.optional(),
  where: warehouseWhereUniqueInputSchema,
  create: z.union([ warehouseCreateInputSchema,warehouseUncheckedCreateInputSchema ]),
  update: z.union([ warehouseUpdateInputSchema,warehouseUncheckedUpdateInputSchema ]),
}).strict()

export const warehouseCreateManyArgsSchema: z.ZodType<Prisma.warehouseCreateManyArgs> = z.object({
  data: z.union([ warehouseCreateManyInputSchema,warehouseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const warehouseDeleteArgsSchema: z.ZodType<Prisma.warehouseDeleteArgs> = z.object({
  select: warehouseSelectSchema.optional(),
  include: warehouseIncludeSchema.optional(),
  where: warehouseWhereUniqueInputSchema,
}).strict()

export const warehouseUpdateArgsSchema: z.ZodType<Prisma.warehouseUpdateArgs> = z.object({
  select: warehouseSelectSchema.optional(),
  include: warehouseIncludeSchema.optional(),
  data: z.union([ warehouseUpdateInputSchema,warehouseUncheckedUpdateInputSchema ]),
  where: warehouseWhereUniqueInputSchema,
}).strict()

export const warehouseUpdateManyArgsSchema: z.ZodType<Prisma.warehouseUpdateManyArgs> = z.object({
  data: z.union([ warehouseUpdateManyMutationInputSchema,warehouseUncheckedUpdateManyInputSchema ]),
  where: warehouseWhereInputSchema.optional(),
}).strict()

export const warehouseDeleteManyArgsSchema: z.ZodType<Prisma.warehouseDeleteManyArgs> = z.object({
  where: warehouseWhereInputSchema.optional(),
}).strict()

export const deleteneededCreateArgsSchema: z.ZodType<Prisma.deleteneededCreateArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  data: z.union([ deleteneededCreateInputSchema,deleteneededUncheckedCreateInputSchema ]),
}).strict()

export const deleteneededUpsertArgsSchema: z.ZodType<Prisma.deleteneededUpsertArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  where: deleteneededWhereUniqueInputSchema,
  create: z.union([ deleteneededCreateInputSchema,deleteneededUncheckedCreateInputSchema ]),
  update: z.union([ deleteneededUpdateInputSchema,deleteneededUncheckedUpdateInputSchema ]),
}).strict()

export const deleteneededCreateManyArgsSchema: z.ZodType<Prisma.deleteneededCreateManyArgs> = z.object({
  data: z.union([ deleteneededCreateManyInputSchema,deleteneededCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const deleteneededDeleteArgsSchema: z.ZodType<Prisma.deleteneededDeleteArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  where: deleteneededWhereUniqueInputSchema,
}).strict()

export const deleteneededUpdateArgsSchema: z.ZodType<Prisma.deleteneededUpdateArgs> = z.object({
  select: deleteneededSelectSchema.optional(),
  data: z.union([ deleteneededUpdateInputSchema,deleteneededUncheckedUpdateInputSchema ]),
  where: deleteneededWhereUniqueInputSchema,
}).strict()

export const deleteneededUpdateManyArgsSchema: z.ZodType<Prisma.deleteneededUpdateManyArgs> = z.object({
  data: z.union([ deleteneededUpdateManyMutationInputSchema,deleteneededUncheckedUpdateManyInputSchema ]),
  where: deleteneededWhereInputSchema.optional(),
}).strict()

export const deleteneededDeleteManyArgsSchema: z.ZodType<Prisma.deleteneededDeleteManyArgs> = z.object({
  where: deleteneededWhereInputSchema.optional(),
}).strict()

export const v_clientCreateArgsSchema: z.ZodType<Prisma.v_clientCreateArgs> = z.object({
  select: v_clientSelectSchema.optional(),
  data: z.union([ v_clientCreateInputSchema,v_clientUncheckedCreateInputSchema ]),
}).strict()

export const v_clientUpsertArgsSchema: z.ZodType<Prisma.v_clientUpsertArgs> = z.object({
  select: v_clientSelectSchema.optional(),
  where: v_clientWhereUniqueInputSchema,
  create: z.union([ v_clientCreateInputSchema,v_clientUncheckedCreateInputSchema ]),
  update: z.union([ v_clientUpdateInputSchema,v_clientUncheckedUpdateInputSchema ]),
}).strict()

export const v_clientCreateManyArgsSchema: z.ZodType<Prisma.v_clientCreateManyArgs> = z.object({
  data: z.union([ v_clientCreateManyInputSchema,v_clientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const v_clientDeleteArgsSchema: z.ZodType<Prisma.v_clientDeleteArgs> = z.object({
  select: v_clientSelectSchema.optional(),
  where: v_clientWhereUniqueInputSchema,
}).strict()

export const v_clientUpdateArgsSchema: z.ZodType<Prisma.v_clientUpdateArgs> = z.object({
  select: v_clientSelectSchema.optional(),
  data: z.union([ v_clientUpdateInputSchema,v_clientUncheckedUpdateInputSchema ]),
  where: v_clientWhereUniqueInputSchema,
}).strict()

export const v_clientUpdateManyArgsSchema: z.ZodType<Prisma.v_clientUpdateManyArgs> = z.object({
  data: z.union([ v_clientUpdateManyMutationInputSchema,v_clientUncheckedUpdateManyInputSchema ]),
  where: v_clientWhereInputSchema.optional(),
}).strict()

export const v_clientDeleteManyArgsSchema: z.ZodType<Prisma.v_clientDeleteManyArgs> = z.object({
  where: v_clientWhereInputSchema.optional(),
}).strict()

export const v_client_branchCreateArgsSchema: z.ZodType<Prisma.v_client_branchCreateArgs> = z.object({
  select: v_client_branchSelectSchema.optional(),
  data: z.union([ v_client_branchCreateInputSchema,v_client_branchUncheckedCreateInputSchema ]),
}).strict()

export const v_client_branchUpsertArgsSchema: z.ZodType<Prisma.v_client_branchUpsertArgs> = z.object({
  select: v_client_branchSelectSchema.optional(),
  where: v_client_branchWhereUniqueInputSchema,
  create: z.union([ v_client_branchCreateInputSchema,v_client_branchUncheckedCreateInputSchema ]),
  update: z.union([ v_client_branchUpdateInputSchema,v_client_branchUncheckedUpdateInputSchema ]),
}).strict()

export const v_client_branchCreateManyArgsSchema: z.ZodType<Prisma.v_client_branchCreateManyArgs> = z.object({
  data: z.union([ v_client_branchCreateManyInputSchema,v_client_branchCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const v_client_branchDeleteArgsSchema: z.ZodType<Prisma.v_client_branchDeleteArgs> = z.object({
  select: v_client_branchSelectSchema.optional(),
  where: v_client_branchWhereUniqueInputSchema,
}).strict()

export const v_client_branchUpdateArgsSchema: z.ZodType<Prisma.v_client_branchUpdateArgs> = z.object({
  select: v_client_branchSelectSchema.optional(),
  data: z.union([ v_client_branchUpdateInputSchema,v_client_branchUncheckedUpdateInputSchema ]),
  where: v_client_branchWhereUniqueInputSchema,
}).strict()

export const v_client_branchUpdateManyArgsSchema: z.ZodType<Prisma.v_client_branchUpdateManyArgs> = z.object({
  data: z.union([ v_client_branchUpdateManyMutationInputSchema,v_client_branchUncheckedUpdateManyInputSchema ]),
  where: v_client_branchWhereInputSchema.optional(),
}).strict()

export const v_client_branchDeleteManyArgsSchema: z.ZodType<Prisma.v_client_branchDeleteManyArgs> = z.object({
  where: v_client_branchWhereInputSchema.optional(),
}).strict()

export const v_consumable_modelCreateArgsSchema: z.ZodType<Prisma.v_consumable_modelCreateArgs> = z.object({
  select: v_consumable_modelSelectSchema.optional(),
  data: z.union([ v_consumable_modelCreateInputSchema,v_consumable_modelUncheckedCreateInputSchema ]),
}).strict()

export const v_consumable_modelUpsertArgsSchema: z.ZodType<Prisma.v_consumable_modelUpsertArgs> = z.object({
  select: v_consumable_modelSelectSchema.optional(),
  where: v_consumable_modelWhereUniqueInputSchema,
  create: z.union([ v_consumable_modelCreateInputSchema,v_consumable_modelUncheckedCreateInputSchema ]),
  update: z.union([ v_consumable_modelUpdateInputSchema,v_consumable_modelUncheckedUpdateInputSchema ]),
}).strict()

export const v_consumable_modelCreateManyArgsSchema: z.ZodType<Prisma.v_consumable_modelCreateManyArgs> = z.object({
  data: z.union([ v_consumable_modelCreateManyInputSchema,v_consumable_modelCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const v_consumable_modelDeleteArgsSchema: z.ZodType<Prisma.v_consumable_modelDeleteArgs> = z.object({
  select: v_consumable_modelSelectSchema.optional(),
  where: v_consumable_modelWhereUniqueInputSchema,
}).strict()

export const v_consumable_modelUpdateArgsSchema: z.ZodType<Prisma.v_consumable_modelUpdateArgs> = z.object({
  select: v_consumable_modelSelectSchema.optional(),
  data: z.union([ v_consumable_modelUpdateInputSchema,v_consumable_modelUncheckedUpdateInputSchema ]),
  where: v_consumable_modelWhereUniqueInputSchema,
}).strict()

export const v_consumable_modelUpdateManyArgsSchema: z.ZodType<Prisma.v_consumable_modelUpdateManyArgs> = z.object({
  data: z.union([ v_consumable_modelUpdateManyMutationInputSchema,v_consumable_modelUncheckedUpdateManyInputSchema ]),
  where: v_consumable_modelWhereInputSchema.optional(),
}).strict()

export const v_consumable_modelDeleteManyArgsSchema: z.ZodType<Prisma.v_consumable_modelDeleteManyArgs> = z.object({
  where: v_consumable_modelWhereInputSchema.optional(),
}).strict()

export const v_deptCreateArgsSchema: z.ZodType<Prisma.v_deptCreateArgs> = z.object({
  select: v_deptSelectSchema.optional(),
  data: z.union([ v_deptCreateInputSchema,v_deptUncheckedCreateInputSchema ]).optional(),
}).strict()

export const v_deptUpsertArgsSchema: z.ZodType<Prisma.v_deptUpsertArgs> = z.object({
  select: v_deptSelectSchema.optional(),
  where: v_deptWhereUniqueInputSchema,
  create: z.union([ v_deptCreateInputSchema,v_deptUncheckedCreateInputSchema ]),
  update: z.union([ v_deptUpdateInputSchema,v_deptUncheckedUpdateInputSchema ]),
}).strict()

export const v_deptCreateManyArgsSchema: z.ZodType<Prisma.v_deptCreateManyArgs> = z.object({
  data: z.union([ v_deptCreateManyInputSchema,v_deptCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const v_deptDeleteArgsSchema: z.ZodType<Prisma.v_deptDeleteArgs> = z.object({
  select: v_deptSelectSchema.optional(),
  where: v_deptWhereUniqueInputSchema,
}).strict()

export const v_deptUpdateArgsSchema: z.ZodType<Prisma.v_deptUpdateArgs> = z.object({
  select: v_deptSelectSchema.optional(),
  data: z.union([ v_deptUpdateInputSchema,v_deptUncheckedUpdateInputSchema ]),
  where: v_deptWhereUniqueInputSchema,
}).strict()

export const v_deptUpdateManyArgsSchema: z.ZodType<Prisma.v_deptUpdateManyArgs> = z.object({
  data: z.union([ v_deptUpdateManyMutationInputSchema,v_deptUncheckedUpdateManyInputSchema ]),
  where: v_deptWhereInputSchema.optional(),
}).strict()

export const v_deptDeleteManyArgsSchema: z.ZodType<Prisma.v_deptDeleteManyArgs> = z.object({
  where: v_deptWhereInputSchema.optional(),
}).strict()

export const v_device_driverCreateArgsSchema: z.ZodType<Prisma.v_device_driverCreateArgs> = z.object({
  select: v_device_driverSelectSchema.optional(),
  data: z.union([ v_device_driverCreateInputSchema,v_device_driverUncheckedCreateInputSchema ]),
}).strict()

export const v_device_driverUpsertArgsSchema: z.ZodType<Prisma.v_device_driverUpsertArgs> = z.object({
  select: v_device_driverSelectSchema.optional(),
  where: v_device_driverWhereUniqueInputSchema,
  create: z.union([ v_device_driverCreateInputSchema,v_device_driverUncheckedCreateInputSchema ]),
  update: z.union([ v_device_driverUpdateInputSchema,v_device_driverUncheckedUpdateInputSchema ]),
}).strict()

export const v_device_driverCreateManyArgsSchema: z.ZodType<Prisma.v_device_driverCreateManyArgs> = z.object({
  data: z.union([ v_device_driverCreateManyInputSchema,v_device_driverCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const v_device_driverDeleteArgsSchema: z.ZodType<Prisma.v_device_driverDeleteArgs> = z.object({
  select: v_device_driverSelectSchema.optional(),
  where: v_device_driverWhereUniqueInputSchema,
}).strict()

export const v_device_driverUpdateArgsSchema: z.ZodType<Prisma.v_device_driverUpdateArgs> = z.object({
  select: v_device_driverSelectSchema.optional(),
  data: z.union([ v_device_driverUpdateInputSchema,v_device_driverUncheckedUpdateInputSchema ]),
  where: v_device_driverWhereUniqueInputSchema,
}).strict()

export const v_device_driverUpdateManyArgsSchema: z.ZodType<Prisma.v_device_driverUpdateManyArgs> = z.object({
  data: z.union([ v_device_driverUpdateManyMutationInputSchema,v_device_driverUncheckedUpdateManyInputSchema ]),
  where: v_device_driverWhereInputSchema.optional(),
}).strict()

export const v_device_driverDeleteManyArgsSchema: z.ZodType<Prisma.v_device_driverDeleteManyArgs> = z.object({
  where: v_device_driverWhereInputSchema.optional(),
}).strict()

export const v_userCreateArgsSchema: z.ZodType<Prisma.v_userCreateArgs> = z.object({
  select: v_userSelectSchema.optional(),
  data: z.union([ v_userCreateInputSchema,v_userUncheckedCreateInputSchema ]),
}).strict()

export const v_userUpsertArgsSchema: z.ZodType<Prisma.v_userUpsertArgs> = z.object({
  select: v_userSelectSchema.optional(),
  where: v_userWhereUniqueInputSchema,
  create: z.union([ v_userCreateInputSchema,v_userUncheckedCreateInputSchema ]),
  update: z.union([ v_userUpdateInputSchema,v_userUncheckedUpdateInputSchema ]),
}).strict()

export const v_userCreateManyArgsSchema: z.ZodType<Prisma.v_userCreateManyArgs> = z.object({
  data: z.union([ v_userCreateManyInputSchema,v_userCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const v_userDeleteArgsSchema: z.ZodType<Prisma.v_userDeleteArgs> = z.object({
  select: v_userSelectSchema.optional(),
  where: v_userWhereUniqueInputSchema,
}).strict()

export const v_userUpdateArgsSchema: z.ZodType<Prisma.v_userUpdateArgs> = z.object({
  select: v_userSelectSchema.optional(),
  data: z.union([ v_userUpdateInputSchema,v_userUncheckedUpdateInputSchema ]),
  where: v_userWhereUniqueInputSchema,
}).strict()

export const v_userUpdateManyArgsSchema: z.ZodType<Prisma.v_userUpdateManyArgs> = z.object({
  data: z.union([ v_userUpdateManyMutationInputSchema,v_userUncheckedUpdateManyInputSchema ]),
  where: v_userWhereInputSchema.optional(),
}).strict()

export const v_userDeleteManyArgsSchema: z.ZodType<Prisma.v_userDeleteManyArgs> = z.object({
  where: v_userWhereInputSchema.optional(),
}).strict()

export const v_warehouseCreateArgsSchema: z.ZodType<Prisma.v_warehouseCreateArgs> = z.object({
  select: v_warehouseSelectSchema.optional(),
  data: z.union([ v_warehouseCreateInputSchema,v_warehouseUncheckedCreateInputSchema ]),
}).strict()

export const v_warehouseUpsertArgsSchema: z.ZodType<Prisma.v_warehouseUpsertArgs> = z.object({
  select: v_warehouseSelectSchema.optional(),
  where: v_warehouseWhereUniqueInputSchema,
  create: z.union([ v_warehouseCreateInputSchema,v_warehouseUncheckedCreateInputSchema ]),
  update: z.union([ v_warehouseUpdateInputSchema,v_warehouseUncheckedUpdateInputSchema ]),
}).strict()

export const v_warehouseCreateManyArgsSchema: z.ZodType<Prisma.v_warehouseCreateManyArgs> = z.object({
  data: z.union([ v_warehouseCreateManyInputSchema,v_warehouseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const v_warehouseDeleteArgsSchema: z.ZodType<Prisma.v_warehouseDeleteArgs> = z.object({
  select: v_warehouseSelectSchema.optional(),
  where: v_warehouseWhereUniqueInputSchema,
}).strict()

export const v_warehouseUpdateArgsSchema: z.ZodType<Prisma.v_warehouseUpdateArgs> = z.object({
  select: v_warehouseSelectSchema.optional(),
  data: z.union([ v_warehouseUpdateInputSchema,v_warehouseUncheckedUpdateInputSchema ]),
  where: v_warehouseWhereUniqueInputSchema,
}).strict()

export const v_warehouseUpdateManyArgsSchema: z.ZodType<Prisma.v_warehouseUpdateManyArgs> = z.object({
  data: z.union([ v_warehouseUpdateManyMutationInputSchema,v_warehouseUncheckedUpdateManyInputSchema ]),
  where: v_warehouseWhereInputSchema.optional(),
}).strict()

export const v_warehouseDeleteManyArgsSchema: z.ZodType<Prisma.v_warehouseDeleteManyArgs> = z.object({
  where: v_warehouseWhereInputSchema.optional(),
}).strict()

export const v_deviceCreateArgsSchema: z.ZodType<Prisma.v_deviceCreateArgs> = z.object({
  select: v_deviceSelectSchema.optional(),
  data: z.union([ v_deviceCreateInputSchema,v_deviceUncheckedCreateInputSchema ]),
}).strict()

export const v_deviceUpsertArgsSchema: z.ZodType<Prisma.v_deviceUpsertArgs> = z.object({
  select: v_deviceSelectSchema.optional(),
  where: v_deviceWhereUniqueInputSchema,
  create: z.union([ v_deviceCreateInputSchema,v_deviceUncheckedCreateInputSchema ]),
  update: z.union([ v_deviceUpdateInputSchema,v_deviceUncheckedUpdateInputSchema ]),
}).strict()

export const v_deviceCreateManyArgsSchema: z.ZodType<Prisma.v_deviceCreateManyArgs> = z.object({
  data: z.union([ v_deviceCreateManyInputSchema,v_deviceCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const v_deviceDeleteArgsSchema: z.ZodType<Prisma.v_deviceDeleteArgs> = z.object({
  select: v_deviceSelectSchema.optional(),
  where: v_deviceWhereUniqueInputSchema,
}).strict()

export const v_deviceUpdateArgsSchema: z.ZodType<Prisma.v_deviceUpdateArgs> = z.object({
  select: v_deviceSelectSchema.optional(),
  data: z.union([ v_deviceUpdateInputSchema,v_deviceUncheckedUpdateInputSchema ]),
  where: v_deviceWhereUniqueInputSchema,
}).strict()

export const v_deviceUpdateManyArgsSchema: z.ZodType<Prisma.v_deviceUpdateManyArgs> = z.object({
  data: z.union([ v_deviceUpdateManyMutationInputSchema,v_deviceUncheckedUpdateManyInputSchema ]),
  where: v_deviceWhereInputSchema.optional(),
}).strict()

export const v_deviceDeleteManyArgsSchema: z.ZodType<Prisma.v_deviceDeleteManyArgs> = z.object({
  where: v_deviceWhereInputSchema.optional(),
}).strict()